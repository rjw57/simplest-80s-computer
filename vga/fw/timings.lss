
timings.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000017ca  0000185e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800114  00800114  00001872  2**0
                  ALLOC
  3 .stab         00002238  00000000  00000000  00001874  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010cd  00000000  00000000  00003aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00004b79  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00004b8c  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  00004bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  000051bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  0000575e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  00005778  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 04 	jmp	0x868	; 0x868 <__ctors_end>
       4:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__bad_interrupt>
       8:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__bad_interrupt>
       c:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__bad_interrupt>
      10:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__bad_interrupt>
      14:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__bad_interrupt>
      18:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__bad_interrupt>
      1c:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__bad_interrupt>
      20:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__bad_interrupt>
      24:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__bad_interrupt>
      28:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__bad_interrupt>
      2c:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__bad_interrupt>
      30:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__bad_interrupt>
      34:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__bad_interrupt>
      38:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__bad_interrupt>
      3c:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__bad_interrupt>
      40:	0c 94 53 04 	jmp	0x8a6	; 0x8a6 <__vector_16>
      44:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__bad_interrupt>
      48:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__bad_interrupt>
      4c:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__bad_interrupt>
      50:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__bad_interrupt>
      54:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__bad_interrupt>
      58:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__bad_interrupt>
      5c:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__bad_interrupt>
      60:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__bad_interrupt>
      64:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__bad_interrupt>

00000068 <__trampolines_end>:
	...
      70:	7e 81       	ldd	r23, Y+6	; 0x06
      72:	a5 81       	ldd	r26, Z+5	; 0x05
      74:	bd 99       	sbic	0x17, 5	; 23
      76:	42 3c       	cpi	r20, 0xC2	; 194
      78:	7e ff       	.word	0xff7e	; ????
      7a:	db ff       	.word	0xffdb	; ????
      7c:	c3 e7       	ldi	r28, 0x73	; 115
      7e:	7e 3c       	cpi	r23, 0xCE	; 206
      80:	36 7f       	andi	r19, 0xF6	; 246
      82:	7f 7f       	andi	r23, 0xFF	; 255
      84:	3e 1c       	adc	r3, r14
      86:	08 00       	.word	0x0008	; ????
      88:	08 1c       	adc	r0, r8
      8a:	3e 7f       	andi	r19, 0xFE	; 254
      8c:	3e 1c       	adc	r3, r14
      8e:	08 00       	.word	0x0008	; ????
      90:	1c 3e       	cpi	r17, 0xEC	; 236
      92:	1c 7f       	andi	r17, 0xFC	; 252
      94:	7f 6b       	ori	r23, 0xBF	; 191
      96:	08 1c       	adc	r0, r8
      98:	08 08       	sbc	r0, r8
      9a:	1c 3e       	cpi	r17, 0xEC	; 236
      9c:	7f 3e       	cpi	r23, 0xEF	; 239
      9e:	08 1c       	adc	r0, r8
      a0:	00 00       	nop
      a2:	18 3c       	cpi	r17, 0xC8	; 200
      a4:	3c 18       	sub	r3, r12
      a6:	00 00       	nop
      a8:	ff ff       	.word	0xffff	; ????
      aa:	e7 c3       	rjmp	.+1998   	; 0x87a <__do_copy_data+0x6>
      ac:	c3 e7       	ldi	r28, 0x73	; 115
      ae:	ff ff       	.word	0xffff	; ????
      b0:	00 3c       	cpi	r16, 0xC0	; 192
      b2:	66 42       	sbci	r22, 0x26	; 38
      b4:	42 66       	ori	r20, 0x62	; 98
      b6:	3c 00       	.word	0x003c	; ????
      b8:	ff c3       	rjmp	.+2046   	; 0x8b8 <__vector_16+0x12>
      ba:	99 bd       	out	0x29, r25	; 41
      bc:	bd 99       	sbic	0x17, 5	; 23
      be:	c3 ff       	sbrs	r28, 3
      c0:	0f 07       	cpc	r16, r31
      c2:	0f 7d       	andi	r16, 0xDF	; 223
      c4:	cc cc       	rjmp	.-1640   	; 0xfffffa5e <__eeprom_end+0xff7efa5e>
      c6:	cc 78       	andi	r28, 0x8C	; 140
      c8:	3c 66       	ori	r19, 0x6C	; 108
      ca:	66 66       	ori	r22, 0x66	; 102
      cc:	3c 18       	sub	r3, r12
      ce:	7e 18       	sub	r7, r14
      d0:	08 0c       	add	r0, r8
      d2:	0e 0a       	sbc	r0, r30
      d4:	0a 38       	cpi	r16, 0x8A	; 138
      d6:	78 30       	cpi	r23, 0x08	; 8
      d8:	00 3e       	cpi	r16, 0xE0	; 224
      da:	22 22       	and	r2, r18
      dc:	26 6e       	ori	r18, 0xE6	; 230
      de:	e4 40       	sbci	r30, 0x04	; 4
      e0:	18 db       	rcall	.-2512   	; 0xfffff712 <__eeprom_end+0xff7ef712>
      e2:	3c e7       	ldi	r19, 0x7C	; 124
      e4:	e7 3c       	cpi	r30, 0xC7	; 199
      e6:	db 18       	sub	r13, r11
      e8:	20 30       	cpi	r18, 0x00	; 0
      ea:	38 3c       	cpi	r19, 0xC8	; 200
      ec:	38 30       	cpi	r19, 0x08	; 8
      ee:	20 00       	.word	0x0020	; ????
      f0:	04 0c       	add	r0, r4
      f2:	1c 3c       	cpi	r17, 0xCC	; 204
      f4:	1c 0c       	add	r1, r12
      f6:	04 00       	.word	0x0004	; ????
      f8:	18 3c       	cpi	r17, 0xC8	; 200
      fa:	7e 18       	sub	r7, r14
      fc:	18 7e       	andi	r17, 0xE8	; 232
      fe:	3c 18       	sub	r3, r12
     100:	66 66       	ori	r22, 0x66	; 102
     102:	66 66       	ori	r22, 0x66	; 102
     104:	66 00       	.word	0x0066	; ????
     106:	66 00       	.word	0x0066	; ????
     108:	7f db       	rcall	.-2306   	; 0xfffff808 <__eeprom_end+0xff7ef808>
     10a:	db 7b       	andi	r29, 0xBB	; 187
     10c:	1b 1b       	sub	r17, r27
     10e:	1b 00       	.word	0x001b	; ????
     110:	3c 60       	ori	r19, 0x0C	; 12
     112:	3c 66       	ori	r19, 0x6C	; 108
     114:	3c 06       	cpc	r3, r28
     116:	3c 00       	.word	0x003c	; ????
     118:	00 00       	nop
     11a:	00 00       	nop
     11c:	7e 7e       	andi	r23, 0xEE	; 238
     11e:	00 00       	nop
     120:	18 3c       	cpi	r17, 0xC8	; 200
     122:	7e 18       	sub	r7, r14
     124:	7e 3c       	cpi	r23, 0xCE	; 206
     126:	18 ff       	.word	0xff18	; ????
     128:	18 3c       	cpi	r17, 0xC8	; 200
     12a:	7e 18       	sub	r7, r14
     12c:	18 18       	sub	r1, r8
     12e:	18 00       	.word	0x0018	; ????
     130:	18 18       	sub	r1, r8
     132:	18 18       	sub	r1, r8
     134:	7e 3c       	cpi	r23, 0xCE	; 206
     136:	18 00       	.word	0x0018	; ????
     138:	00 0c       	add	r0, r0
     13a:	06 7f       	andi	r16, 0xF6	; 246
     13c:	06 0c       	add	r0, r6
     13e:	00 00       	nop
     140:	00 18       	sub	r0, r0
     142:	30 7f       	andi	r19, 0xF0	; 240
     144:	30 18       	sub	r3, r0
     146:	00 00       	nop
     148:	00 00       	nop
     14a:	60 60       	ori	r22, 0x00	; 0
     14c:	60 7e       	andi	r22, 0xE0	; 224
     14e:	00 00       	nop
     150:	00 24       	eor	r0, r0
     152:	66 ff       	sbrs	r22, 6
     154:	66 24       	eor	r6, r6
     156:	00 00       	nop
     158:	00 08       	sbc	r0, r0
     15a:	1c 3e       	cpi	r17, 0xEC	; 236
     15c:	7f 00       	.word	0x007f	; ????
     15e:	00 00       	nop
     160:	00 00       	nop
     162:	7f 3e       	cpi	r23, 0xEF	; 239
     164:	1c 08       	sbc	r1, r12
	...
     16e:	00 00       	nop
     170:	18 3c       	cpi	r17, 0xC8	; 200
     172:	3c 18       	sub	r3, r12
     174:	18 00       	.word	0x0018	; ????
     176:	18 00       	.word	0x0018	; ????
     178:	36 36       	cpi	r19, 0x66	; 102
     17a:	36 00       	.word	0x0036	; ????
     17c:	00 00       	nop
     17e:	00 00       	nop
     180:	36 36       	cpi	r19, 0x66	; 102
     182:	7f 36       	cpi	r23, 0x6F	; 111
     184:	7f 36       	cpi	r23, 0x6F	; 111
     186:	36 00       	.word	0x0036	; ????
     188:	18 3e       	cpi	r17, 0xE8	; 232
     18a:	60 3c       	cpi	r22, 0xC0	; 192
     18c:	06 7c       	andi	r16, 0xC6	; 198
     18e:	18 00       	.word	0x0018	; ????
     190:	60 66       	ori	r22, 0x60	; 96
     192:	0c 18       	sub	r0, r12
     194:	30 66       	ori	r19, 0x60	; 96
     196:	06 00       	.word	0x0006	; ????
     198:	38 66       	ori	r19, 0x68	; 104
     19a:	66 3f       	cpi	r22, 0xF6	; 246
     19c:	66 66       	ori	r22, 0x66	; 102
     19e:	3b 00       	.word	0x003b	; ????
     1a0:	1c 18       	sub	r1, r12
     1a2:	30 00       	.word	0x0030	; ????
     1a4:	00 00       	nop
     1a6:	00 00       	nop
     1a8:	0c 18       	sub	r0, r12
     1aa:	30 30       	cpi	r19, 0x00	; 0
     1ac:	30 18       	sub	r3, r0
     1ae:	0c 00       	.word	0x000c	; ????
     1b0:	30 18       	sub	r3, r0
     1b2:	0c 0c       	add	r0, r12
     1b4:	0c 18       	sub	r0, r12
     1b6:	30 00       	.word	0x0030	; ????
     1b8:	00 66       	ori	r16, 0x60	; 96
     1ba:	3c ff       	.word	0xff3c	; ????
     1bc:	3c 66       	ori	r19, 0x6C	; 108
     1be:	00 00       	nop
     1c0:	00 18       	sub	r0, r0
     1c2:	18 7e       	andi	r17, 0xE8	; 232
     1c4:	18 18       	sub	r1, r8
     1c6:	00 00       	nop
     1c8:	00 00       	nop
     1ca:	00 00       	nop
     1cc:	00 18       	sub	r0, r0
     1ce:	18 30       	cpi	r17, 0x08	; 8
     1d0:	00 00       	nop
     1d2:	00 7e       	andi	r16, 0xE0	; 224
	...
     1dc:	00 18       	sub	r0, r0
     1de:	18 00       	.word	0x0018	; ????
     1e0:	00 06       	cpc	r0, r16
     1e2:	0c 18       	sub	r0, r12
     1e4:	30 60       	ori	r19, 0x00	; 0
     1e6:	00 00       	nop
     1e8:	3c 66       	ori	r19, 0x6C	; 108
     1ea:	6e 7e       	andi	r22, 0xEE	; 238
     1ec:	76 66       	ori	r23, 0x66	; 102
     1ee:	3c 00       	.word	0x003c	; ????
     1f0:	18 38       	cpi	r17, 0x88	; 136
     1f2:	18 18       	sub	r1, r8
     1f4:	18 18       	sub	r1, r8
     1f6:	7e 00       	.word	0x007e	; ????
     1f8:	3c 66       	ori	r19, 0x6C	; 108
     1fa:	06 1c       	adc	r0, r6
     1fc:	30 66       	ori	r19, 0x60	; 96
     1fe:	7e 00       	.word	0x007e	; ????
     200:	3c 66       	ori	r19, 0x6C	; 108
     202:	06 1c       	adc	r0, r6
     204:	06 66       	ori	r16, 0x66	; 102
     206:	3c 00       	.word	0x003c	; ????
     208:	0e 1e       	adc	r0, r30
     20a:	36 66       	ori	r19, 0x66	; 102
     20c:	7f 06       	cpc	r7, r31
     20e:	0f 00       	.word	0x000f	; ????
     210:	7e 60       	ori	r23, 0x0E	; 14
     212:	60 7c       	andi	r22, 0xC0	; 192
     214:	06 66       	ori	r16, 0x66	; 102
     216:	3c 00       	.word	0x003c	; ????
     218:	1c 30       	cpi	r17, 0x0C	; 12
     21a:	60 7c       	andi	r22, 0xC0	; 192
     21c:	66 66       	ori	r22, 0x66	; 102
     21e:	3c 00       	.word	0x003c	; ????
     220:	7e 66       	ori	r23, 0x6E	; 110
     222:	06 0c       	add	r0, r6
     224:	18 18       	sub	r1, r8
     226:	18 00       	.word	0x0018	; ????
     228:	3c 66       	ori	r19, 0x6C	; 108
     22a:	66 3c       	cpi	r22, 0xC6	; 198
     22c:	66 66       	ori	r22, 0x66	; 102
     22e:	3c 00       	.word	0x003c	; ????
     230:	3c 66       	ori	r19, 0x6C	; 108
     232:	66 3e       	cpi	r22, 0xE6	; 230
     234:	06 0c       	add	r0, r6
     236:	38 00       	.word	0x0038	; ????
     238:	00 00       	nop
     23a:	18 18       	sub	r1, r8
     23c:	00 18       	sub	r0, r0
     23e:	18 00       	.word	0x0018	; ????
     240:	00 00       	nop
     242:	18 18       	sub	r1, r8
     244:	00 18       	sub	r0, r0
     246:	18 30       	cpi	r17, 0x08	; 8
     248:	0c 18       	sub	r0, r12
     24a:	30 60       	ori	r19, 0x00	; 0
     24c:	30 18       	sub	r3, r0
     24e:	0c 00       	.word	0x000c	; ????
     250:	00 00       	nop
     252:	7e 00       	.word	0x007e	; ????
     254:	7e 00       	.word	0x007e	; ????
     256:	00 00       	nop
     258:	30 18       	sub	r3, r0
     25a:	0c 06       	cpc	r0, r28
     25c:	0c 18       	sub	r0, r12
     25e:	30 00       	.word	0x0030	; ????
     260:	3c 66       	ori	r19, 0x6C	; 108
     262:	06 0c       	add	r0, r6
     264:	18 00       	.word	0x0018	; ????
     266:	18 00       	.word	0x0018	; ????
     268:	3c 66       	ori	r19, 0x6C	; 108
     26a:	6e 6a       	ori	r22, 0xAE	; 174
     26c:	6e 60       	ori	r22, 0x0E	; 14
     26e:	3c 00       	.word	0x003c	; ????
     270:	3c 66       	ori	r19, 0x6C	; 108
     272:	66 7e       	andi	r22, 0xE6	; 230
     274:	66 66       	ori	r22, 0x66	; 102
     276:	66 00       	.word	0x0066	; ????
     278:	7c 66       	ori	r23, 0x6C	; 108
     27a:	66 7c       	andi	r22, 0xC6	; 198
     27c:	66 66       	ori	r22, 0x66	; 102
     27e:	7c 00       	.word	0x007c	; ????
     280:	3c 66       	ori	r19, 0x6C	; 108
     282:	60 60       	ori	r22, 0x00	; 0
     284:	60 66       	ori	r22, 0x60	; 96
     286:	3c 00       	.word	0x003c	; ????
     288:	78 6c       	ori	r23, 0xC8	; 200
     28a:	66 66       	ori	r22, 0x66	; 102
     28c:	66 6c       	ori	r22, 0xC6	; 198
     28e:	78 00       	.word	0x0078	; ????
     290:	7e 60       	ori	r23, 0x0E	; 14
     292:	60 7c       	andi	r22, 0xC0	; 192
     294:	60 60       	ori	r22, 0x00	; 0
     296:	7e 00       	.word	0x007e	; ????
     298:	7e 60       	ori	r23, 0x0E	; 14
     29a:	60 7c       	andi	r22, 0xC0	; 192
     29c:	60 60       	ori	r22, 0x00	; 0
     29e:	60 00       	.word	0x0060	; ????
     2a0:	3c 66       	ori	r19, 0x6C	; 108
     2a2:	60 6e       	ori	r22, 0xE0	; 224
     2a4:	66 66       	ori	r22, 0x66	; 102
     2a6:	3c 00       	.word	0x003c	; ????
     2a8:	66 66       	ori	r22, 0x66	; 102
     2aa:	66 7e       	andi	r22, 0xE6	; 230
     2ac:	66 66       	ori	r22, 0x66	; 102
     2ae:	66 00       	.word	0x0066	; ????
     2b0:	3c 18       	sub	r3, r12
     2b2:	18 18       	sub	r1, r8
     2b4:	18 18       	sub	r1, r8
     2b6:	3c 00       	.word	0x003c	; ????
     2b8:	0e 06       	cpc	r0, r30
     2ba:	06 06       	cpc	r0, r22
     2bc:	66 66       	ori	r22, 0x66	; 102
     2be:	3c 00       	.word	0x003c	; ????
     2c0:	66 66       	ori	r22, 0x66	; 102
     2c2:	6c 78       	andi	r22, 0x8C	; 140
     2c4:	6c 66       	ori	r22, 0x6C	; 108
     2c6:	66 00       	.word	0x0066	; ????
     2c8:	60 60       	ori	r22, 0x00	; 0
     2ca:	60 60       	ori	r22, 0x00	; 0
     2cc:	60 60       	ori	r22, 0x00	; 0
     2ce:	7e 00       	.word	0x007e	; ????
     2d0:	63 77       	andi	r22, 0x73	; 115
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	6b 63       	ori	r22, 0x3B	; 59
     2d6:	63 00       	.word	0x0063	; ????
     2d8:	66 76       	andi	r22, 0x66	; 102
     2da:	7e 7e       	andi	r23, 0xEE	; 238
     2dc:	6e 66       	ori	r22, 0x6E	; 110
     2de:	66 00       	.word	0x0066	; ????
     2e0:	3c 66       	ori	r19, 0x6C	; 108
     2e2:	66 66       	ori	r22, 0x66	; 102
     2e4:	66 66       	ori	r22, 0x66	; 102
     2e6:	3c 00       	.word	0x003c	; ????
     2e8:	7c 66       	ori	r23, 0x6C	; 108
     2ea:	66 7c       	andi	r22, 0xC6	; 198
     2ec:	60 60       	ori	r22, 0x00	; 0
     2ee:	60 00       	.word	0x0060	; ????
     2f0:	3c 66       	ori	r19, 0x6C	; 108
     2f2:	66 66       	ori	r22, 0x66	; 102
     2f4:	6e 3c       	cpi	r22, 0xCE	; 206
     2f6:	0e 00       	.word	0x000e	; ????
     2f8:	7c 66       	ori	r23, 0x6C	; 108
     2fa:	66 7c       	andi	r22, 0xC6	; 198
     2fc:	6c 66       	ori	r22, 0x6C	; 108
     2fe:	66 00       	.word	0x0066	; ????
     300:	3c 66       	ori	r19, 0x6C	; 108
     302:	60 3c       	cpi	r22, 0xC0	; 192
     304:	06 66       	ori	r16, 0x66	; 102
     306:	3c 00       	.word	0x003c	; ????
     308:	7e 18       	sub	r7, r14
     30a:	18 18       	sub	r1, r8
     30c:	18 18       	sub	r1, r8
     30e:	18 00       	.word	0x0018	; ????
     310:	66 66       	ori	r22, 0x66	; 102
     312:	66 66       	ori	r22, 0x66	; 102
     314:	66 66       	ori	r22, 0x66	; 102
     316:	3c 00       	.word	0x003c	; ????
     318:	66 66       	ori	r22, 0x66	; 102
     31a:	66 66       	ori	r22, 0x66	; 102
     31c:	66 3c       	cpi	r22, 0xC6	; 198
     31e:	18 00       	.word	0x0018	; ????
     320:	63 63       	ori	r22, 0x33	; 51
     322:	63 6b       	ori	r22, 0xB3	; 179
     324:	7f 77       	andi	r23, 0x7F	; 127
     326:	63 00       	.word	0x0063	; ????
     328:	66 66       	ori	r22, 0x66	; 102
     32a:	3c 18       	sub	r3, r12
     32c:	3c 66       	ori	r19, 0x6C	; 108
     32e:	66 00       	.word	0x0066	; ????
     330:	66 66       	ori	r22, 0x66	; 102
     332:	66 3c       	cpi	r22, 0xC6	; 198
     334:	18 18       	sub	r1, r8
     336:	18 00       	.word	0x0018	; ????
     338:	7e 06       	cpc	r7, r30
     33a:	0c 18       	sub	r0, r12
     33c:	30 60       	ori	r19, 0x00	; 0
     33e:	7e 00       	.word	0x007e	; ????
     340:	3e 30       	cpi	r19, 0x0E	; 14
     342:	30 30       	cpi	r19, 0x00	; 0
     344:	30 30       	cpi	r19, 0x00	; 0
     346:	3e 00       	.word	0x003e	; ????
     348:	00 60       	ori	r16, 0x00	; 0
     34a:	30 18       	sub	r3, r0
     34c:	0c 06       	cpc	r0, r28
     34e:	00 00       	nop
     350:	3e 06       	cpc	r3, r30
     352:	06 06       	cpc	r0, r22
     354:	06 06       	cpc	r0, r22
     356:	3e 00       	.word	0x003e	; ????
     358:	08 1c       	adc	r0, r8
     35a:	36 63       	ori	r19, 0x36	; 54
	...
     364:	00 00       	nop
     366:	ff 00       	.word	0x00ff	; ????
     368:	38 18       	sub	r3, r8
     36a:	0c 00       	.word	0x000c	; ????
     36c:	00 00       	nop
     36e:	00 00       	nop
     370:	00 00       	nop
     372:	3c 06       	cpc	r3, r28
     374:	3e 66       	ori	r19, 0x6E	; 110
     376:	3e 00       	.word	0x003e	; ????
     378:	60 60       	ori	r22, 0x00	; 0
     37a:	7c 66       	ori	r23, 0x6C	; 108
     37c:	66 66       	ori	r22, 0x66	; 102
     37e:	7c 00       	.word	0x007c	; ????
     380:	00 00       	nop
     382:	3c 66       	ori	r19, 0x6C	; 108
     384:	60 66       	ori	r22, 0x60	; 96
     386:	3c 00       	.word	0x003c	; ????
     388:	06 06       	cpc	r0, r22
     38a:	3e 66       	ori	r19, 0x6E	; 110
     38c:	66 66       	ori	r22, 0x66	; 102
     38e:	3e 00       	.word	0x003e	; ????
     390:	00 00       	nop
     392:	3c 66       	ori	r19, 0x6C	; 108
     394:	7e 60       	ori	r23, 0x0E	; 14
     396:	3c 00       	.word	0x003c	; ????
     398:	1e 30       	cpi	r17, 0x0E	; 14
     39a:	30 7c       	andi	r19, 0xC0	; 192
     39c:	30 30       	cpi	r19, 0x00	; 0
     39e:	30 00       	.word	0x0030	; ????
     3a0:	00 00       	nop
     3a2:	3e 66       	ori	r19, 0x6E	; 110
     3a4:	66 3e       	cpi	r22, 0xE6	; 230
     3a6:	06 3c       	cpi	r16, 0xC6	; 198
     3a8:	60 60       	ori	r22, 0x00	; 0
     3aa:	7c 66       	ori	r23, 0x6C	; 108
     3ac:	66 66       	ori	r22, 0x66	; 102
     3ae:	66 00       	.word	0x0066	; ????
     3b0:	18 00       	.word	0x0018	; ????
     3b2:	38 18       	sub	r3, r8
     3b4:	18 18       	sub	r1, r8
     3b6:	3c 00       	.word	0x003c	; ????
     3b8:	18 00       	.word	0x0018	; ????
     3ba:	38 18       	sub	r3, r8
     3bc:	18 18       	sub	r1, r8
     3be:	18 30       	cpi	r17, 0x08	; 8
     3c0:	60 60       	ori	r22, 0x00	; 0
     3c2:	66 6c       	ori	r22, 0xC6	; 198
     3c4:	78 6c       	ori	r23, 0xC8	; 200
     3c6:	66 00       	.word	0x0066	; ????
     3c8:	38 18       	sub	r3, r8
     3ca:	18 18       	sub	r1, r8
     3cc:	18 18       	sub	r1, r8
     3ce:	0c 00       	.word	0x000c	; ????
     3d0:	00 00       	nop
     3d2:	36 7f       	andi	r19, 0xF6	; 246
     3d4:	6b 6b       	ori	r22, 0xBB	; 187
     3d6:	63 00       	.word	0x0063	; ????
     3d8:	00 00       	nop
     3da:	7c 66       	ori	r23, 0x6C	; 108
     3dc:	66 66       	ori	r22, 0x66	; 102
     3de:	66 00       	.word	0x0066	; ????
     3e0:	00 00       	nop
     3e2:	3c 66       	ori	r19, 0x6C	; 108
     3e4:	66 66       	ori	r22, 0x66	; 102
     3e6:	3c 00       	.word	0x003c	; ????
     3e8:	00 00       	nop
     3ea:	7c 66       	ori	r23, 0x6C	; 108
     3ec:	66 7c       	andi	r22, 0xC6	; 198
     3ee:	60 60       	ori	r22, 0x00	; 0
     3f0:	00 00       	nop
     3f2:	3e 66       	ori	r19, 0x6E	; 110
     3f4:	66 3e       	cpi	r22, 0xE6	; 230
     3f6:	06 07       	cpc	r16, r22
     3f8:	00 00       	nop
     3fa:	7c 66       	ori	r23, 0x6C	; 108
     3fc:	60 60       	ori	r22, 0x00	; 0
     3fe:	60 00       	.word	0x0060	; ????
     400:	00 00       	nop
     402:	3e 60       	ori	r19, 0x0E	; 14
     404:	3c 06       	cpc	r3, r28
     406:	7c 00       	.word	0x007c	; ????
     408:	30 30       	cpi	r19, 0x00	; 0
     40a:	7c 30       	cpi	r23, 0x0C	; 12
     40c:	30 30       	cpi	r19, 0x00	; 0
     40e:	1c 00       	.word	0x001c	; ????
     410:	00 00       	nop
     412:	66 66       	ori	r22, 0x66	; 102
     414:	66 66       	ori	r22, 0x66	; 102
     416:	3e 00       	.word	0x003e	; ????
     418:	00 00       	nop
     41a:	66 66       	ori	r22, 0x66	; 102
     41c:	66 3c       	cpi	r22, 0xC6	; 198
     41e:	18 00       	.word	0x0018	; ????
     420:	00 00       	nop
     422:	63 6b       	ori	r22, 0xB3	; 179
     424:	6b 7f       	andi	r22, 0xFB	; 251
     426:	36 00       	.word	0x0036	; ????
     428:	00 00       	nop
     42a:	66 3c       	cpi	r22, 0xC6	; 198
     42c:	18 3c       	cpi	r17, 0xC8	; 200
     42e:	66 00       	.word	0x0066	; ????
     430:	00 00       	nop
     432:	66 66       	ori	r22, 0x66	; 102
     434:	66 3e       	cpi	r22, 0xE6	; 230
     436:	06 3c       	cpi	r16, 0xC6	; 198
     438:	00 00       	nop
     43a:	7e 0c       	add	r7, r14
     43c:	18 30       	cpi	r17, 0x08	; 8
     43e:	7e 00       	.word	0x007e	; ????
     440:	1c 30       	cpi	r17, 0x0C	; 12
     442:	30 60       	ori	r19, 0x00	; 0
     444:	30 30       	cpi	r19, 0x00	; 0
     446:	1c 00       	.word	0x001c	; ????
     448:	18 18       	sub	r1, r8
     44a:	18 00       	.word	0x0018	; ????
     44c:	18 18       	sub	r1, r8
     44e:	18 00       	.word	0x0018	; ????
     450:	38 0c       	add	r3, r8
     452:	0c 06       	cpc	r0, r28
     454:	0c 0c       	add	r0, r12
     456:	38 00       	.word	0x0038	; ????
     458:	00 00       	nop
     45a:	3b 6e       	ori	r19, 0xEB	; 235
     45c:	00 00       	nop
     45e:	00 00       	nop
     460:	00 08       	sbc	r0, r0
     462:	1c 36       	cpi	r17, 0x6C	; 108
     464:	63 63       	ori	r22, 0x33	; 51
     466:	7f 00       	.word	0x007f	; ????
     468:	3c 66       	ori	r19, 0x6C	; 108
     46a:	60 60       	ori	r22, 0x00	; 0
     46c:	60 66       	ori	r22, 0x60	; 96
     46e:	3c 60       	ori	r19, 0x0C	; 12
     470:	66 00       	.word	0x0066	; ????
     472:	66 66       	ori	r22, 0x66	; 102
     474:	66 66       	ori	r22, 0x66	; 102
     476:	3e 00       	.word	0x003e	; ????
     478:	0c 18       	sub	r0, r12
     47a:	3c 66       	ori	r19, 0x6C	; 108
     47c:	7e 60       	ori	r23, 0x0E	; 14
     47e:	3c 00       	.word	0x003c	; ????
     480:	7e c3       	rjmp	.+1788   	; 0xb7e <_Z4loopv+0x1de>
     482:	3c 06       	cpc	r3, r28
     484:	3e 66       	ori	r19, 0x6E	; 110
     486:	3e 00       	.word	0x003e	; ????
     488:	66 00       	.word	0x0066	; ????
     48a:	3c 06       	cpc	r3, r28
     48c:	3e 66       	ori	r19, 0x6E	; 110
     48e:	3e 00       	.word	0x003e	; ????
     490:	30 18       	sub	r3, r0
     492:	3c 06       	cpc	r3, r28
     494:	3e 66       	ori	r19, 0x6E	; 110
     496:	3e 00       	.word	0x003e	; ????
     498:	18 24       	eor	r1, r8
     49a:	3c 06       	cpc	r3, r28
     49c:	3e 66       	ori	r19, 0x6E	; 110
     49e:	3e 00       	.word	0x003e	; ????
     4a0:	00 00       	nop
     4a2:	3c 66       	ori	r19, 0x6C	; 108
     4a4:	60 66       	ori	r22, 0x60	; 96
     4a6:	3c 60       	ori	r19, 0x0C	; 12
     4a8:	7e c3       	rjmp	.+1788   	; 0xba6 <_Z4loopv+0x206>
     4aa:	3c 66       	ori	r19, 0x6C	; 108
     4ac:	7e 60       	ori	r23, 0x0E	; 14
     4ae:	3c 00       	.word	0x003c	; ????
     4b0:	66 00       	.word	0x0066	; ????
     4b2:	3c 66       	ori	r19, 0x6C	; 108
     4b4:	7e 60       	ori	r23, 0x0E	; 14
     4b6:	3c 00       	.word	0x003c	; ????
     4b8:	30 18       	sub	r3, r0
     4ba:	3c 66       	ori	r19, 0x6C	; 108
     4bc:	7e 60       	ori	r23, 0x0E	; 14
     4be:	3c 00       	.word	0x003c	; ????
     4c0:	66 00       	.word	0x0066	; ????
     4c2:	38 18       	sub	r3, r8
     4c4:	18 18       	sub	r1, r8
     4c6:	3c 00       	.word	0x003c	; ????
     4c8:	3c 66       	ori	r19, 0x6C	; 108
     4ca:	00 38       	cpi	r16, 0x80	; 128
     4cc:	18 18       	sub	r1, r8
     4ce:	3c 00       	.word	0x003c	; ????
     4d0:	30 18       	sub	r3, r0
     4d2:	00 38       	cpi	r16, 0x80	; 128
     4d4:	18 18       	sub	r1, r8
     4d6:	3c 00       	.word	0x003c	; ????
     4d8:	66 00       	.word	0x0066	; ????
     4da:	3c 66       	ori	r19, 0x6C	; 108
     4dc:	7e 66       	ori	r23, 0x6E	; 110
     4de:	66 00       	.word	0x0066	; ????
     4e0:	18 24       	eor	r1, r8
     4e2:	3c 66       	ori	r19, 0x6C	; 108
     4e4:	7e 66       	ori	r23, 0x6E	; 110
     4e6:	66 00       	.word	0x0066	; ????
     4e8:	0c 18       	sub	r0, r12
     4ea:	7e 60       	ori	r23, 0x0E	; 14
     4ec:	7c 60       	ori	r23, 0x0C	; 12
     4ee:	7e 00       	.word	0x007e	; ????
     4f0:	00 00       	nop
     4f2:	7e 1b       	sub	r23, r30
     4f4:	7f d8       	rcall	.-3842   	; 0xfffff5f4 <__eeprom_end+0xff7ef5f4>
     4f6:	7e 00       	.word	0x007e	; ????
     4f8:	1f 3c       	cpi	r17, 0xCF	; 207
     4fa:	6c 7f       	andi	r22, 0xFC	; 252
     4fc:	6c 6c       	ori	r22, 0xCC	; 204
     4fe:	6f 00       	.word	0x006f	; ????
     500:	3c 66       	ori	r19, 0x6C	; 108
     502:	00 3c       	cpi	r16, 0xC0	; 192
     504:	66 66       	ori	r22, 0x66	; 102
     506:	3c 00       	.word	0x003c	; ????
     508:	00 66       	ori	r16, 0x60	; 96
     50a:	00 3c       	cpi	r16, 0xC0	; 192
     50c:	66 66       	ori	r22, 0x66	; 102
     50e:	3c 00       	.word	0x003c	; ????
     510:	30 18       	sub	r3, r0
     512:	00 3c       	cpi	r16, 0xC0	; 192
     514:	66 66       	ori	r22, 0x66	; 102
     516:	3c 00       	.word	0x003c	; ????
     518:	3c 66       	ori	r19, 0x6C	; 108
     51a:	00 66       	ori	r16, 0x60	; 96
     51c:	66 66       	ori	r22, 0x66	; 102
     51e:	3e 00       	.word	0x003e	; ????
     520:	30 18       	sub	r3, r0
     522:	00 66       	ori	r16, 0x60	; 96
     524:	66 66       	ori	r22, 0x66	; 102
     526:	3e 00       	.word	0x003e	; ????
     528:	66 00       	.word	0x0066	; ????
     52a:	66 66       	ori	r22, 0x66	; 102
     52c:	66 3e       	cpi	r22, 0xE6	; 230
     52e:	06 3c       	cpi	r16, 0xC6	; 198
     530:	66 3c       	cpi	r22, 0xC6	; 198
     532:	66 66       	ori	r22, 0x66	; 102
     534:	66 66       	ori	r22, 0x66	; 102
     536:	3c 00       	.word	0x003c	; ????
     538:	66 00       	.word	0x0066	; ????
     53a:	66 66       	ori	r22, 0x66	; 102
     53c:	66 66       	ori	r22, 0x66	; 102
     53e:	3c 00       	.word	0x003c	; ????
     540:	00 0c       	add	r0, r0
     542:	1e 30       	cpi	r17, 0x0E	; 14
     544:	30 1e       	adc	r3, r16
     546:	0c 00       	.word	0x000c	; ????
     548:	1c 36       	cpi	r17, 0x6C	; 108
     54a:	30 7c       	andi	r19, 0xC0	; 192
     54c:	30 60       	ori	r19, 0x00	; 0
     54e:	7e 00       	.word	0x007e	; ????
     550:	66 66       	ori	r22, 0x66	; 102
     552:	3c 7e       	andi	r19, 0xEC	; 236
     554:	18 7e       	andi	r17, 0xE8	; 232
     556:	18 00       	.word	0x0018	; ????
     558:	7c 66       	ori	r23, 0x6C	; 108
     55a:	6e 7c       	andi	r22, 0xCE	; 206
     55c:	6e 6c       	ori	r22, 0xCE	; 206
     55e:	66 00       	.word	0x0066	; ????
     560:	0e 18       	sub	r0, r14
     562:	18 3c       	cpi	r17, 0xC8	; 200
     564:	18 18       	sub	r1, r8
     566:	70 00       	.word	0x0070	; ????
     568:	0c 18       	sub	r0, r12
     56a:	3c 06       	cpc	r3, r28
     56c:	3e 66       	ori	r19, 0x6E	; 110
     56e:	3e 00       	.word	0x003e	; ????
     570:	0c 18       	sub	r0, r12
     572:	00 38       	cpi	r16, 0x80	; 128
     574:	18 18       	sub	r1, r8
     576:	3c 00       	.word	0x003c	; ????
     578:	0c 18       	sub	r0, r12
     57a:	00 3c       	cpi	r16, 0xC0	; 192
     57c:	66 66       	ori	r22, 0x66	; 102
     57e:	3c 00       	.word	0x003c	; ????
     580:	0c 18       	sub	r0, r12
     582:	00 66       	ori	r16, 0x60	; 96
     584:	66 66       	ori	r22, 0x66	; 102
     586:	3e 00       	.word	0x003e	; ????
     588:	36 6c       	ori	r19, 0xC6	; 198
     58a:	00 7c       	andi	r16, 0xC0	; 192
     58c:	66 66       	ori	r22, 0x66	; 102
     58e:	66 00       	.word	0x0066	; ????
     590:	36 6c       	ori	r19, 0xC6	; 198
     592:	00 66       	ori	r16, 0x60	; 96
     594:	76 6e       	ori	r23, 0xE6	; 230
     596:	66 00       	.word	0x0066	; ????
     598:	38 0c       	add	r3, r8
     59a:	3c 6c       	ori	r19, 0xCC	; 204
     59c:	3c 00       	.word	0x003c	; ????
     59e:	00 00       	nop
     5a0:	38 6c       	ori	r19, 0xC8	; 200
     5a2:	6c 6c       	ori	r22, 0xCC	; 204
     5a4:	38 00       	.word	0x0038	; ????
     5a6:	00 00       	nop
     5a8:	18 00       	.word	0x0018	; ????
     5aa:	18 30       	cpi	r17, 0x08	; 8
     5ac:	60 66       	ori	r22, 0x60	; 96
     5ae:	3c 00       	.word	0x003c	; ????
     5b0:	00 00       	nop
     5b2:	00 7e       	andi	r16, 0xE0	; 224
     5b4:	60 60       	ori	r22, 0x00	; 0
     5b6:	00 00       	nop
     5b8:	00 00       	nop
     5ba:	00 7e       	andi	r16, 0xE0	; 224
     5bc:	06 06       	cpc	r0, r22
     5be:	00 00       	nop
     5c0:	40 42       	sbci	r20, 0x20	; 32
     5c2:	44 48       	sbci	r20, 0x84	; 132
     5c4:	16 23       	and	r17, r22
     5c6:	46 07       	cpc	r20, r22
     5c8:	40 42       	sbci	r20, 0x20	; 32
     5ca:	44 48       	sbci	r20, 0x84	; 132
     5cc:	15 25       	eor	r17, r5
     5ce:	47 01       	movw	r8, r14
     5d0:	18 00       	.word	0x0018	; ????
     5d2:	18 18       	sub	r1, r8
     5d4:	3c 3c       	cpi	r19, 0xCC	; 204
     5d6:	18 00       	.word	0x0018	; ????
     5d8:	00 36       	cpi	r16, 0x60	; 96
     5da:	6c d8       	rcall	.-3880   	; 0xfffff6b4 <__eeprom_end+0xff7ef6b4>
     5dc:	6c 36       	cpi	r22, 0x6C	; 108
     5de:	00 00       	nop
     5e0:	00 6c       	ori	r16, 0xC0	; 192
     5e2:	36 1b       	sub	r19, r22
     5e4:	36 6c       	ori	r19, 0xC6	; 198
     5e6:	00 00       	nop
     5e8:	22 88       	ldd	r2, Z+18	; 0x12
     5ea:	22 88       	ldd	r2, Z+18	; 0x12
     5ec:	22 88       	ldd	r2, Z+18	; 0x12
     5ee:	22 88       	ldd	r2, Z+18	; 0x12
     5f0:	55 aa       	std	Z+53, r5	; 0x35
     5f2:	55 aa       	std	Z+53, r5	; 0x35
     5f4:	55 aa       	std	Z+53, r5	; 0x35
     5f6:	55 aa       	std	Z+53, r5	; 0x35
     5f8:	bb ee       	ldi	r27, 0xEB	; 235
     5fa:	bb ee       	ldi	r27, 0xEB	; 235
     5fc:	bb ee       	ldi	r27, 0xEB	; 235
     5fe:	bb ee       	ldi	r27, 0xEB	; 235
     600:	18 18       	sub	r1, r8
     602:	18 18       	sub	r1, r8
     604:	18 18       	sub	r1, r8
     606:	18 18       	sub	r1, r8
     608:	18 18       	sub	r1, r8
     60a:	18 f8       	.word	0xf818	; ????
     60c:	f8 18       	sub	r15, r8
     60e:	18 18       	sub	r1, r8
     610:	18 f8       	.word	0xf818	; ????
     612:	f8 18       	sub	r15, r8
     614:	18 f8       	.word	0xf818	; ????
     616:	f8 18       	sub	r15, r8
     618:	66 66       	ori	r22, 0x66	; 102
     61a:	66 e6       	ldi	r22, 0x66	; 102
     61c:	e6 66       	ori	r30, 0x66	; 102
     61e:	66 66       	ori	r22, 0x66	; 102
     620:	00 00       	nop
     622:	00 fe       	sbrs	r0, 0
     624:	fe 66       	ori	r31, 0x6E	; 110
     626:	66 66       	ori	r22, 0x66	; 102
     628:	00 f8       	bld	r0, 0
     62a:	f8 18       	sub	r15, r8
     62c:	18 f8       	.word	0xf818	; ????
     62e:	f8 18       	sub	r15, r8
     630:	66 e6       	ldi	r22, 0x66	; 102
     632:	e6 06       	cpc	r14, r22
     634:	06 e6       	ldi	r16, 0x66	; 102
     636:	e6 66       	ori	r30, 0x66	; 102
     638:	66 66       	ori	r22, 0x66	; 102
     63a:	66 66       	ori	r22, 0x66	; 102
     63c:	66 66       	ori	r22, 0x66	; 102
     63e:	66 66       	ori	r22, 0x66	; 102
     640:	00 fe       	sbrs	r0, 0
     642:	fe 06       	cpc	r15, r30
     644:	06 e6       	ldi	r16, 0x66	; 102
     646:	e6 66       	ori	r30, 0x66	; 102
     648:	66 e6       	ldi	r22, 0x66	; 102
     64a:	e6 06       	cpc	r14, r22
     64c:	06 fe       	sbrs	r0, 6
     64e:	fe 00       	.word	0x00fe	; ????
     650:	66 66       	ori	r22, 0x66	; 102
     652:	66 fe       	sbrs	r6, 6
     654:	fe 00       	.word	0x00fe	; ????
     656:	00 00       	nop
     658:	10 f8       	bld	r1, 0
     65a:	f8 18       	sub	r15, r8
     65c:	18 f8       	.word	0xf818	; ????
     65e:	f8 00       	.word	0x00f8	; ????
     660:	00 00       	nop
     662:	00 f8       	bld	r0, 0
     664:	f8 18       	sub	r15, r8
     666:	18 18       	sub	r1, r8
     668:	18 18       	sub	r1, r8
     66a:	18 1f       	adc	r17, r24
     66c:	1f 00       	.word	0x001f	; ????
     66e:	00 00       	nop
     670:	18 18       	sub	r1, r8
     672:	18 ff       	.word	0xff18	; ????
     674:	ff 00       	.word	0x00ff	; ????
     676:	00 00       	nop
     678:	00 00       	nop
     67a:	00 ff       	sbrs	r16, 0
     67c:	ff 18       	sub	r15, r15
     67e:	18 18       	sub	r1, r8
     680:	18 18       	sub	r1, r8
     682:	18 1f       	adc	r17, r24
     684:	1f 18       	sub	r1, r15
     686:	18 18       	sub	r1, r8
     688:	00 00       	nop
     68a:	00 ff       	sbrs	r16, 0
     68c:	ff 00       	.word	0x00ff	; ????
     68e:	00 00       	nop
     690:	18 18       	sub	r1, r8
     692:	18 ff       	.word	0xff18	; ????
     694:	ff 18       	sub	r15, r15
     696:	18 18       	sub	r1, r8
     698:	18 1f       	adc	r17, r24
     69a:	1f 18       	sub	r1, r15
     69c:	18 1f       	adc	r17, r24
     69e:	1f 18       	sub	r1, r15
     6a0:	66 66       	ori	r22, 0x66	; 102
     6a2:	66 67       	ori	r22, 0x76	; 118
     6a4:	67 66       	ori	r22, 0x67	; 103
     6a6:	66 66       	ori	r22, 0x66	; 102
     6a8:	66 67       	ori	r22, 0x76	; 118
     6aa:	67 60       	ori	r22, 0x07	; 7
     6ac:	60 7f       	andi	r22, 0xF0	; 240
     6ae:	7f 00       	.word	0x007f	; ????
     6b0:	00 7f       	andi	r16, 0xF0	; 240
     6b2:	7f 60       	ori	r23, 0x0F	; 15
     6b4:	60 67       	ori	r22, 0x70	; 112
     6b6:	67 66       	ori	r22, 0x67	; 103
     6b8:	66 e7       	ldi	r22, 0x76	; 118
     6ba:	e7 00       	.word	0x00e7	; ????
     6bc:	00 ff       	sbrs	r16, 0
     6be:	ff 00       	.word	0x00ff	; ????
     6c0:	00 ff       	sbrs	r16, 0
     6c2:	ff 00       	.word	0x00ff	; ????
     6c4:	00 e7       	ldi	r16, 0x70	; 112
     6c6:	e7 66       	ori	r30, 0x67	; 103
     6c8:	66 67       	ori	r22, 0x76	; 118
     6ca:	67 60       	ori	r22, 0x07	; 7
     6cc:	60 67       	ori	r22, 0x70	; 112
     6ce:	67 66       	ori	r22, 0x67	; 103
     6d0:	00 ff       	sbrs	r16, 0
     6d2:	ff 00       	.word	0x00ff	; ????
     6d4:	00 ff       	sbrs	r16, 0
     6d6:	ff 00       	.word	0x00ff	; ????
     6d8:	66 e7       	ldi	r22, 0x76	; 118
     6da:	e7 00       	.word	0x00e7	; ????
     6dc:	00 e7       	ldi	r16, 0x70	; 112
     6de:	e7 66       	ori	r30, 0x67	; 103
     6e0:	18 ff       	.word	0xff18	; ????
     6e2:	ff 00       	.word	0x00ff	; ????
     6e4:	00 ff       	sbrs	r16, 0
     6e6:	ff 00       	.word	0x00ff	; ????
     6e8:	66 66       	ori	r22, 0x66	; 102
     6ea:	66 ff       	sbrs	r22, 6
     6ec:	ff 00       	.word	0x00ff	; ????
     6ee:	00 00       	nop
     6f0:	00 ff       	sbrs	r16, 0
     6f2:	ff 00       	.word	0x00ff	; ????
     6f4:	00 ff       	sbrs	r16, 0
     6f6:	ff 18       	sub	r15, r15
     6f8:	00 00       	nop
     6fa:	00 ff       	sbrs	r16, 0
     6fc:	ff 66       	ori	r31, 0x6F	; 111
     6fe:	66 66       	ori	r22, 0x66	; 102
     700:	66 66       	ori	r22, 0x66	; 102
     702:	66 7f       	andi	r22, 0xF6	; 246
     704:	7f 00       	.word	0x007f	; ????
     706:	00 00       	nop
     708:	18 1f       	adc	r17, r24
     70a:	1f 18       	sub	r1, r15
     70c:	18 1f       	adc	r17, r24
     70e:	1f 00       	.word	0x001f	; ????
     710:	00 1f       	adc	r16, r16
     712:	1f 18       	sub	r1, r15
     714:	18 1f       	adc	r17, r24
     716:	1f 18       	sub	r1, r15
     718:	00 00       	nop
     71a:	00 7f       	andi	r16, 0xF0	; 240
     71c:	7f 66       	ori	r23, 0x6F	; 111
     71e:	66 66       	ori	r22, 0x66	; 102
     720:	66 66       	ori	r22, 0x66	; 102
     722:	66 e7       	ldi	r22, 0x76	; 118
     724:	e7 66       	ori	r30, 0x67	; 103
     726:	66 66       	ori	r22, 0x66	; 102
     728:	18 ff       	.word	0xff18	; ????
     72a:	ff 00       	.word	0x00ff	; ????
     72c:	00 ff       	sbrs	r16, 0
     72e:	ff 18       	sub	r15, r15
     730:	18 18       	sub	r1, r8
     732:	18 f8       	.word	0xf818	; ????
     734:	f8 00       	.word	0x00f8	; ????
     736:	00 00       	nop
     738:	00 00       	nop
     73a:	00 1f       	adc	r16, r16
     73c:	1f 18       	sub	r1, r15
     73e:	18 18       	sub	r1, r8
     740:	ff ff       	.word	0xffff	; ????
     742:	ff ff       	.word	0xffff	; ????
     744:	ff ff       	.word	0xffff	; ????
     746:	ff ff       	.word	0xffff	; ????
     748:	00 00       	nop
     74a:	00 00       	nop
     74c:	ff ff       	.word	0xffff	; ????
     74e:	ff ff       	.word	0xffff	; ????
     750:	f0 f0       	brcs	.+60     	; 0x78e <__LOCK_REGION_LENGTH__+0x38e>
     752:	f0 f0       	brcs	.+60     	; 0x790 <__LOCK_REGION_LENGTH__+0x390>
     754:	f0 f0       	brcs	.+60     	; 0x792 <__LOCK_REGION_LENGTH__+0x392>
     756:	f0 f0       	brcs	.+60     	; 0x794 <__LOCK_REGION_LENGTH__+0x394>
     758:	0f 0f       	add	r16, r31
     75a:	0f 0f       	add	r16, r31
     75c:	0f 0f       	add	r16, r31
     75e:	0f 0f       	add	r16, r31
     760:	ff ff       	.word	0xffff	; ????
     762:	ff ff       	.word	0xffff	; ????
     764:	00 00       	nop
     766:	00 00       	nop
     768:	00 00       	nop
     76a:	3b 6e       	ori	r19, 0xEB	; 235
     76c:	64 6e       	ori	r22, 0xE4	; 228
     76e:	3b 00       	.word	0x003b	; ????
     770:	3c 66       	ori	r19, 0x6C	; 108
     772:	66 6c       	ori	r22, 0xC6	; 198
     774:	66 63       	ori	r22, 0x36	; 54
     776:	6e 60       	ori	r22, 0x0E	; 14
     778:	7e 66       	ori	r23, 0x6E	; 110
     77a:	60 60       	ori	r22, 0x00	; 0
     77c:	60 60       	ori	r22, 0x00	; 0
     77e:	60 00       	.word	0x0060	; ????
     780:	00 7f       	andi	r16, 0xF0	; 240
     782:	36 36       	cpi	r19, 0x66	; 102
     784:	36 36       	cpi	r19, 0x66	; 102
     786:	36 00       	.word	0x0036	; ????
     788:	7e 60       	ori	r23, 0x0E	; 14
     78a:	30 18       	sub	r3, r0
     78c:	30 60       	ori	r19, 0x00	; 0
     78e:	7e 00       	.word	0x007e	; ????
     790:	00 00       	nop
     792:	3e 78       	andi	r19, 0x8E	; 142
     794:	6c 6c       	ori	r22, 0xCC	; 204
     796:	38 00       	.word	0x0038	; ????
     798:	00 00       	nop
     79a:	66 66       	ori	r22, 0x66	; 102
     79c:	6e 7b       	andi	r22, 0xBE	; 190
     79e:	60 60       	ori	r22, 0x00	; 0
     7a0:	00 00       	nop
     7a2:	7e 18       	sub	r7, r14
     7a4:	18 18       	sub	r1, r8
     7a6:	0c 00       	.word	0x000c	; ????
     7a8:	3c 18       	sub	r3, r12
     7aa:	3c 66       	ori	r19, 0x6C	; 108
     7ac:	66 3c       	cpi	r22, 0xC6	; 198
     7ae:	18 3c       	cpi	r17, 0xC8	; 200
     7b0:	3c 66       	ori	r19, 0x6C	; 108
     7b2:	66 7e       	andi	r22, 0xE6	; 230
     7b4:	66 66       	ori	r22, 0x66	; 102
     7b6:	3c 00       	.word	0x003c	; ????
     7b8:	3e 63       	ori	r19, 0x3E	; 62
     7ba:	63 63       	ori	r22, 0x33	; 51
     7bc:	63 36       	cpi	r22, 0x63	; 99
     7be:	77 00       	.word	0x0077	; ????
     7c0:	3c 30       	cpi	r19, 0x0C	; 12
     7c2:	18 3c       	cpi	r17, 0xC8	; 200
     7c4:	66 66       	ori	r22, 0x66	; 102
     7c6:	3c 00       	.word	0x003c	; ????
     7c8:	00 00       	nop
     7ca:	36 6f       	ori	r19, 0xF6	; 246
     7cc:	6b 7b       	andi	r22, 0xBB	; 187
     7ce:	36 00       	.word	0x0036	; ????
     7d0:	00 03       	mulsu	r16, r16
     7d2:	3e 66       	ori	r19, 0x6E	; 110
     7d4:	7e 66       	ori	r23, 0x6E	; 110
     7d6:	7c c0       	rjmp	.+248    	; 0x8d0 <__vector_16+0x2a>
     7d8:	00 00       	nop
     7da:	3e 60       	ori	r19, 0x0E	; 14
     7dc:	3c 60       	ori	r19, 0x0C	; 12
     7de:	3e 00       	.word	0x003e	; ????
     7e0:	3c 66       	ori	r19, 0x6C	; 108
     7e2:	66 66       	ori	r22, 0x66	; 102
     7e4:	66 66       	ori	r22, 0x66	; 102
     7e6:	66 00       	.word	0x0066	; ????
     7e8:	00 7e       	andi	r16, 0xE0	; 224
     7ea:	00 7e       	andi	r16, 0xE0	; 224
     7ec:	00 7e       	andi	r16, 0xE0	; 224
     7ee:	00 00       	nop
     7f0:	18 18       	sub	r1, r8
     7f2:	7e 18       	sub	r7, r14
     7f4:	18 00       	.word	0x0018	; ????
     7f6:	7e 00       	.word	0x007e	; ????
     7f8:	30 18       	sub	r3, r0
     7fa:	0c 18       	sub	r0, r12
     7fc:	30 00       	.word	0x0030	; ????
     7fe:	7e 00       	.word	0x007e	; ????
     800:	0c 18       	sub	r0, r12
     802:	30 18       	sub	r3, r0
     804:	0c 00       	.word	0x000c	; ????
     806:	7e 00       	.word	0x007e	; ????
     808:	0e 1b       	sub	r16, r30
     80a:	1b 18       	sub	r1, r11
     80c:	18 18       	sub	r1, r8
     80e:	18 18       	sub	r1, r8
     810:	18 18       	sub	r1, r8
     812:	18 18       	sub	r1, r8
     814:	18 d8       	rcall	.-4048   	; 0xfffff846 <__eeprom_end+0xff7ef846>
     816:	d8 70       	andi	r29, 0x08	; 8
     818:	00 18       	sub	r0, r0
     81a:	00 7e       	andi	r16, 0xE0	; 224
     81c:	00 18       	sub	r0, r0
     81e:	00 00       	nop
     820:	00 3b       	cpi	r16, 0xB0	; 176
     822:	6e 00       	.word	0x006e	; ????
     824:	3b 6e       	ori	r19, 0xEB	; 235
     826:	00 00       	nop
     828:	1c 36       	cpi	r17, 0x6C	; 108
     82a:	36 1c       	adc	r3, r6
     82c:	00 00       	nop
     82e:	00 00       	nop
     830:	00 00       	nop
     832:	00 18       	sub	r0, r0
     834:	18 00       	.word	0x0018	; ????
     836:	00 00       	nop
     838:	00 00       	nop
     83a:	00 00       	nop
     83c:	18 00       	.word	0x0018	; ????
     83e:	00 00       	nop
     840:	0f 0c       	add	r0, r15
     842:	0c cc       	rjmp	.-2024   	; 0x5c <__SREG__+0x1d>
     844:	6c 3c       	cpi	r22, 0xCC	; 204
     846:	1c 0c       	add	r1, r12
     848:	3c 36       	cpi	r19, 0x6C	; 108
     84a:	36 36       	cpi	r19, 0x66	; 102
     84c:	36 00       	.word	0x0036	; ????
     84e:	00 00       	nop
     850:	38 0c       	add	r3, r8
     852:	18 30       	cpi	r17, 0x08	; 8
     854:	3c 00       	.word	0x003c	; ????
     856:	00 00       	nop
     858:	00 00       	nop
     85a:	3c 3c       	cpi	r19, 0xCC	; 204
     85c:	3c 3c       	cpi	r19, 0xCC	; 204
	...

00000868 <__ctors_end>:
     868:	11 24       	eor	r1, r1
     86a:	1f be       	out	0x3f, r1	; 63
     86c:	cf ef       	ldi	r28, 0xFF	; 255
     86e:	d8 e0       	ldi	r29, 0x08	; 8
     870:	de bf       	out	0x3e, r29	; 62
     872:	cd bf       	out	0x3d, r28	; 61

00000874 <__do_copy_data>:
     874:	11 e0       	ldi	r17, 0x01	; 1
     876:	a0 e0       	ldi	r26, 0x00	; 0
     878:	b1 e0       	ldi	r27, 0x01	; 1
     87a:	ea ec       	ldi	r30, 0xCA	; 202
     87c:	f7 e1       	ldi	r31, 0x17	; 23
     87e:	02 c0       	rjmp	.+4      	; 0x884 <__do_copy_data+0x10>
     880:	05 90       	lpm	r0, Z+
     882:	0d 92       	st	X+, r0
     884:	a4 31       	cpi	r26, 0x14	; 20
     886:	b1 07       	cpc	r27, r17
     888:	d9 f7       	brne	.-10     	; 0x880 <__do_copy_data+0xc>

0000088a <__do_clear_bss>:
     88a:	21 e0       	ldi	r18, 0x01	; 1
     88c:	a4 e1       	ldi	r26, 0x14	; 20
     88e:	b1 e0       	ldi	r27, 0x01	; 1
     890:	01 c0       	rjmp	.+2      	; 0x894 <.do_clear_bss_start>

00000892 <.do_clear_bss_loop>:
     892:	1d 92       	st	X+, r1

00000894 <.do_clear_bss_start>:
     894:	a7 31       	cpi	r26, 0x17	; 23
     896:	b2 07       	cpc	r27, r18
     898:	e1 f7       	brne	.-8      	; 0x892 <.do_clear_bss_loop>
     89a:	0e 94 4d 0a 	call	0x149a	; 0x149a <main>
     89e:	0c 94 e3 0b 	jmp	0x17c6	; 0x17c6 <_exit>

000008a2 <__bad_interrupt>:
     8a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000008a6 <__vector_16>:
#endif

// Called around the middle of the HSYNC pulse which will be after TCNT1 update.
// Use the value of TCNT1 (the row counter) to determine if the VISB pulse
// should be enabled for this line.
ISR(TIMER0_OVF_vect) {
     8a6:	1f 92       	push	r1
     8a8:	0f 92       	push	r0
     8aa:	0f b6       	in	r0, 0x3f	; 63
     8ac:	0f 92       	push	r0
     8ae:	11 24       	eor	r1, r1
     8b0:	2f 93       	push	r18
     8b2:	8f 93       	push	r24
     8b4:	9f 93       	push	r25
  // Note: TCNT1 == 0 implies start of VSYNC pulse which explains why all of
  // these values are offset by v_front_porch.
  switch(TCNT1) {
     8b6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     8ba:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     8be:	83 32       	cpi	r24, 0x23	; 35
     8c0:	91 05       	cpc	r25, r1
     8c2:	81 f0       	breq	.+32     	; 0x8e4 <__vector_16+0x3e>
     8c4:	83 32       	cpi	r24, 0x23	; 35
     8c6:	93 40       	sbci	r25, 0x03	; 3
     8c8:	29 f4       	brne	.+10     	; 0x8d4 <__vector_16+0x2e>
      // Enable VISB pulse output for this line
      TCCR2A |= (_BV(COM2B1));
      break;
    case v_sync_width + v_back_porch + v_visible_area:
      // Disable VISB pulse output for this line
      TCCR2A &= ~(_BV(COM2B1));
     8ca:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     8ce:	8f 7d       	andi	r24, 0xDF	; 223
     8d0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
      break;
  }
}
     8d4:	9f 91       	pop	r25
     8d6:	8f 91       	pop	r24
     8d8:	2f 91       	pop	r18
     8da:	0f 90       	pop	r0
     8dc:	0f be       	out	0x3f, r0	; 63
     8de:	0f 90       	pop	r0
     8e0:	1f 90       	pop	r1
     8e2:	18 95       	reti
  // Note: TCNT1 == 0 implies start of VSYNC pulse which explains why all of
  // these values are offset by v_front_porch.
  switch(TCNT1) {
    case v_sync_width + v_back_porch:
      // Enable VISB pulse output for this line
      TCCR2A |= (_BV(COM2B1));
     8e4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     8e8:	80 62       	ori	r24, 0x20	; 32
     8ea:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    case v_sync_width + v_back_porch + v_visible_area:
      // Disable VISB pulse output for this line
      TCCR2A &= ~(_BV(COM2B1));
      break;
  }
}
     8ee:	9f 91       	pop	r25
     8f0:	8f 91       	pop	r24
     8f2:	2f 91       	pop	r18
     8f4:	0f 90       	pop	r0
     8f6:	0f be       	out	0x3f, r0	; 63
     8f8:	0f 90       	pop	r0
     8fa:	1f 90       	pop	r1
     8fc:	18 95       	reti

000008fe <_Z5setupv>:
  cursor_x = x < 64 ? x : 64;
  cursor_y = y < 48 ? y : 47;
}

void setup() {
  set_pin_output(HSYNC_PORT_NAME, HSYNC_PORT_BIT);
     8fe:	55 9a       	sbi	0x0a, 5	; 10
  set_pin_output(VSYNC_PORT_NAME, VSYNC_PORT_BIT);
     900:	22 9a       	sbi	0x04, 2	; 4
  set_pin_output(VISB_PORT_NAME, VISB_PORT_BIT);
     902:	53 9a       	sbi	0x0a, 3	; 10
  set_pin_output(HEARTBEAT_PORT_NAME, HEARTBEAT_PORT_BIT);
     904:	50 9a       	sbi	0x0a, 0	; 10

#if DEMO_MODE
  set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
     906:	5a 9a       	sbi	0x0b, 2	; 11
  set_pin(DSB_PORT_NAME, DSB_PORT_BIT);
     908:	5c 9a       	sbi	0x0b, 4	; 11
  reset_pin(A0_PORT_NAME, A0_PORT_BIT);
     90a:	28 98       	cbi	0x05, 0	; 5
  reset_pin(A1_PORT_NAME, A1_PORT_BIT);
     90c:	29 98       	cbi	0x05, 1	; 5

  set_pin_output(WRB_PORT_NAME, WRB_PORT_BIT);
     90e:	52 9a       	sbi	0x0a, 2	; 10
  set_pin_output(DSB_PORT_NAME, DSB_PORT_BIT);
     910:	54 9a       	sbi	0x0a, 4	; 10
  set_pin_output(A0_PORT_NAME, A0_PORT_BIT);
     912:	20 9a       	sbi	0x04, 0	; 4
  set_pin_output(A1_PORT_NAME, A1_PORT_BIT);
     914:	21 9a       	sbi	0x04, 1	; 4
  }
}

inline void set_databus_is_output(bool output) {
  if(output) {
    DDRC |= 0x3F;
     916:	87 b1       	in	r24, 0x07	; 7
     918:	8f 63       	ori	r24, 0x3F	; 63
     91a:	87 b9       	out	0x07, r24	; 7
    DDRD |= 0xC0;
     91c:	8a b1       	in	r24, 0x0a	; 10
     91e:	80 6c       	ori	r24, 0xC0	; 192
     920:	8a b9       	out	0x0a, r24	; 10
  // Data bus
  set_databus_is_output(true);
#endif

  // Reset all timers and halt them
  GTCCR = _BV(TSM) | _BV(PSRASY) | _BV(PSRSYNC);
     922:	83 e8       	ldi	r24, 0x83	; 131
     924:	83 bd       	out	0x23, r24	; 35
  // number of cycles for each period is 2*(TOP-BOTTOM).
  //
  // BOTTOM is 0 and TOP and so the period, T, is 2*TOP/f where f is the counter
  // frequency. Therefore:
  const int top = whole_line * timer_freq / 2.;
  OCR0A = top;
     926:	88 ea       	ldi	r24, 0xA8	; 168
     928:	87 bd       	out	0x27, r24	; 39
  OCR2A = top;
     92a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
  // and so, COMPARE = width * f / 2.

  // Timer 0: HSYNC

  // Set HSYNC pulse width,
  OCR0B = (int)(h_sync_width_t * timer_freq / 2.);
     92e:	81 e1       	ldi	r24, 0x11	; 17
     930:	88 bd       	out	0x28, r24	; 40

  // Phase correct PWM, TOP = OCR0A, internal clock, no pre-scaling,
  // OC0B pin is RESET when match on counting UP and SET when match on counting
  // DOWN for +ve HSYNC polarity. (Opposite for -ve.)
  //TCCR0A = _BV(COM0B1) | _BV(WGM00) | ((h_polarity < 0) ? _BV(COM2B0) : 0);
  TCCR0A = _BV(COM0B1) | _BV(WGM00) | ((h_polarity > 0) ? _BV(COM2B0) : 0); // output is ~HSYNC
     932:	81 e2       	ldi	r24, 0x21	; 33
     934:	84 bd       	out	0x24, r24	; 36
  TCCR0B = _BV(WGM02) | _BV(CS00);
     936:	99 e0       	ldi	r25, 0x09	; 9
     938:	95 bd       	out	0x25, r25	; 37
  // T1 == OC0B which is HSYNC so we can use it as a clock which is a happy
  // co-incidence.

  // TOP/OCR1A is set to the total size of the frame in lines minus 1 since it
  // is zero based.
  OCR1A = whole_frame - 1;
     93a:	25 e2       	ldi	r18, 0x25	; 37
     93c:	33 e0       	ldi	r19, 0x03	; 3
     93e:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     942:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

  // OCR1B is set to the pulse width minus 1 since it is zero based.
  OCR1B = v_sync_width - 1;
     946:	25 e0       	ldi	r18, 0x05	; 5
     948:	30 e0       	ldi	r19, 0x00	; 0
     94a:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     94e:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>

  // Fast PWM, TOP = OCR1A
  TCCR1A = _BV(WGM11) | _BV(WGM10);
     952:	a0 e8       	ldi	r26, 0x80	; 128
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	83 e0       	ldi	r24, 0x03	; 3
     958:	8c 93       	st	X, r24
  TCCR1B = _BV(WGM13) | _BV(WGM12);
     95a:	e1 e8       	ldi	r30, 0x81	; 129
     95c:	f0 e0       	ldi	r31, 0x00	; 0
     95e:	88 e1       	ldi	r24, 0x18	; 24
     960:	80 83       	st	Z, r24
  if(v_polarity > 0) { // output is ~VSYNC
    // Set OC1B on match, clear at bottom.
    TCCR1A |= _BV(COM1B1) | _BV(COM1B0);
  } else {
    // Clear OC1B on match, set at bottom.
    TCCR1A |= _BV(COM1B1);
     962:	8c 91       	ld	r24, X
     964:	80 62       	ori	r24, 0x20	; 32
     966:	8c 93       	st	X, r24
  if(h_polarity > 0) {
    // Clock on falling edge of T1.
    TCCR1B |= _BV(CS12) | _BV(CS11);
  } else {
    // Clock on rising edge of T1.
    TCCR1B |= _BV(CS12) | _BV(CS11) | _BV(CS10);
     968:	80 81       	ld	r24, Z
     96a:	87 60       	ori	r24, 0x07	; 7
     96c:	80 83       	st	Z, r24

  // Timer 2: VISB

  // We set the display inactive pulse width because that pulse is nearly
  // aligned to HSYNC already.
  OCR2B = (int)(hvis_inactive_width * timer_freq / 2.);
     96e:	88 e2       	ldi	r24, 0x28	; 40
     970:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>

  // Phase correct PWM, TOP = OCR2A, no clock, no pre-scaling,
  // OC2B pin is SET when match on counting UP and RESET when match on counting
  // DOWN (see timer 0 overflow handler).
  TCCR2A = _BV(WGM20);
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
  TCCR2B = _BV(WGM22) | _BV(CS20);
     97a:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>

  // set default VISB value for when VISB is disabled
  set_pin(VISB_PORT_NAME, VISB_PORT_BIT);
     97e:	5b 9a       	sbi	0x0b, 3	; 11

  // The centre points of the HSYNC and VISB pulses are *nearly* aligned
  // already. However, the HSYNC pulse is not quite in the middle of the
  // inactive VISB region so we offset the inactive pulse from the HSYNC pulse.
  TCNT0 = 0;
     980:	16 bc       	out	0x26, r1	; 38
  TCNT1 = 0; // corresponds to start of vsync pulse
     982:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     986:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  TCNT2 = 256-(int)(hvis_inactive_offset * timer_freq);
     98a:	8f ee       	ldi	r24, 0xEF	; 239
     98c:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>

  // Enable OVF interrupt for timer 0
  TIMSK0 |= _BV(TOIE0);
     990:	ee e6       	ldi	r30, 0x6E	; 110
     992:	f0 e0       	ldi	r31, 0x00	; 0
     994:	80 81       	ld	r24, Z
     996:	81 60       	ori	r24, 0x01	; 1
     998:	80 83       	st	Z, r24

  // Start timers and enable interrupts.
  sei();
     99a:	78 94       	sei
  GTCCR = 0;
     99c:	13 bc       	out	0x23, r1	; 35
     99e:	08 95       	ret

000009a0 <_Z4loopv>:
}

void loop() {
     9a0:	2f 92       	push	r2
     9a2:	3f 92       	push	r3
     9a4:	4f 92       	push	r4
     9a6:	5f 92       	push	r5
     9a8:	6f 92       	push	r6
     9aa:	7f 92       	push	r7
     9ac:	8f 92       	push	r8
     9ae:	9f 92       	push	r9
     9b0:	af 92       	push	r10
     9b2:	bf 92       	push	r11
     9b4:	cf 92       	push	r12
     9b6:	df 92       	push	r13
     9b8:	ef 92       	push	r14
     9ba:	ff 92       	push	r15
     9bc:	0f 93       	push	r16
     9be:	1f 93       	push	r17
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
     9c4:	cd b7       	in	r28, 0x3d	; 61
     9c6:	de b7       	in	r29, 0x3e	; 62
     9c8:	28 97       	sbiw	r28, 0x08	; 8
     9ca:	0f b6       	in	r0, 0x3f	; 63
     9cc:	f8 94       	cli
     9ce:	de bf       	out	0x3e, r29	; 62
     9d0:	0f be       	out	0x3f, r0	; 63
     9d2:	cd bf       	out	0x3d, r28	; 61
#if DEMO_MODE
  uint16_t x=0, y=0, dx=0, addr=0;
  float r2;

  for(addr=0, y=0; y<384; y++) {
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	ac 01       	movw	r20, r24
     9da:	40 5c       	subi	r20, 0xC0	; 192
     9dc:	5f 4f       	sbci	r21, 0xFF	; 255

inline void set_addr(uint8_t addr) {
  if(addr & 0x1) {
    set_pin(A0_PORT_NAME, A0_PORT_BIT);
  } else {
    reset_pin(A0_PORT_NAME, A0_PORT_BIT);
     9de:	28 98       	cbi	0x05, 0	; 5
  }

  if(addr & 0x2) {
    set_pin(A1_PORT_NAME, A1_PORT_BIT);
  } else {
    reset_pin(A1_PORT_NAME, A1_PORT_BIT);
     9e0:	29 98       	cbi	0x05, 1	; 5
    DDRD &= ~0xC0;
  }
}

inline void write_data(uint8_t data) {
  PORTC &= ~0x3F;
     9e2:	28 b1       	in	r18, 0x08	; 8
     9e4:	20 7c       	andi	r18, 0xC0	; 192
     9e6:	28 b9       	out	0x08, r18	; 8
  PORTC |= data & 0x3F;
     9e8:	28 b1       	in	r18, 0x08	; 8
     9ea:	38 2f       	mov	r19, r24
     9ec:	3f 73       	andi	r19, 0x3F	; 63
     9ee:	23 2b       	or	r18, r19
     9f0:	28 b9       	out	0x08, r18	; 8
  PORTD &= ~0xC0;
     9f2:	2b b1       	in	r18, 0x0b	; 11
     9f4:	2f 73       	andi	r18, 0x3F	; 63
     9f6:	2b b9       	out	0x0b, r18	; 11
  PORTD |= data & 0xC0;
     9f8:	2b b1       	in	r18, 0x0b	; 11
     9fa:	38 2f       	mov	r19, r24
     9fc:	30 7c       	andi	r19, 0xC0	; 192
     9fe:	23 2b       	or	r18, r19
     a00:	2b b9       	out	0x0b, r18	; 11
inline void write(uint8_t addr, uint8_t data) {
  set_addr(addr);
  write_data(data);

  // it is important that the WRB pin be stable *before* DSB goes low.
  reset_pin(WRB_PORT_NAME, WRB_PORT_BIT);
     a02:	5a 98       	cbi	0x0b, 2	; 11
  reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
     a04:	5c 98       	cbi	0x0b, 4	; 11
  // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
  set_pin(DSB_PORT_NAME, DSB_PORT_BIT);
     a06:	5c 9a       	sbi	0x0b, 4	; 11
  set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
     a08:	5a 9a       	sbi	0x0b, 2	; 11
  return val;
}

inline void set_addr(uint8_t addr) {
  if(addr & 0x1) {
    set_pin(A0_PORT_NAME, A0_PORT_BIT);
     a0a:	28 9a       	sbi	0x05, 0	; 5
  }

  if(addr & 0x2) {
    set_pin(A1_PORT_NAME, A1_PORT_BIT);
  } else {
    reset_pin(A1_PORT_NAME, A1_PORT_BIT);
     a0c:	29 98       	cbi	0x05, 1	; 5
    DDRD &= ~0xC0;
  }
}

inline void write_data(uint8_t data) {
  PORTC &= ~0x3F;
     a0e:	28 b1       	in	r18, 0x08	; 8
     a10:	20 7c       	andi	r18, 0xC0	; 192
     a12:	28 b9       	out	0x08, r18	; 8
  PORTC |= data & 0x3F;
     a14:	28 b1       	in	r18, 0x08	; 8
     a16:	39 2f       	mov	r19, r25
     a18:	3f 73       	andi	r19, 0x3F	; 63
     a1a:	23 2b       	or	r18, r19
     a1c:	28 b9       	out	0x08, r18	; 8
  PORTD &= ~0xC0;
     a1e:	2b b1       	in	r18, 0x0b	; 11
     a20:	2f 73       	andi	r18, 0x3F	; 63
     a22:	2b b9       	out	0x0b, r18	; 11
  PORTD |= data & 0xC0;
     a24:	2b b1       	in	r18, 0x0b	; 11
     a26:	39 2f       	mov	r19, r25
     a28:	30 7c       	andi	r19, 0xC0	; 192
     a2a:	23 2b       	or	r18, r19
     a2c:	2b b9       	out	0x0b, r18	; 11
inline void write(uint8_t addr, uint8_t data) {
  set_addr(addr);
  write_data(data);

  // it is important that the WRB pin be stable *before* DSB goes low.
  reset_pin(WRB_PORT_NAME, WRB_PORT_BIT);
     a2e:	5a 98       	cbi	0x0b, 2	; 11
  reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
     a30:	5c 98       	cbi	0x0b, 4	; 11
  // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
  set_pin(DSB_PORT_NAME, DSB_PORT_BIT);
     a32:	5c 9a       	sbi	0x0b, 4	; 11
  set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
     a34:	5a 9a       	sbi	0x0b, 2	; 11

inline void set_addr(uint8_t addr) {
  if(addr & 0x1) {
    set_pin(A0_PORT_NAME, A0_PORT_BIT);
  } else {
    reset_pin(A0_PORT_NAME, A0_PORT_BIT);
     a36:	28 98       	cbi	0x05, 0	; 5
  }

  if(addr & 0x2) {
    set_pin(A1_PORT_NAME, A1_PORT_BIT);
     a38:	29 9a       	sbi	0x05, 1	; 5
    DDRD &= ~0xC0;
  }
}

inline void write_data(uint8_t data) {
  PORTC &= ~0x3F;
     a3a:	28 b1       	in	r18, 0x08	; 8
     a3c:	20 7c       	andi	r18, 0xC0	; 192
     a3e:	28 b9       	out	0x08, r18	; 8
  PORTC |= data & 0x3F;
     a40:	28 b1       	in	r18, 0x08	; 8
     a42:	28 b9       	out	0x08, r18	; 8
  PORTD &= ~0xC0;
     a44:	2b b1       	in	r18, 0x0b	; 11
     a46:	2f 73       	andi	r18, 0x3F	; 63
     a48:	2b b9       	out	0x0b, r18	; 11
  PORTD |= data & 0xC0;
     a4a:	2b b1       	in	r18, 0x0b	; 11
     a4c:	2b b9       	out	0x0b, r18	; 11
inline void write(uint8_t addr, uint8_t data) {
  set_addr(addr);
  write_data(data);

  // it is important that the WRB pin be stable *before* DSB goes low.
  reset_pin(WRB_PORT_NAME, WRB_PORT_BIT);
     a4e:	5a 98       	cbi	0x0b, 2	; 11
  reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
     a50:	5c 98       	cbi	0x0b, 4	; 11
  // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
  set_pin(DSB_PORT_NAME, DSB_PORT_BIT);
     a52:	5c 9a       	sbi	0x0b, 4	; 11
  set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
     a54:	5a 9a       	sbi	0x0b, 2	; 11
  uint16_t x=0, y=0, dx=0, addr=0;
  float r2;

  for(addr=0, y=0; y<384; y++) {
    uint8_t b = 0;
    for(x=0; x<512; x+=8, addr++) {
     a56:	01 96       	adiw	r24, 0x01	; 1
     a58:	84 17       	cp	r24, r20
     a5a:	95 07       	cpc	r25, r21
     a5c:	09 f0       	breq	.+2      	; 0xa60 <_Z4loopv+0xc0>
     a5e:	bf cf       	rjmp	.-130    	; 0x9de <_Z4loopv+0x3e>
void loop() {
#if DEMO_MODE
  uint16_t x=0, y=0, dx=0, addr=0;
  float r2;

  for(addr=0, y=0; y<384; y++) {
     a60:	81 15       	cp	r24, r1
     a62:	10 e6       	ldi	r17, 0x60	; 96
     a64:	91 07       	cpc	r25, r17
     a66:	09 f0       	breq	.+2      	; 0xa6a <_Z4loopv+0xca>
     a68:	b7 cf       	rjmp	.-146    	; 0x9d8 <_Z4loopv+0x38>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a6a:	2b ef       	ldi	r18, 0xFB	; 251
     a6c:	39 e6       	ldi	r19, 0x69	; 105
     a6e:	86 e2       	ldi	r24, 0x26	; 38
     a70:	21 50       	subi	r18, 0x01	; 1
     a72:	30 40       	sbci	r19, 0x00	; 0
     a74:	80 40       	sbci	r24, 0x00	; 0
     a76:	e1 f7       	brne	.-8      	; 0xa70 <_Z4loopv+0xd0>
     a78:	00 c0       	rjmp	.+0      	; 0xa7a <_Z4loopv+0xda>
     a7a:	00 00       	nop
    }
  }

  _delay_ms(1000);

  for(addr=0, y=0; y<384; y++) {
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	ac 01       	movw	r20, r24
     a82:	40 5c       	subi	r20, 0xC0	; 192
     a84:	5f 4f       	sbci	r21, 0xFF	; 255

inline void set_addr(uint8_t addr) {
  if(addr & 0x1) {
    set_pin(A0_PORT_NAME, A0_PORT_BIT);
  } else {
    reset_pin(A0_PORT_NAME, A0_PORT_BIT);
     a86:	28 98       	cbi	0x05, 0	; 5
  }

  if(addr & 0x2) {
    set_pin(A1_PORT_NAME, A1_PORT_BIT);
  } else {
    reset_pin(A1_PORT_NAME, A1_PORT_BIT);
     a88:	29 98       	cbi	0x05, 1	; 5
    DDRD &= ~0xC0;
  }
}

inline void write_data(uint8_t data) {
  PORTC &= ~0x3F;
     a8a:	28 b1       	in	r18, 0x08	; 8
     a8c:	20 7c       	andi	r18, 0xC0	; 192
     a8e:	28 b9       	out	0x08, r18	; 8
  PORTC |= data & 0x3F;
     a90:	28 b1       	in	r18, 0x08	; 8
     a92:	38 2f       	mov	r19, r24
     a94:	3f 73       	andi	r19, 0x3F	; 63
     a96:	23 2b       	or	r18, r19
     a98:	28 b9       	out	0x08, r18	; 8
  PORTD &= ~0xC0;
     a9a:	2b b1       	in	r18, 0x0b	; 11
     a9c:	2f 73       	andi	r18, 0x3F	; 63
     a9e:	2b b9       	out	0x0b, r18	; 11
  PORTD |= data & 0xC0;
     aa0:	2b b1       	in	r18, 0x0b	; 11
     aa2:	38 2f       	mov	r19, r24
     aa4:	30 7c       	andi	r19, 0xC0	; 192
     aa6:	23 2b       	or	r18, r19
     aa8:	2b b9       	out	0x0b, r18	; 11
inline void write(uint8_t addr, uint8_t data) {
  set_addr(addr);
  write_data(data);

  // it is important that the WRB pin be stable *before* DSB goes low.
  reset_pin(WRB_PORT_NAME, WRB_PORT_BIT);
     aaa:	5a 98       	cbi	0x0b, 2	; 11
  reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
     aac:	5c 98       	cbi	0x0b, 4	; 11
  // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
  set_pin(DSB_PORT_NAME, DSB_PORT_BIT);
     aae:	5c 9a       	sbi	0x0b, 4	; 11
  set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
     ab0:	5a 9a       	sbi	0x0b, 2	; 11
  return val;
}

inline void set_addr(uint8_t addr) {
  if(addr & 0x1) {
    set_pin(A0_PORT_NAME, A0_PORT_BIT);
     ab2:	28 9a       	sbi	0x05, 0	; 5
  }

  if(addr & 0x2) {
    set_pin(A1_PORT_NAME, A1_PORT_BIT);
  } else {
    reset_pin(A1_PORT_NAME, A1_PORT_BIT);
     ab4:	29 98       	cbi	0x05, 1	; 5
    DDRD &= ~0xC0;
  }
}

inline void write_data(uint8_t data) {
  PORTC &= ~0x3F;
     ab6:	28 b1       	in	r18, 0x08	; 8
     ab8:	20 7c       	andi	r18, 0xC0	; 192
     aba:	28 b9       	out	0x08, r18	; 8
  PORTC |= data & 0x3F;
     abc:	28 b1       	in	r18, 0x08	; 8
     abe:	39 2f       	mov	r19, r25
     ac0:	3f 73       	andi	r19, 0x3F	; 63
     ac2:	23 2b       	or	r18, r19
     ac4:	28 b9       	out	0x08, r18	; 8
  PORTD &= ~0xC0;
     ac6:	2b b1       	in	r18, 0x0b	; 11
     ac8:	2f 73       	andi	r18, 0x3F	; 63
     aca:	2b b9       	out	0x0b, r18	; 11
  PORTD |= data & 0xC0;
     acc:	2b b1       	in	r18, 0x0b	; 11
     ace:	39 2f       	mov	r19, r25
     ad0:	30 7c       	andi	r19, 0xC0	; 192
     ad2:	23 2b       	or	r18, r19
     ad4:	2b b9       	out	0x0b, r18	; 11
inline void write(uint8_t addr, uint8_t data) {
  set_addr(addr);
  write_data(data);

  // it is important that the WRB pin be stable *before* DSB goes low.
  reset_pin(WRB_PORT_NAME, WRB_PORT_BIT);
     ad6:	5a 98       	cbi	0x0b, 2	; 11
  reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
     ad8:	5c 98       	cbi	0x0b, 4	; 11
  // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
  set_pin(DSB_PORT_NAME, DSB_PORT_BIT);
     ada:	5c 9a       	sbi	0x0b, 4	; 11
  set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
     adc:	5a 9a       	sbi	0x0b, 2	; 11

inline void set_addr(uint8_t addr) {
  if(addr & 0x1) {
    set_pin(A0_PORT_NAME, A0_PORT_BIT);
  } else {
    reset_pin(A0_PORT_NAME, A0_PORT_BIT);
     ade:	28 98       	cbi	0x05, 0	; 5
  }

  if(addr & 0x2) {
    set_pin(A1_PORT_NAME, A1_PORT_BIT);
     ae0:	29 9a       	sbi	0x05, 1	; 5
    DDRD &= ~0xC0;
  }
}

inline void write_data(uint8_t data) {
  PORTC &= ~0x3F;
     ae2:	28 b1       	in	r18, 0x08	; 8
     ae4:	20 7c       	andi	r18, 0xC0	; 192
     ae6:	28 b9       	out	0x08, r18	; 8
  PORTC |= data & 0x3F;
     ae8:	28 b1       	in	r18, 0x08	; 8
     aea:	2f 63       	ori	r18, 0x3F	; 63
     aec:	28 b9       	out	0x08, r18	; 8
  PORTD &= ~0xC0;
     aee:	2b b1       	in	r18, 0x0b	; 11
     af0:	2f 73       	andi	r18, 0x3F	; 63
     af2:	2b b9       	out	0x0b, r18	; 11
  PORTD |= data & 0xC0;
     af4:	2b b1       	in	r18, 0x0b	; 11
     af6:	20 6c       	ori	r18, 0xC0	; 192
     af8:	2b b9       	out	0x0b, r18	; 11
inline void write(uint8_t addr, uint8_t data) {
  set_addr(addr);
  write_data(data);

  // it is important that the WRB pin be stable *before* DSB goes low.
  reset_pin(WRB_PORT_NAME, WRB_PORT_BIT);
     afa:	5a 98       	cbi	0x0b, 2	; 11
  reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
     afc:	5c 98       	cbi	0x0b, 4	; 11
  // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
  set_pin(DSB_PORT_NAME, DSB_PORT_BIT);
     afe:	5c 9a       	sbi	0x0b, 4	; 11
  set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
     b00:	5a 9a       	sbi	0x0b, 2	; 11

  _delay_ms(1000);

  for(addr=0, y=0; y<384; y++) {
    uint8_t b = 0xff;
    for(x=0; x<512; x+=8, addr++) {
     b02:	01 96       	adiw	r24, 0x01	; 1
     b04:	84 17       	cp	r24, r20
     b06:	95 07       	cpc	r25, r21
     b08:	09 f0       	breq	.+2      	; 0xb0c <_Z4loopv+0x16c>
     b0a:	bd cf       	rjmp	.-134    	; 0xa86 <_Z4loopv+0xe6>
    }
  }

  _delay_ms(1000);

  for(addr=0, y=0; y<384; y++) {
     b0c:	81 15       	cp	r24, r1
     b0e:	e0 e6       	ldi	r30, 0x60	; 96
     b10:	9e 07       	cpc	r25, r30
     b12:	09 f0       	breq	.+2      	; 0xb16 <_Z4loopv+0x176>
     b14:	b5 cf       	rjmp	.-150    	; 0xa80 <_Z4loopv+0xe0>
     b16:	60 e0       	ldi	r22, 0x00	; 0
     b18:	70 e0       	ldi	r23, 0x00	; 0
     b1a:	80 e0       	ldi	r24, 0x00	; 0
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	e5 e5       	ldi	r30, 0x55	; 85
     b20:	fe 2f       	mov	r31, r30
     b22:	ff 73       	andi	r31, 0x3F	; 63
     b24:	3e 2f       	mov	r19, r30
     b26:	30 7c       	andi	r19, 0xC0	; 192
     b28:	ac 01       	movw	r20, r24
     b2a:	40 5c       	subi	r20, 0xC0	; 192
     b2c:	5f 4f       	sbci	r21, 0xFF	; 255

inline void set_addr(uint8_t addr) {
  if(addr & 0x1) {
    set_pin(A0_PORT_NAME, A0_PORT_BIT);
  } else {
    reset_pin(A0_PORT_NAME, A0_PORT_BIT);
     b2e:	28 98       	cbi	0x05, 0	; 5
  }

  if(addr & 0x2) {
    set_pin(A1_PORT_NAME, A1_PORT_BIT);
  } else {
    reset_pin(A1_PORT_NAME, A1_PORT_BIT);
     b30:	29 98       	cbi	0x05, 1	; 5
    DDRD &= ~0xC0;
  }
}

inline void write_data(uint8_t data) {
  PORTC &= ~0x3F;
     b32:	28 b1       	in	r18, 0x08	; 8
     b34:	20 7c       	andi	r18, 0xC0	; 192
     b36:	28 b9       	out	0x08, r18	; 8
  PORTC |= data & 0x3F;
     b38:	28 b1       	in	r18, 0x08	; 8
     b3a:	e8 2f       	mov	r30, r24
     b3c:	ef 73       	andi	r30, 0x3F	; 63
     b3e:	2e 2b       	or	r18, r30
     b40:	28 b9       	out	0x08, r18	; 8
  PORTD &= ~0xC0;
     b42:	2b b1       	in	r18, 0x0b	; 11
     b44:	2f 73       	andi	r18, 0x3F	; 63
     b46:	2b b9       	out	0x0b, r18	; 11
  PORTD |= data & 0xC0;
     b48:	2b b1       	in	r18, 0x0b	; 11
     b4a:	e8 2f       	mov	r30, r24
     b4c:	e0 7c       	andi	r30, 0xC0	; 192
     b4e:	2e 2b       	or	r18, r30
     b50:	2b b9       	out	0x0b, r18	; 11
inline void write(uint8_t addr, uint8_t data) {
  set_addr(addr);
  write_data(data);

  // it is important that the WRB pin be stable *before* DSB goes low.
  reset_pin(WRB_PORT_NAME, WRB_PORT_BIT);
     b52:	5a 98       	cbi	0x0b, 2	; 11
  reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
     b54:	5c 98       	cbi	0x0b, 4	; 11
  // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
  set_pin(DSB_PORT_NAME, DSB_PORT_BIT);
     b56:	5c 9a       	sbi	0x0b, 4	; 11
  set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
     b58:	5a 9a       	sbi	0x0b, 2	; 11
  return val;
}

inline void set_addr(uint8_t addr) {
  if(addr & 0x1) {
    set_pin(A0_PORT_NAME, A0_PORT_BIT);
     b5a:	28 9a       	sbi	0x05, 0	; 5
  }

  if(addr & 0x2) {
    set_pin(A1_PORT_NAME, A1_PORT_BIT);
  } else {
    reset_pin(A1_PORT_NAME, A1_PORT_BIT);
     b5c:	29 98       	cbi	0x05, 1	; 5
    DDRD &= ~0xC0;
  }
}

inline void write_data(uint8_t data) {
  PORTC &= ~0x3F;
     b5e:	28 b1       	in	r18, 0x08	; 8
     b60:	20 7c       	andi	r18, 0xC0	; 192
     b62:	28 b9       	out	0x08, r18	; 8
  PORTC |= data & 0x3F;
     b64:	28 b1       	in	r18, 0x08	; 8
     b66:	e9 2f       	mov	r30, r25
     b68:	ef 73       	andi	r30, 0x3F	; 63
     b6a:	2e 2b       	or	r18, r30
     b6c:	28 b9       	out	0x08, r18	; 8
  PORTD &= ~0xC0;
     b6e:	2b b1       	in	r18, 0x0b	; 11
     b70:	2f 73       	andi	r18, 0x3F	; 63
     b72:	2b b9       	out	0x0b, r18	; 11
  PORTD |= data & 0xC0;
     b74:	2b b1       	in	r18, 0x0b	; 11
     b76:	e9 2f       	mov	r30, r25
     b78:	e0 7c       	andi	r30, 0xC0	; 192
     b7a:	2e 2b       	or	r18, r30
     b7c:	2b b9       	out	0x0b, r18	; 11
inline void write(uint8_t addr, uint8_t data) {
  set_addr(addr);
  write_data(data);

  // it is important that the WRB pin be stable *before* DSB goes low.
  reset_pin(WRB_PORT_NAME, WRB_PORT_BIT);
     b7e:	5a 98       	cbi	0x0b, 2	; 11
  reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
     b80:	5c 98       	cbi	0x0b, 4	; 11
  // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
  set_pin(DSB_PORT_NAME, DSB_PORT_BIT);
     b82:	5c 9a       	sbi	0x0b, 4	; 11
  set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
     b84:	5a 9a       	sbi	0x0b, 2	; 11

inline void set_addr(uint8_t addr) {
  if(addr & 0x1) {
    set_pin(A0_PORT_NAME, A0_PORT_BIT);
  } else {
    reset_pin(A0_PORT_NAME, A0_PORT_BIT);
     b86:	28 98       	cbi	0x05, 0	; 5
  }

  if(addr & 0x2) {
    set_pin(A1_PORT_NAME, A1_PORT_BIT);
     b88:	29 9a       	sbi	0x05, 1	; 5
    DDRD &= ~0xC0;
  }
}

inline void write_data(uint8_t data) {
  PORTC &= ~0x3F;
     b8a:	28 b1       	in	r18, 0x08	; 8
     b8c:	20 7c       	andi	r18, 0xC0	; 192
     b8e:	28 b9       	out	0x08, r18	; 8
  PORTC |= data & 0x3F;
     b90:	28 b1       	in	r18, 0x08	; 8
     b92:	2f 2b       	or	r18, r31
     b94:	28 b9       	out	0x08, r18	; 8
  PORTD &= ~0xC0;
     b96:	2b b1       	in	r18, 0x0b	; 11
     b98:	2f 73       	andi	r18, 0x3F	; 63
     b9a:	2b b9       	out	0x0b, r18	; 11
  PORTD |= data & 0xC0;
     b9c:	2b b1       	in	r18, 0x0b	; 11
     b9e:	23 2b       	or	r18, r19
     ba0:	2b b9       	out	0x0b, r18	; 11
inline void write(uint8_t addr, uint8_t data) {
  set_addr(addr);
  write_data(data);

  // it is important that the WRB pin be stable *before* DSB goes low.
  reset_pin(WRB_PORT_NAME, WRB_PORT_BIT);
     ba2:	5a 98       	cbi	0x0b, 2	; 11
  reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
     ba4:	5c 98       	cbi	0x0b, 4	; 11
  // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
  set_pin(DSB_PORT_NAME, DSB_PORT_BIT);
     ba6:	5c 9a       	sbi	0x0b, 4	; 11
  set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
     ba8:	5a 9a       	sbi	0x0b, 2	; 11

  // _delay_ms(1000);

  for(addr=0, y=0; y<384; y++) {
    uint8_t b = (y & 1) ? 0xAA : 0x55;
    for(x=0; x<512; x+=8, addr++) {
     baa:	01 96       	adiw	r24, 0x01	; 1
     bac:	84 17       	cp	r24, r20
     bae:	95 07       	cpc	r25, r21
     bb0:	09 f0       	breq	.+2      	; 0xbb4 <_Z4loopv+0x214>
     bb2:	bd cf       	rjmp	.-134    	; 0xb2e <_Z4loopv+0x18e>
    }
  }

  // _delay_ms(1000);

  for(addr=0, y=0; y<384; y++) {
     bb4:	6f 5f       	subi	r22, 0xFF	; 255
     bb6:	7f 4f       	sbci	r23, 0xFF	; 255
     bb8:	81 15       	cp	r24, r1
     bba:	90 46       	sbci	r25, 0x60	; 96
     bbc:	41 f0       	breq	.+16     	; 0xbce <_Z4loopv+0x22e>
    uint8_t b = (y & 1) ? 0xAA : 0x55;
     bbe:	60 ff       	sbrs	r22, 0
     bc0:	03 c0       	rjmp	.+6      	; 0xbc8 <_Z4loopv+0x228>
     bc2:	ea ea       	ldi	r30, 0xAA	; 170
     bc4:	ca 01       	movw	r24, r20
     bc6:	ac cf       	rjmp	.-168    	; 0xb20 <_Z4loopv+0x180>
     bc8:	e5 e5       	ldi	r30, 0x55	; 85
     bca:	ca 01       	movw	r24, r20
     bcc:	a9 cf       	rjmp	.-174    	; 0xb20 <_Z4loopv+0x180>
    }
  }

  //_delay_ms(1000);

  scroll_enabled = false;
     bce:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
  const uint8_t* buf = (const uint8_t*)s;
  for(; *buf != '\0'; ++buf) { putc(*buf); }
}

inline void cursor_set(uint8_t x, uint8_t y) {
  cursor_x = x < 64 ? x : 64;
     bd2:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <_ZL8cursor_x>
  cursor_y = y < 48 ? y : 47;
     bd6:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <_ZL8cursor_y>
     bda:	80 e0       	ldi	r24, 0x00	; 0
     bdc:	20 e0       	ldi	r18, 0x00	; 0
  //_delay_ms(1000);

  scroll_enabled = false;

  cursor_set(0, 0);
  for(uint16_t i=0; i<64*48; ++i) {
     bde:	40 e0       	ldi	r20, 0x00	; 0
     be0:	50 e0       	ldi	r21, 0x00	; 0
  if(cursor_x == 64) { cursor_x = 0; cursor_y += 1; }
  if(cursor_y == 48) {
    if(scroll_enabled) {
      scroll_up(); cursor_y = 47;
    } else {
      cursor_x = 63; cursor_y = 47;
     be2:	bf e3       	ldi	r27, 0x3F	; 63
     be4:	af e2       	ldi	r26, 0x2F	; 47

  scroll_enabled = false;

  cursor_set(0, 0);
  for(uint16_t i=0; i<64*48; ++i) {
    inverse_text = (i & 0x100) ? true : false;
     be6:	35 2f       	mov	r19, r21
     be8:	31 70       	andi	r19, 0x01	; 1
     bea:	30 93 14 01 	sts	0x0114, r19	; 0x800114 <__data_end>
    write_vram(addr, 0x00);
  }
}

inline void print_at(uint8_t x, uint8_t y, uint8_t ch) {
  uint16_t addr = ((uint16_t)(y) << (6+3)) + ((uint16_t)x);
     bee:	62 2f       	mov	r22, r18
     bf0:	70 e0       	ldi	r23, 0x00	; 0
     bf2:	76 2f       	mov	r23, r22
     bf4:	66 27       	eor	r22, r22
     bf6:	77 0f       	add	r23, r23
     bf8:	fb 01       	movw	r30, r22
     bfa:	e8 0f       	add	r30, r24
     bfc:	f1 1d       	adc	r31, r1
     bfe:	cf 01       	movw	r24, r30
     c00:	fa 01       	movw	r30, r20
     c02:	ff 27       	eor	r31, r31
     c04:	ee 0f       	add	r30, r30
     c06:	ff 1f       	adc	r31, r31
     c08:	ee 0f       	add	r30, r30
     c0a:	ff 1f       	adc	r31, r31
     c0c:	ee 0f       	add	r30, r30
     c0e:	ff 1f       	adc	r31, r31
     c10:	e8 59       	subi	r30, 0x98	; 152
     c12:	ff 4f       	sbci	r31, 0xFF	; 255
     c14:	bc 01       	movw	r22, r24
     c16:	7e 5f       	subi	r23, 0xFE	; 254
     c18:	02 c0       	rjmp	.+4      	; 0xc1e <_Z4loopv+0x27e>
     c1a:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <__data_end>
  uint16_t font_addr = ((uint16_t)(ch)<<3);
  for(int r=0; r<8; ++r, addr+=64, font_addr++) {
    uint8_t row = pgm_read_byte(&(font[font_addr]));
     c1e:	24 91       	lpm	r18, Z
    write_vram(addr, inverse_text ? ~row : row);
     c20:	31 11       	cpse	r19, r1
     c22:	20 95       	com	r18

inline void set_addr(uint8_t addr) {
  if(addr & 0x1) {
    set_pin(A0_PORT_NAME, A0_PORT_BIT);
  } else {
    reset_pin(A0_PORT_NAME, A0_PORT_BIT);
     c24:	28 98       	cbi	0x05, 0	; 5
  }

  if(addr & 0x2) {
    set_pin(A1_PORT_NAME, A1_PORT_BIT);
  } else {
    reset_pin(A1_PORT_NAME, A1_PORT_BIT);
     c26:	29 98       	cbi	0x05, 1	; 5
    DDRD &= ~0xC0;
  }
}

inline void write_data(uint8_t data) {
  PORTC &= ~0x3F;
     c28:	38 b1       	in	r19, 0x08	; 8
     c2a:	30 7c       	andi	r19, 0xC0	; 192
     c2c:	38 b9       	out	0x08, r19	; 8
  PORTC |= data & 0x3F;
     c2e:	38 b1       	in	r19, 0x08	; 8
     c30:	18 2f       	mov	r17, r24
     c32:	1f 73       	andi	r17, 0x3F	; 63
     c34:	31 2b       	or	r19, r17
     c36:	38 b9       	out	0x08, r19	; 8
  PORTD &= ~0xC0;
     c38:	3b b1       	in	r19, 0x0b	; 11
     c3a:	3f 73       	andi	r19, 0x3F	; 63
     c3c:	3b b9       	out	0x0b, r19	; 11
  PORTD |= data & 0xC0;
     c3e:	3b b1       	in	r19, 0x0b	; 11
     c40:	18 2f       	mov	r17, r24
     c42:	10 7c       	andi	r17, 0xC0	; 192
     c44:	31 2b       	or	r19, r17
     c46:	3b b9       	out	0x0b, r19	; 11
inline void write(uint8_t addr, uint8_t data) {
  set_addr(addr);
  write_data(data);

  // it is important that the WRB pin be stable *before* DSB goes low.
  reset_pin(WRB_PORT_NAME, WRB_PORT_BIT);
     c48:	5a 98       	cbi	0x0b, 2	; 11
  reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
     c4a:	5c 98       	cbi	0x0b, 4	; 11
  // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
  set_pin(DSB_PORT_NAME, DSB_PORT_BIT);
     c4c:	5c 9a       	sbi	0x0b, 4	; 11
  set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
     c4e:	5a 9a       	sbi	0x0b, 2	; 11
  return val;
}

inline void set_addr(uint8_t addr) {
  if(addr & 0x1) {
    set_pin(A0_PORT_NAME, A0_PORT_BIT);
     c50:	28 9a       	sbi	0x05, 0	; 5
  }

  if(addr & 0x2) {
    set_pin(A1_PORT_NAME, A1_PORT_BIT);
  } else {
    reset_pin(A1_PORT_NAME, A1_PORT_BIT);
     c52:	29 98       	cbi	0x05, 1	; 5
    DDRD &= ~0xC0;
  }
}

inline void write_data(uint8_t data) {
  PORTC &= ~0x3F;
     c54:	38 b1       	in	r19, 0x08	; 8
     c56:	30 7c       	andi	r19, 0xC0	; 192
     c58:	38 b9       	out	0x08, r19	; 8
  PORTC |= data & 0x3F;
     c5a:	38 b1       	in	r19, 0x08	; 8
     c5c:	19 2f       	mov	r17, r25
     c5e:	1f 73       	andi	r17, 0x3F	; 63
     c60:	31 2b       	or	r19, r17
     c62:	38 b9       	out	0x08, r19	; 8
  PORTD &= ~0xC0;
     c64:	3b b1       	in	r19, 0x0b	; 11
     c66:	3f 73       	andi	r19, 0x3F	; 63
     c68:	3b b9       	out	0x0b, r19	; 11
  PORTD |= data & 0xC0;
     c6a:	3b b1       	in	r19, 0x0b	; 11
     c6c:	19 2f       	mov	r17, r25
     c6e:	10 7c       	andi	r17, 0xC0	; 192
     c70:	31 2b       	or	r19, r17
     c72:	3b b9       	out	0x0b, r19	; 11
inline void write(uint8_t addr, uint8_t data) {
  set_addr(addr);
  write_data(data);

  // it is important that the WRB pin be stable *before* DSB goes low.
  reset_pin(WRB_PORT_NAME, WRB_PORT_BIT);
     c74:	5a 98       	cbi	0x0b, 2	; 11
  reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
     c76:	5c 98       	cbi	0x0b, 4	; 11
  // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
  set_pin(DSB_PORT_NAME, DSB_PORT_BIT);
     c78:	5c 9a       	sbi	0x0b, 4	; 11
  set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
     c7a:	5a 9a       	sbi	0x0b, 2	; 11

inline void set_addr(uint8_t addr) {
  if(addr & 0x1) {
    set_pin(A0_PORT_NAME, A0_PORT_BIT);
  } else {
    reset_pin(A0_PORT_NAME, A0_PORT_BIT);
     c7c:	28 98       	cbi	0x05, 0	; 5
  }

  if(addr & 0x2) {
    set_pin(A1_PORT_NAME, A1_PORT_BIT);
     c7e:	29 9a       	sbi	0x05, 1	; 5
    DDRD &= ~0xC0;
  }
}

inline void write_data(uint8_t data) {
  PORTC &= ~0x3F;
     c80:	38 b1       	in	r19, 0x08	; 8
     c82:	30 7c       	andi	r19, 0xC0	; 192
     c84:	38 b9       	out	0x08, r19	; 8
  PORTC |= data & 0x3F;
     c86:	38 b1       	in	r19, 0x08	; 8
     c88:	12 2f       	mov	r17, r18
     c8a:	1f 73       	andi	r17, 0x3F	; 63
     c8c:	31 2b       	or	r19, r17
     c8e:	38 b9       	out	0x08, r19	; 8
  PORTD &= ~0xC0;
     c90:	3b b1       	in	r19, 0x0b	; 11
     c92:	3f 73       	andi	r19, 0x3F	; 63
     c94:	3b b9       	out	0x0b, r19	; 11
  PORTD |= data & 0xC0;
     c96:	3b b1       	in	r19, 0x0b	; 11
     c98:	20 7c       	andi	r18, 0xC0	; 192
     c9a:	23 2b       	or	r18, r19
     c9c:	2b b9       	out	0x0b, r18	; 11
inline void write(uint8_t addr, uint8_t data) {
  set_addr(addr);
  write_data(data);

  // it is important that the WRB pin be stable *before* DSB goes low.
  reset_pin(WRB_PORT_NAME, WRB_PORT_BIT);
     c9e:	5a 98       	cbi	0x0b, 2	; 11
  reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
     ca0:	5c 98       	cbi	0x0b, 4	; 11
  // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
  set_pin(DSB_PORT_NAME, DSB_PORT_BIT);
     ca2:	5c 9a       	sbi	0x0b, 4	; 11
  set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
     ca4:	5a 9a       	sbi	0x0b, 2	; 11
}

inline void print_at(uint8_t x, uint8_t y, uint8_t ch) {
  uint16_t addr = ((uint16_t)(y) << (6+3)) + ((uint16_t)x);
  uint16_t font_addr = ((uint16_t)(ch)<<3);
  for(int r=0; r<8; ++r, addr+=64, font_addr++) {
     ca6:	80 5c       	subi	r24, 0xC0	; 192
     ca8:	9f 4f       	sbci	r25, 0xFF	; 255
     caa:	31 96       	adiw	r30, 0x01	; 1
     cac:	86 17       	cp	r24, r22
     cae:	97 07       	cpc	r25, r23
     cb0:	09 f0       	breq	.+2      	; 0xcb4 <_Z4loopv+0x314>
     cb2:	b3 cf       	rjmp	.-154    	; 0xc1a <_Z4loopv+0x27a>
  }
}

inline void putc(uint8_t ch) {
  print_at(cursor_x, cursor_y, ch);
  cursor_x += 1;
     cb4:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <_ZL8cursor_x>
     cb8:	8f 5f       	subi	r24, 0xFF	; 255
     cba:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <_ZL8cursor_x>
  if(cursor_x == 64) { cursor_x = 0; cursor_y += 1; }
     cbe:	80 34       	cpi	r24, 0x40	; 64
     cc0:	09 f4       	brne	.+2      	; 0xcc4 <_Z4loopv+0x324>
     cc2:	b3 c0       	rjmp	.+358    	; 0xe2a <_Z4loopv+0x48a>
     cc4:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <_ZL8cursor_y>
  if(cursor_y == 48) {
     cc8:	80 33       	cpi	r24, 0x30	; 48
     cca:	59 f0       	breq	.+22     	; 0xce2 <_Z4loopv+0x342>
  //_delay_ms(1000);

  scroll_enabled = false;

  cursor_set(0, 0);
  for(uint16_t i=0; i<64*48; ++i) {
     ccc:	4f 5f       	subi	r20, 0xFF	; 255
     cce:	5f 4f       	sbci	r21, 0xFF	; 255
     cd0:	41 15       	cp	r20, r1
     cd2:	8c e0       	ldi	r24, 0x0C	; 12
     cd4:	58 07       	cpc	r21, r24
     cd6:	99 f0       	breq	.+38     	; 0xcfe <_Z4loopv+0x35e>
     cd8:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <_ZL8cursor_y>
     cdc:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <_ZL8cursor_x>
     ce0:	82 cf       	rjmp	.-252    	; 0xbe6 <_Z4loopv+0x246>
inline void putc(uint8_t ch) {
  print_at(cursor_x, cursor_y, ch);
  cursor_x += 1;
  if(cursor_x == 64) { cursor_x = 0; cursor_y += 1; }
  if(cursor_y == 48) {
    if(scroll_enabled) {
     ce2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     ce6:	81 11       	cpse	r24, r1
     ce8:	a8 c0       	rjmp	.+336    	; 0xe3a <_Z4loopv+0x49a>
      scroll_up(); cursor_y = 47;
    } else {
      cursor_x = 63; cursor_y = 47;
     cea:	b0 93 16 01 	sts	0x0116, r27	; 0x800116 <_ZL8cursor_x>
     cee:	a0 93 15 01 	sts	0x0115, r26	; 0x800115 <_ZL8cursor_y>
  //_delay_ms(1000);

  scroll_enabled = false;

  cursor_set(0, 0);
  for(uint16_t i=0; i<64*48; ++i) {
     cf2:	4f 5f       	subi	r20, 0xFF	; 255
     cf4:	5f 4f       	sbci	r21, 0xFF	; 255
     cf6:	41 15       	cp	r20, r1
     cf8:	8c e0       	ldi	r24, 0x0C	; 12
     cfa:	58 07       	cpc	r21, r24
     cfc:	69 f7       	brne	.-38     	; 0xcd8 <_Z4loopv+0x338>
     cfe:	9b ef       	ldi	r25, 0xFB	; 251
     d00:	e9 e6       	ldi	r30, 0x69	; 105
     d02:	f6 e2       	ldi	r31, 0x26	; 38
     d04:	91 50       	subi	r25, 0x01	; 1
     d06:	e0 40       	sbci	r30, 0x00	; 0
     d08:	f0 40       	sbci	r31, 0x00	; 0
     d0a:	e1 f7       	brne	.-8      	; 0xd04 <_Z4loopv+0x364>
     d0c:	00 c0       	rjmp	.+0      	; 0xd0e <_Z4loopv+0x36e>
     d0e:	00 00       	nop
    cursor_set(random() % 64, random() % 48);
    putc(random() & 0xff);
  }
  */

  scroll_enabled = true;
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
  const uint8_t* buf = (const uint8_t*)s;
  for(; *buf != '\0'; ++buf) { putc(*buf); }
}

inline void cursor_set(uint8_t x, uint8_t y) {
  cursor_x = x < 64 ? x : 64;
     d16:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <_ZL8cursor_x>
  cursor_y = y < 48 ? y : 47;
     d1a:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <_ZL8cursor_y>
     d1e:	4c e2       	ldi	r20, 0x2C	; 44
     d20:	51 e0       	ldi	r21, 0x01	; 1
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	20 e0       	ldi	r18, 0x00	; 0
     d26:	90 e0       	ldi	r25, 0x00	; 0
  scroll_enabled = true;

  inverse_text = false;
  cursor_set(0, 0);
  for(uint16_t i=0; i<300; ++i) {
    inverse_text = !inverse_text;
     d28:	11 e0       	ldi	r17, 0x01	; 1
  if(cursor_x == 64) { cursor_x = 0; cursor_y += 1; }
  if(cursor_y == 48) {
    if(scroll_enabled) {
      scroll_up(); cursor_y = 47;
    } else {
      cursor_x = 63; cursor_y = 47;
     d2a:	68 2f       	mov	r22, r24
  scroll_enabled = true;

  inverse_text = false;
  cursor_set(0, 0);
  for(uint16_t i=0; i<300; ++i) {
    inverse_text = !inverse_text;
     d2c:	39 2f       	mov	r19, r25
     d2e:	31 27       	eor	r19, r17
     d30:	30 93 14 01 	sts	0x0114, r19	; 0x800114 <__data_end>
     d34:	a2 e0       	ldi	r26, 0x02	; 2
     d36:	b1 e0       	ldi	r27, 0x01	; 1
     d38:	e0 e2       	ldi	r30, 0x20	; 32
    write_vram(addr, 0x00);
  }
}

inline void print_at(uint8_t x, uint8_t y, uint8_t ch) {
  uint16_t addr = ((uint16_t)(y) << (6+3)) + ((uint16_t)x);
     d3a:	82 2f       	mov	r24, r18
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	98 2f       	mov	r25, r24
     d40:	88 27       	eor	r24, r24
     d42:	99 0f       	add	r25, r25
     d44:	86 0f       	add	r24, r22
     d46:	91 1d       	adc	r25, r1
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	ee 0f       	add	r30, r30
     d4c:	ff 1f       	adc	r31, r31
     d4e:	ee 0f       	add	r30, r30
     d50:	ff 1f       	adc	r31, r31
     d52:	ee 0f       	add	r30, r30
     d54:	ff 1f       	adc	r31, r31
     d56:	e8 59       	subi	r30, 0x98	; 152
     d58:	ff 4f       	sbci	r31, 0xFF	; 255
     d5a:	bc 01       	movw	r22, r24
     d5c:	7e 5f       	subi	r23, 0xFE	; 254
     d5e:	02 c0       	rjmp	.+4      	; 0xd64 <_Z4loopv+0x3c4>
     d60:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <__data_end>
  uint16_t font_addr = ((uint16_t)(ch)<<3);
  for(int r=0; r<8; ++r, addr+=64, font_addr++) {
    uint8_t row = pgm_read_byte(&(font[font_addr]));
     d64:	24 91       	lpm	r18, Z
    write_vram(addr, inverse_text ? ~row : row);
     d66:	31 11       	cpse	r19, r1
     d68:	20 95       	com	r18

inline void set_addr(uint8_t addr) {
  if(addr & 0x1) {
    set_pin(A0_PORT_NAME, A0_PORT_BIT);
  } else {
    reset_pin(A0_PORT_NAME, A0_PORT_BIT);
     d6a:	28 98       	cbi	0x05, 0	; 5
  }

  if(addr & 0x2) {
    set_pin(A1_PORT_NAME, A1_PORT_BIT);
  } else {
    reset_pin(A1_PORT_NAME, A1_PORT_BIT);
     d6c:	29 98       	cbi	0x05, 1	; 5
    DDRD &= ~0xC0;
  }
}

inline void write_data(uint8_t data) {
  PORTC &= ~0x3F;
     d6e:	38 b1       	in	r19, 0x08	; 8
     d70:	30 7c       	andi	r19, 0xC0	; 192
     d72:	38 b9       	out	0x08, r19	; 8
  PORTC |= data & 0x3F;
     d74:	38 b1       	in	r19, 0x08	; 8
     d76:	08 2f       	mov	r16, r24
     d78:	0f 73       	andi	r16, 0x3F	; 63
     d7a:	30 2b       	or	r19, r16
     d7c:	38 b9       	out	0x08, r19	; 8
  PORTD &= ~0xC0;
     d7e:	3b b1       	in	r19, 0x0b	; 11
     d80:	3f 73       	andi	r19, 0x3F	; 63
     d82:	3b b9       	out	0x0b, r19	; 11
  PORTD |= data & 0xC0;
     d84:	3b b1       	in	r19, 0x0b	; 11
     d86:	08 2f       	mov	r16, r24
     d88:	00 7c       	andi	r16, 0xC0	; 192
     d8a:	30 2b       	or	r19, r16
     d8c:	3b b9       	out	0x0b, r19	; 11
inline void write(uint8_t addr, uint8_t data) {
  set_addr(addr);
  write_data(data);

  // it is important that the WRB pin be stable *before* DSB goes low.
  reset_pin(WRB_PORT_NAME, WRB_PORT_BIT);
     d8e:	5a 98       	cbi	0x0b, 2	; 11
  reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
     d90:	5c 98       	cbi	0x0b, 4	; 11
  // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
  set_pin(DSB_PORT_NAME, DSB_PORT_BIT);
     d92:	5c 9a       	sbi	0x0b, 4	; 11
  set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
     d94:	5a 9a       	sbi	0x0b, 2	; 11
  return val;
}

inline void set_addr(uint8_t addr) {
  if(addr & 0x1) {
    set_pin(A0_PORT_NAME, A0_PORT_BIT);
     d96:	28 9a       	sbi	0x05, 0	; 5
  }

  if(addr & 0x2) {
    set_pin(A1_PORT_NAME, A1_PORT_BIT);
  } else {
    reset_pin(A1_PORT_NAME, A1_PORT_BIT);
     d98:	29 98       	cbi	0x05, 1	; 5
    DDRD &= ~0xC0;
  }
}

inline void write_data(uint8_t data) {
  PORTC &= ~0x3F;
     d9a:	38 b1       	in	r19, 0x08	; 8
     d9c:	30 7c       	andi	r19, 0xC0	; 192
     d9e:	38 b9       	out	0x08, r19	; 8
  PORTC |= data & 0x3F;
     da0:	38 b1       	in	r19, 0x08	; 8
     da2:	09 2f       	mov	r16, r25
     da4:	0f 73       	andi	r16, 0x3F	; 63
     da6:	30 2b       	or	r19, r16
     da8:	38 b9       	out	0x08, r19	; 8
  PORTD &= ~0xC0;
     daa:	3b b1       	in	r19, 0x0b	; 11
     dac:	3f 73       	andi	r19, 0x3F	; 63
     dae:	3b b9       	out	0x0b, r19	; 11
  PORTD |= data & 0xC0;
     db0:	3b b1       	in	r19, 0x0b	; 11
     db2:	09 2f       	mov	r16, r25
     db4:	00 7c       	andi	r16, 0xC0	; 192
     db6:	30 2b       	or	r19, r16
     db8:	3b b9       	out	0x0b, r19	; 11
inline void write(uint8_t addr, uint8_t data) {
  set_addr(addr);
  write_data(data);

  // it is important that the WRB pin be stable *before* DSB goes low.
  reset_pin(WRB_PORT_NAME, WRB_PORT_BIT);
     dba:	5a 98       	cbi	0x0b, 2	; 11
  reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
     dbc:	5c 98       	cbi	0x0b, 4	; 11
  // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
  set_pin(DSB_PORT_NAME, DSB_PORT_BIT);
     dbe:	5c 9a       	sbi	0x0b, 4	; 11
  set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
     dc0:	5a 9a       	sbi	0x0b, 2	; 11

inline void set_addr(uint8_t addr) {
  if(addr & 0x1) {
    set_pin(A0_PORT_NAME, A0_PORT_BIT);
  } else {
    reset_pin(A0_PORT_NAME, A0_PORT_BIT);
     dc2:	28 98       	cbi	0x05, 0	; 5
  }

  if(addr & 0x2) {
    set_pin(A1_PORT_NAME, A1_PORT_BIT);
     dc4:	29 9a       	sbi	0x05, 1	; 5
    DDRD &= ~0xC0;
  }
}

inline void write_data(uint8_t data) {
  PORTC &= ~0x3F;
     dc6:	38 b1       	in	r19, 0x08	; 8
     dc8:	30 7c       	andi	r19, 0xC0	; 192
     dca:	38 b9       	out	0x08, r19	; 8
  PORTC |= data & 0x3F;
     dcc:	38 b1       	in	r19, 0x08	; 8
     dce:	02 2f       	mov	r16, r18
     dd0:	0f 73       	andi	r16, 0x3F	; 63
     dd2:	30 2b       	or	r19, r16
     dd4:	38 b9       	out	0x08, r19	; 8
  PORTD &= ~0xC0;
     dd6:	3b b1       	in	r19, 0x0b	; 11
     dd8:	3f 73       	andi	r19, 0x3F	; 63
     dda:	3b b9       	out	0x0b, r19	; 11
  PORTD |= data & 0xC0;
     ddc:	3b b1       	in	r19, 0x0b	; 11
     dde:	20 7c       	andi	r18, 0xC0	; 192
     de0:	23 2b       	or	r18, r19
     de2:	2b b9       	out	0x0b, r18	; 11
inline void write(uint8_t addr, uint8_t data) {
  set_addr(addr);
  write_data(data);

  // it is important that the WRB pin be stable *before* DSB goes low.
  reset_pin(WRB_PORT_NAME, WRB_PORT_BIT);
     de4:	5a 98       	cbi	0x0b, 2	; 11
  reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
     de6:	5c 98       	cbi	0x0b, 4	; 11
  // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
  set_pin(DSB_PORT_NAME, DSB_PORT_BIT);
     de8:	5c 9a       	sbi	0x0b, 4	; 11
  set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
     dea:	5a 9a       	sbi	0x0b, 2	; 11
}

inline void print_at(uint8_t x, uint8_t y, uint8_t ch) {
  uint16_t addr = ((uint16_t)(y) << (6+3)) + ((uint16_t)x);
  uint16_t font_addr = ((uint16_t)(ch)<<3);
  for(int r=0; r<8; ++r, addr+=64, font_addr++) {
     dec:	80 5c       	subi	r24, 0xC0	; 192
     dee:	9f 4f       	sbci	r25, 0xFF	; 255
     df0:	31 96       	adiw	r30, 0x01	; 1
     df2:	86 17       	cp	r24, r22
     df4:	97 07       	cpc	r25, r23
     df6:	09 f0       	breq	.+2      	; 0xdfa <_Z4loopv+0x45a>
     df8:	b3 cf       	rjmp	.-154    	; 0xd60 <_Z4loopv+0x3c0>
  }
}

inline void putc(uint8_t ch) {
  print_at(cursor_x, cursor_y, ch);
  cursor_x += 1;
     dfa:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <_ZL8cursor_x>
     dfe:	8f 5f       	subi	r24, 0xFF	; 255
     e00:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <_ZL8cursor_x>
  if(cursor_x == 64) { cursor_x = 0; cursor_y += 1; }
     e04:	80 34       	cpi	r24, 0x40	; 64
     e06:	09 f4       	brne	.+2      	; 0xe0a <_Z4loopv+0x46a>
     e08:	f4 c0       	rjmp	.+488    	; 0xff2 <_Z4loopv+0x652>
     e0a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <_ZL8cursor_y>
  if(cursor_y == 48) {
     e0e:	80 33       	cpi	r24, 0x30	; 48
     e10:	09 f4       	brne	.+2      	; 0xe14 <_Z4loopv+0x474>
     e12:	d7 c0       	rjmp	.+430    	; 0xfc2 <_Z4loopv+0x622>
  }
}

inline void puts(const void* s) {
  const uint8_t* buf = (const uint8_t*)s;
  for(; *buf != '\0'; ++buf) { putc(*buf); }
     e14:	ed 91       	ld	r30, X+
     e16:	ee 23       	and	r30, r30
     e18:	09 f4       	brne	.+2      	; 0xe1c <_Z4loopv+0x47c>
     e1a:	e0 c0       	rjmp	.+448    	; 0xfdc <_Z4loopv+0x63c>
     e1c:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <_ZL8cursor_y>
     e20:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <_ZL8cursor_x>
     e24:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <__data_end>
     e28:	88 cf       	rjmp	.-240    	; 0xd3a <_Z4loopv+0x39a>
}

inline void putc(uint8_t ch) {
  print_at(cursor_x, cursor_y, ch);
  cursor_x += 1;
  if(cursor_x == 64) { cursor_x = 0; cursor_y += 1; }
     e2a:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <_ZL8cursor_x>
     e2e:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <_ZL8cursor_y>
     e32:	8f 5f       	subi	r24, 0xFF	; 255
     e34:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <_ZL8cursor_y>
     e38:	47 cf       	rjmp	.-370    	; 0xcc8 <_Z4loopv+0x328>
  if(cursor_y == 48) {
    if(scroll_enabled) {
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	90 e0       	ldi	r25, 0x00	; 0

inline void set_addr(uint8_t addr) {
  if(addr & 0x1) {
    set_pin(A0_PORT_NAME, A0_PORT_BIT);
  } else {
    reset_pin(A0_PORT_NAME, A0_PORT_BIT);
     e3e:	28 98       	cbi	0x05, 0	; 5
  }

  if(addr & 0x2) {
    set_pin(A1_PORT_NAME, A1_PORT_BIT);
  } else {
    reset_pin(A1_PORT_NAME, A1_PORT_BIT);
     e40:	29 98       	cbi	0x05, 1	; 5
    DDRD &= ~0xC0;
  }
}

inline void write_data(uint8_t data) {
  PORTC &= ~0x3F;
     e42:	28 b1       	in	r18, 0x08	; 8
     e44:	20 7c       	andi	r18, 0xC0	; 192
     e46:	28 b9       	out	0x08, r18	; 8
  PORTC |= data & 0x3F;
     e48:	28 b1       	in	r18, 0x08	; 8
     e4a:	38 2f       	mov	r19, r24
     e4c:	3f 73       	andi	r19, 0x3F	; 63
     e4e:	23 2b       	or	r18, r19
     e50:	28 b9       	out	0x08, r18	; 8
  PORTD &= ~0xC0;
     e52:	2b b1       	in	r18, 0x0b	; 11
     e54:	2f 73       	andi	r18, 0x3F	; 63
     e56:	2b b9       	out	0x0b, r18	; 11
  PORTD |= data & 0xC0;
     e58:	6b b1       	in	r22, 0x0b	; 11
     e5a:	28 2f       	mov	r18, r24
     e5c:	20 7c       	andi	r18, 0xC0	; 192
     e5e:	62 2b       	or	r22, r18
     e60:	6b b9       	out	0x0b, r22	; 11
inline void write(uint8_t addr, uint8_t data) {
  set_addr(addr);
  write_data(data);

  // it is important that the WRB pin be stable *before* DSB goes low.
  reset_pin(WRB_PORT_NAME, WRB_PORT_BIT);
     e62:	5a 98       	cbi	0x0b, 2	; 11
  reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
     e64:	5c 98       	cbi	0x0b, 4	; 11
  // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
  set_pin(DSB_PORT_NAME, DSB_PORT_BIT);
     e66:	5c 9a       	sbi	0x0b, 4	; 11
  set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
     e68:	5a 9a       	sbi	0x0b, 2	; 11
  return val;
}

inline void set_addr(uint8_t addr) {
  if(addr & 0x1) {
    set_pin(A0_PORT_NAME, A0_PORT_BIT);
     e6a:	28 9a       	sbi	0x05, 0	; 5
  }

  if(addr & 0x2) {
    set_pin(A1_PORT_NAME, A1_PORT_BIT);
  } else {
    reset_pin(A1_PORT_NAME, A1_PORT_BIT);
     e6c:	29 98       	cbi	0x05, 1	; 5
    DDRD &= ~0xC0;
  }
}

inline void write_data(uint8_t data) {
  PORTC &= ~0x3F;
     e6e:	68 b1       	in	r22, 0x08	; 8
     e70:	60 7c       	andi	r22, 0xC0	; 192
     e72:	68 b9       	out	0x08, r22	; 8
  PORTC |= data & 0x3F;
     e74:	68 b1       	in	r22, 0x08	; 8
     e76:	fc 01       	movw	r30, r24
     e78:	fe 5f       	subi	r31, 0xFE	; 254
     e7a:	7f 2f       	mov	r23, r31
     e7c:	7f 73       	andi	r23, 0x3F	; 63
     e7e:	67 2b       	or	r22, r23
     e80:	68 b9       	out	0x08, r22	; 8
  PORTD &= ~0xC0;
     e82:	6b b1       	in	r22, 0x0b	; 11
     e84:	6f 73       	andi	r22, 0x3F	; 63
     e86:	6b b9       	out	0x0b, r22	; 11
  PORTD |= data & 0xC0;
     e88:	6b b1       	in	r22, 0x0b	; 11
     e8a:	7f 2f       	mov	r23, r31
     e8c:	70 7c       	andi	r23, 0xC0	; 192
     e8e:	67 2b       	or	r22, r23
     e90:	6b b9       	out	0x0b, r22	; 11
inline void write(uint8_t addr, uint8_t data) {
  set_addr(addr);
  write_data(data);

  // it is important that the WRB pin be stable *before* DSB goes low.
  reset_pin(WRB_PORT_NAME, WRB_PORT_BIT);
     e92:	5a 98       	cbi	0x0b, 2	; 11
  reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
     e94:	5c 98       	cbi	0x0b, 4	; 11
  // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
  set_pin(DSB_PORT_NAME, DSB_PORT_BIT);
     e96:	5c 9a       	sbi	0x0b, 4	; 11
  set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
     e98:	5a 9a       	sbi	0x0b, 2	; 11

inline void set_addr(uint8_t addr) {
  if(addr & 0x1) {
    set_pin(A0_PORT_NAME, A0_PORT_BIT);
  } else {
    reset_pin(A0_PORT_NAME, A0_PORT_BIT);
     e9a:	28 98       	cbi	0x05, 0	; 5
  }

  if(addr & 0x2) {
    set_pin(A1_PORT_NAME, A1_PORT_BIT);
     e9c:	29 9a       	sbi	0x05, 1	; 5
}

inline uint8_t read(uint8_t addr) {
  set_addr(addr);

  set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
     e9e:	5a 9a       	sbi	0x0b, 2	; 11
  reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
     ea0:	5c 98       	cbi	0x0b, 4	; 11
inline void set_databus_is_output(bool output) {
  if(output) {
    DDRC |= 0x3F;
    DDRD |= 0xC0;
  } else {
    DDRC &= ~0x3F;
     ea2:	67 b1       	in	r22, 0x07	; 7
     ea4:	60 7c       	andi	r22, 0xC0	; 192
     ea6:	67 b9       	out	0x07, r22	; 7
    DDRD &= ~0xC0;
     ea8:	6a b1       	in	r22, 0x0a	; 10
     eaa:	6f 73       	andi	r22, 0x3F	; 63
     eac:	6a b9       	out	0x0a, r22	; 10
  PORTD |= data & 0xC0;
}

inline uint8_t read_data() {
  set_databus_is_output(false);
  uint8_t val = (PINC & 0x3F) | (PIND & 0xC0);
     eae:	76 b1       	in	r23, 0x06	; 6
     eb0:	69 b1       	in	r22, 0x09	; 9
     eb2:	7f 73       	andi	r23, 0x3F	; 63
  }
}

inline void set_databus_is_output(bool output) {
  if(output) {
    DDRC |= 0x3F;
     eb4:	e7 b1       	in	r30, 0x07	; 7
     eb6:	ef 63       	ori	r30, 0x3F	; 63
     eb8:	e7 b9       	out	0x07, r30	; 7
    DDRD |= 0xC0;
     eba:	ea b1       	in	r30, 0x0a	; 10
     ebc:	e0 6c       	ori	r30, 0xC0	; 192
     ebe:	ea b9       	out	0x0a, r30	; 10

  set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
  reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
  // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
  uint8_t val = read_data();
  set_pin(DSB_PORT_NAME, DSB_PORT_BIT);
     ec0:	5c 9a       	sbi	0x0b, 4	; 11

inline void set_addr(uint8_t addr) {
  if(addr & 0x1) {
    set_pin(A0_PORT_NAME, A0_PORT_BIT);
  } else {
    reset_pin(A0_PORT_NAME, A0_PORT_BIT);
     ec2:	28 98       	cbi	0x05, 0	; 5
  }

  if(addr & 0x2) {
    set_pin(A1_PORT_NAME, A1_PORT_BIT);
  } else {
    reset_pin(A1_PORT_NAME, A1_PORT_BIT);
     ec4:	29 98       	cbi	0x05, 1	; 5
    DDRD &= ~0xC0;
  }
}

inline void write_data(uint8_t data) {
  PORTC &= ~0x3F;
     ec6:	e8 b1       	in	r30, 0x08	; 8
     ec8:	e0 7c       	andi	r30, 0xC0	; 192
     eca:	e8 b9       	out	0x08, r30	; 8
  PORTC |= data & 0x3F;
     ecc:	e8 b1       	in	r30, 0x08	; 8
     ece:	3e 2b       	or	r19, r30
     ed0:	38 b9       	out	0x08, r19	; 8
  PORTD &= ~0xC0;
     ed2:	3b b1       	in	r19, 0x0b	; 11
     ed4:	3f 73       	andi	r19, 0x3F	; 63
     ed6:	3b b9       	out	0x0b, r19	; 11
  PORTD |= data & 0xC0;
     ed8:	3b b1       	in	r19, 0x0b	; 11
     eda:	23 2b       	or	r18, r19
     edc:	2b b9       	out	0x0b, r18	; 11
inline void write(uint8_t addr, uint8_t data) {
  set_addr(addr);
  write_data(data);

  // it is important that the WRB pin be stable *before* DSB goes low.
  reset_pin(WRB_PORT_NAME, WRB_PORT_BIT);
     ede:	5a 98       	cbi	0x0b, 2	; 11
  reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
     ee0:	5c 98       	cbi	0x0b, 4	; 11
  // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
  set_pin(DSB_PORT_NAME, DSB_PORT_BIT);
     ee2:	5c 9a       	sbi	0x0b, 4	; 11
  set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
     ee4:	5a 9a       	sbi	0x0b, 2	; 11
  return val;
}

inline void set_addr(uint8_t addr) {
  if(addr & 0x1) {
    set_pin(A0_PORT_NAME, A0_PORT_BIT);
     ee6:	28 9a       	sbi	0x05, 0	; 5
  }

  if(addr & 0x2) {
    set_pin(A1_PORT_NAME, A1_PORT_BIT);
  } else {
    reset_pin(A1_PORT_NAME, A1_PORT_BIT);
     ee8:	29 98       	cbi	0x05, 1	; 5
    DDRD &= ~0xC0;
  }
}

inline void write_data(uint8_t data) {
  PORTC &= ~0x3F;
     eea:	28 b1       	in	r18, 0x08	; 8
     eec:	20 7c       	andi	r18, 0xC0	; 192
     eee:	28 b9       	out	0x08, r18	; 8
  PORTC |= data & 0x3F;
     ef0:	28 b1       	in	r18, 0x08	; 8
     ef2:	39 2f       	mov	r19, r25
     ef4:	3f 73       	andi	r19, 0x3F	; 63
     ef6:	23 2b       	or	r18, r19
     ef8:	28 b9       	out	0x08, r18	; 8
  PORTD &= ~0xC0;
     efa:	2b b1       	in	r18, 0x0b	; 11
     efc:	2f 73       	andi	r18, 0x3F	; 63
     efe:	2b b9       	out	0x0b, r18	; 11
  PORTD |= data & 0xC0;
     f00:	2b b1       	in	r18, 0x0b	; 11
     f02:	39 2f       	mov	r19, r25
     f04:	30 7c       	andi	r19, 0xC0	; 192
     f06:	23 2b       	or	r18, r19
     f08:	2b b9       	out	0x0b, r18	; 11
inline void write(uint8_t addr, uint8_t data) {
  set_addr(addr);
  write_data(data);

  // it is important that the WRB pin be stable *before* DSB goes low.
  reset_pin(WRB_PORT_NAME, WRB_PORT_BIT);
     f0a:	5a 98       	cbi	0x0b, 2	; 11
  reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
     f0c:	5c 98       	cbi	0x0b, 4	; 11
  // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
  set_pin(DSB_PORT_NAME, DSB_PORT_BIT);
     f0e:	5c 9a       	sbi	0x0b, 4	; 11
  set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
     f10:	5a 9a       	sbi	0x0b, 2	; 11

inline void set_addr(uint8_t addr) {
  if(addr & 0x1) {
    set_pin(A0_PORT_NAME, A0_PORT_BIT);
  } else {
    reset_pin(A0_PORT_NAME, A0_PORT_BIT);
     f12:	28 98       	cbi	0x05, 0	; 5
  }

  if(addr & 0x2) {
    set_pin(A1_PORT_NAME, A1_PORT_BIT);
     f14:	29 9a       	sbi	0x05, 1	; 5
    DDRD &= ~0xC0;
  }
}

inline void write_data(uint8_t data) {
  PORTC &= ~0x3F;
     f16:	28 b1       	in	r18, 0x08	; 8
     f18:	20 7c       	andi	r18, 0xC0	; 192
     f1a:	28 b9       	out	0x08, r18	; 8
  PORTC |= data & 0x3F;
     f1c:	28 b1       	in	r18, 0x08	; 8
     f1e:	27 2b       	or	r18, r23
     f20:	28 b9       	out	0x08, r18	; 8
  PORTD &= ~0xC0;
     f22:	2b b1       	in	r18, 0x0b	; 11
     f24:	2f 73       	andi	r18, 0x3F	; 63
     f26:	2b b9       	out	0x0b, r18	; 11
  PORTD |= data & 0xC0;
     f28:	3b b1       	in	r19, 0x0b	; 11
     f2a:	26 2f       	mov	r18, r22
     f2c:	20 7c       	andi	r18, 0xC0	; 192
     f2e:	23 2b       	or	r18, r19
     f30:	2b b9       	out	0x0b, r18	; 11
inline void write(uint8_t addr, uint8_t data) {
  set_addr(addr);
  write_data(data);

  // it is important that the WRB pin be stable *before* DSB goes low.
  reset_pin(WRB_PORT_NAME, WRB_PORT_BIT);
     f32:	5a 98       	cbi	0x0b, 2	; 11
  reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
     f34:	5c 98       	cbi	0x0b, 4	; 11
  // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
  set_pin(DSB_PORT_NAME, DSB_PORT_BIT);
     f36:	5c 9a       	sbi	0x0b, 4	; 11
  set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
     f38:	5a 9a       	sbi	0x0b, 2	; 11
static bool inverse_text = false;
static bool scroll_enabled = true;

inline void scroll_up() {
  uint16_t addr=0;
  for(; addr<(64*47*8); ++addr) {
     f3a:	01 96       	adiw	r24, 0x01	; 1
     f3c:	81 15       	cp	r24, r1
     f3e:	2e e5       	ldi	r18, 0x5E	; 94
     f40:	92 07       	cpc	r25, r18
     f42:	09 f0       	breq	.+2      	; 0xf46 <_Z4loopv+0x5a6>
     f44:	7c cf       	rjmp	.-264    	; 0xe3e <_Z4loopv+0x49e>

inline void set_addr(uint8_t addr) {
  if(addr & 0x1) {
    set_pin(A0_PORT_NAME, A0_PORT_BIT);
  } else {
    reset_pin(A0_PORT_NAME, A0_PORT_BIT);
     f46:	28 98       	cbi	0x05, 0	; 5
  }

  if(addr & 0x2) {
    set_pin(A1_PORT_NAME, A1_PORT_BIT);
  } else {
    reset_pin(A1_PORT_NAME, A1_PORT_BIT);
     f48:	29 98       	cbi	0x05, 1	; 5
    DDRD &= ~0xC0;
  }
}

inline void write_data(uint8_t data) {
  PORTC &= ~0x3F;
     f4a:	28 b1       	in	r18, 0x08	; 8
     f4c:	20 7c       	andi	r18, 0xC0	; 192
     f4e:	28 b9       	out	0x08, r18	; 8
  PORTC |= data & 0x3F;
     f50:	28 b1       	in	r18, 0x08	; 8
     f52:	38 2f       	mov	r19, r24
     f54:	3f 73       	andi	r19, 0x3F	; 63
     f56:	23 2b       	or	r18, r19
     f58:	28 b9       	out	0x08, r18	; 8
  PORTD &= ~0xC0;
     f5a:	2b b1       	in	r18, 0x0b	; 11
     f5c:	2f 73       	andi	r18, 0x3F	; 63
     f5e:	2b b9       	out	0x0b, r18	; 11
  PORTD |= data & 0xC0;
     f60:	2b b1       	in	r18, 0x0b	; 11
     f62:	38 2f       	mov	r19, r24
     f64:	30 7c       	andi	r19, 0xC0	; 192
     f66:	23 2b       	or	r18, r19
     f68:	2b b9       	out	0x0b, r18	; 11
inline void write(uint8_t addr, uint8_t data) {
  set_addr(addr);
  write_data(data);

  // it is important that the WRB pin be stable *before* DSB goes low.
  reset_pin(WRB_PORT_NAME, WRB_PORT_BIT);
     f6a:	5a 98       	cbi	0x0b, 2	; 11
  reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
     f6c:	5c 98       	cbi	0x0b, 4	; 11
  // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
  set_pin(DSB_PORT_NAME, DSB_PORT_BIT);
     f6e:	5c 9a       	sbi	0x0b, 4	; 11
  set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
     f70:	5a 9a       	sbi	0x0b, 2	; 11
  return val;
}

inline void set_addr(uint8_t addr) {
  if(addr & 0x1) {
    set_pin(A0_PORT_NAME, A0_PORT_BIT);
     f72:	28 9a       	sbi	0x05, 0	; 5
  }

  if(addr & 0x2) {
    set_pin(A1_PORT_NAME, A1_PORT_BIT);
  } else {
    reset_pin(A1_PORT_NAME, A1_PORT_BIT);
     f74:	29 98       	cbi	0x05, 1	; 5
    DDRD &= ~0xC0;
  }
}

inline void write_data(uint8_t data) {
  PORTC &= ~0x3F;
     f76:	28 b1       	in	r18, 0x08	; 8
     f78:	20 7c       	andi	r18, 0xC0	; 192
     f7a:	28 b9       	out	0x08, r18	; 8
  PORTC |= data & 0x3F;
     f7c:	28 b1       	in	r18, 0x08	; 8
     f7e:	39 2f       	mov	r19, r25
     f80:	3f 73       	andi	r19, 0x3F	; 63
     f82:	23 2b       	or	r18, r19
     f84:	28 b9       	out	0x08, r18	; 8
  PORTD &= ~0xC0;
     f86:	2b b1       	in	r18, 0x0b	; 11
     f88:	2f 73       	andi	r18, 0x3F	; 63
     f8a:	2b b9       	out	0x0b, r18	; 11
  PORTD |= data & 0xC0;
     f8c:	5e 9a       	sbi	0x0b, 6	; 11
inline void write(uint8_t addr, uint8_t data) {
  set_addr(addr);
  write_data(data);

  // it is important that the WRB pin be stable *before* DSB goes low.
  reset_pin(WRB_PORT_NAME, WRB_PORT_BIT);
     f8e:	5a 98       	cbi	0x0b, 2	; 11
  reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
     f90:	5c 98       	cbi	0x0b, 4	; 11
  // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
  set_pin(DSB_PORT_NAME, DSB_PORT_BIT);
     f92:	5c 9a       	sbi	0x0b, 4	; 11
  set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
     f94:	5a 9a       	sbi	0x0b, 2	; 11

inline void set_addr(uint8_t addr) {
  if(addr & 0x1) {
    set_pin(A0_PORT_NAME, A0_PORT_BIT);
  } else {
    reset_pin(A0_PORT_NAME, A0_PORT_BIT);
     f96:	28 98       	cbi	0x05, 0	; 5
  }

  if(addr & 0x2) {
    set_pin(A1_PORT_NAME, A1_PORT_BIT);
     f98:	29 9a       	sbi	0x05, 1	; 5
    DDRD &= ~0xC0;
  }
}

inline void write_data(uint8_t data) {
  PORTC &= ~0x3F;
     f9a:	28 b1       	in	r18, 0x08	; 8
     f9c:	20 7c       	andi	r18, 0xC0	; 192
     f9e:	28 b9       	out	0x08, r18	; 8
  PORTC |= data & 0x3F;
     fa0:	28 b1       	in	r18, 0x08	; 8
     fa2:	28 b9       	out	0x08, r18	; 8
  PORTD &= ~0xC0;
     fa4:	2b b1       	in	r18, 0x0b	; 11
     fa6:	2f 73       	andi	r18, 0x3F	; 63
     fa8:	2b b9       	out	0x0b, r18	; 11
  PORTD |= data & 0xC0;
     faa:	2b b1       	in	r18, 0x0b	; 11
     fac:	2b b9       	out	0x0b, r18	; 11
inline void write(uint8_t addr, uint8_t data) {
  set_addr(addr);
  write_data(data);

  // it is important that the WRB pin be stable *before* DSB goes low.
  reset_pin(WRB_PORT_NAME, WRB_PORT_BIT);
     fae:	5a 98       	cbi	0x0b, 2	; 11
  reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
     fb0:	5c 98       	cbi	0x0b, 4	; 11
  // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
  set_pin(DSB_PORT_NAME, DSB_PORT_BIT);
     fb2:	5c 9a       	sbi	0x0b, 4	; 11
  set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
     fb4:	5a 9a       	sbi	0x0b, 2	; 11
inline void scroll_up() {
  uint16_t addr=0;
  for(; addr<(64*47*8); ++addr) {
    write_vram(addr, read_vram(addr + (64*8)));
  }
  for(; addr<(64*48*8); ++addr) {
     fb6:	01 96       	adiw	r24, 0x01	; 1
     fb8:	81 15       	cp	r24, r1
     fba:	30 e6       	ldi	r19, 0x60	; 96
     fbc:	93 07       	cpc	r25, r19
     fbe:	19 f6       	brne	.-122    	; 0xf46 <_Z4loopv+0x5a6>
     fc0:	96 ce       	rjmp	.-724    	; 0xcee <_Z4loopv+0x34e>
inline void putc(uint8_t ch) {
  print_at(cursor_x, cursor_y, ch);
  cursor_x += 1;
  if(cursor_x == 64) { cursor_x = 0; cursor_y += 1; }
  if(cursor_y == 48) {
    if(scroll_enabled) {
     fc2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     fc6:	81 11       	cpse	r24, r1
     fc8:	1c c0       	rjmp	.+56     	; 0x1002 <_Z4loopv+0x662>
      scroll_up(); cursor_y = 47;
    } else {
      cursor_x = 63; cursor_y = 47;
     fca:	9f e3       	ldi	r25, 0x3F	; 63
     fcc:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <_ZL8cursor_x>
     fd0:	ef e2       	ldi	r30, 0x2F	; 47
     fd2:	e0 93 15 01 	sts	0x0115, r30	; 0x800115 <_ZL8cursor_y>
  }
}

inline void puts(const void* s) {
  const uint8_t* buf = (const uint8_t*)s;
  for(; *buf != '\0'; ++buf) { putc(*buf); }
     fd6:	ed 91       	ld	r30, X+
     fd8:	e1 11       	cpse	r30, r1
     fda:	20 cf       	rjmp	.-448    	; 0xe1c <_Z4loopv+0x47c>
     fdc:	41 50       	subi	r20, 0x01	; 1
     fde:	51 09       	sbc	r21, r1

  scroll_enabled = true;

  inverse_text = false;
  cursor_set(0, 0);
  for(uint16_t i=0; i<300; ++i) {
     fe0:	09 f4       	brne	.+2      	; 0xfe4 <_Z4loopv+0x644>
     fe2:	d7 c0       	rjmp	.+430    	; 0x1192 <_Z4loopv+0x7f2>
     fe4:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <__data_end>
     fe8:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <_ZL8cursor_y>
     fec:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <_ZL8cursor_x>
     ff0:	9d ce       	rjmp	.-710    	; 0xd2c <_Z4loopv+0x38c>
}

inline void putc(uint8_t ch) {
  print_at(cursor_x, cursor_y, ch);
  cursor_x += 1;
  if(cursor_x == 64) { cursor_x = 0; cursor_y += 1; }
     ff2:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <_ZL8cursor_x>
     ff6:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <_ZL8cursor_y>
     ffa:	8f 5f       	subi	r24, 0xFF	; 255
     ffc:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <_ZL8cursor_y>
    1000:	06 cf       	rjmp	.-500    	; 0xe0e <_Z4loopv+0x46e>
  if(cursor_y == 48) {
    if(scroll_enabled) {
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	90 e0       	ldi	r25, 0x00	; 0

inline void set_addr(uint8_t addr) {
  if(addr & 0x1) {
    set_pin(A0_PORT_NAME, A0_PORT_BIT);
  } else {
    reset_pin(A0_PORT_NAME, A0_PORT_BIT);
    1006:	28 98       	cbi	0x05, 0	; 5
  }

  if(addr & 0x2) {
    set_pin(A1_PORT_NAME, A1_PORT_BIT);
  } else {
    reset_pin(A1_PORT_NAME, A1_PORT_BIT);
    1008:	29 98       	cbi	0x05, 1	; 5
    DDRD &= ~0xC0;
  }
}

inline void write_data(uint8_t data) {
  PORTC &= ~0x3F;
    100a:	28 b1       	in	r18, 0x08	; 8
    100c:	20 7c       	andi	r18, 0xC0	; 192
    100e:	28 b9       	out	0x08, r18	; 8
  PORTC |= data & 0x3F;
    1010:	28 b1       	in	r18, 0x08	; 8
    1012:	38 2f       	mov	r19, r24
    1014:	3f 73       	andi	r19, 0x3F	; 63
    1016:	23 2b       	or	r18, r19
    1018:	28 b9       	out	0x08, r18	; 8
  PORTD &= ~0xC0;
    101a:	2b b1       	in	r18, 0x0b	; 11
    101c:	2f 73       	andi	r18, 0x3F	; 63
    101e:	2b b9       	out	0x0b, r18	; 11
  PORTD |= data & 0xC0;
    1020:	6b b1       	in	r22, 0x0b	; 11
    1022:	28 2f       	mov	r18, r24
    1024:	20 7c       	andi	r18, 0xC0	; 192
    1026:	62 2b       	or	r22, r18
    1028:	6b b9       	out	0x0b, r22	; 11
inline void write(uint8_t addr, uint8_t data) {
  set_addr(addr);
  write_data(data);

  // it is important that the WRB pin be stable *before* DSB goes low.
  reset_pin(WRB_PORT_NAME, WRB_PORT_BIT);
    102a:	5a 98       	cbi	0x0b, 2	; 11
  reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
    102c:	5c 98       	cbi	0x0b, 4	; 11
  // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
  set_pin(DSB_PORT_NAME, DSB_PORT_BIT);
    102e:	5c 9a       	sbi	0x0b, 4	; 11
  set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
    1030:	5a 9a       	sbi	0x0b, 2	; 11
  return val;
}

inline void set_addr(uint8_t addr) {
  if(addr & 0x1) {
    set_pin(A0_PORT_NAME, A0_PORT_BIT);
    1032:	28 9a       	sbi	0x05, 0	; 5
  }

  if(addr & 0x2) {
    set_pin(A1_PORT_NAME, A1_PORT_BIT);
  } else {
    reset_pin(A1_PORT_NAME, A1_PORT_BIT);
    1034:	29 98       	cbi	0x05, 1	; 5
    DDRD &= ~0xC0;
  }
}

inline void write_data(uint8_t data) {
  PORTC &= ~0x3F;
    1036:	68 b1       	in	r22, 0x08	; 8
    1038:	60 7c       	andi	r22, 0xC0	; 192
    103a:	68 b9       	out	0x08, r22	; 8
  PORTC |= data & 0x3F;
    103c:	68 b1       	in	r22, 0x08	; 8
    103e:	fc 01       	movw	r30, r24
    1040:	fe 5f       	subi	r31, 0xFE	; 254
    1042:	7f 2f       	mov	r23, r31
    1044:	7f 73       	andi	r23, 0x3F	; 63
    1046:	67 2b       	or	r22, r23
    1048:	68 b9       	out	0x08, r22	; 8
  PORTD &= ~0xC0;
    104a:	6b b1       	in	r22, 0x0b	; 11
    104c:	6f 73       	andi	r22, 0x3F	; 63
    104e:	6b b9       	out	0x0b, r22	; 11
  PORTD |= data & 0xC0;
    1050:	6b b1       	in	r22, 0x0b	; 11
    1052:	7f 2f       	mov	r23, r31
    1054:	70 7c       	andi	r23, 0xC0	; 192
    1056:	67 2b       	or	r22, r23
    1058:	6b b9       	out	0x0b, r22	; 11
inline void write(uint8_t addr, uint8_t data) {
  set_addr(addr);
  write_data(data);

  // it is important that the WRB pin be stable *before* DSB goes low.
  reset_pin(WRB_PORT_NAME, WRB_PORT_BIT);
    105a:	5a 98       	cbi	0x0b, 2	; 11
  reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
    105c:	5c 98       	cbi	0x0b, 4	; 11
  // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
  set_pin(DSB_PORT_NAME, DSB_PORT_BIT);
    105e:	5c 9a       	sbi	0x0b, 4	; 11
  set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
    1060:	5a 9a       	sbi	0x0b, 2	; 11

inline void set_addr(uint8_t addr) {
  if(addr & 0x1) {
    set_pin(A0_PORT_NAME, A0_PORT_BIT);
  } else {
    reset_pin(A0_PORT_NAME, A0_PORT_BIT);
    1062:	28 98       	cbi	0x05, 0	; 5
  }

  if(addr & 0x2) {
    set_pin(A1_PORT_NAME, A1_PORT_BIT);
    1064:	29 9a       	sbi	0x05, 1	; 5
}

inline uint8_t read(uint8_t addr) {
  set_addr(addr);

  set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
    1066:	5a 9a       	sbi	0x0b, 2	; 11
  reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
    1068:	5c 98       	cbi	0x0b, 4	; 11
inline void set_databus_is_output(bool output) {
  if(output) {
    DDRC |= 0x3F;
    DDRD |= 0xC0;
  } else {
    DDRC &= ~0x3F;
    106a:	67 b1       	in	r22, 0x07	; 7
    106c:	60 7c       	andi	r22, 0xC0	; 192
    106e:	67 b9       	out	0x07, r22	; 7
    DDRD &= ~0xC0;
    1070:	6a b1       	in	r22, 0x0a	; 10
    1072:	6f 73       	andi	r22, 0x3F	; 63
    1074:	6a b9       	out	0x0a, r22	; 10
  PORTD |= data & 0xC0;
}

inline uint8_t read_data() {
  set_databus_is_output(false);
  uint8_t val = (PINC & 0x3F) | (PIND & 0xC0);
    1076:	76 b1       	in	r23, 0x06	; 6
    1078:	69 b1       	in	r22, 0x09	; 9
    107a:	7f 73       	andi	r23, 0x3F	; 63
  }
}

inline void set_databus_is_output(bool output) {
  if(output) {
    DDRC |= 0x3F;
    107c:	e7 b1       	in	r30, 0x07	; 7
    107e:	ef 63       	ori	r30, 0x3F	; 63
    1080:	e7 b9       	out	0x07, r30	; 7
    DDRD |= 0xC0;
    1082:	ea b1       	in	r30, 0x0a	; 10
    1084:	e0 6c       	ori	r30, 0xC0	; 192
    1086:	ea b9       	out	0x0a, r30	; 10

  set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
  reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
  // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
  uint8_t val = read_data();
  set_pin(DSB_PORT_NAME, DSB_PORT_BIT);
    1088:	5c 9a       	sbi	0x0b, 4	; 11

inline void set_addr(uint8_t addr) {
  if(addr & 0x1) {
    set_pin(A0_PORT_NAME, A0_PORT_BIT);
  } else {
    reset_pin(A0_PORT_NAME, A0_PORT_BIT);
    108a:	28 98       	cbi	0x05, 0	; 5
  }

  if(addr & 0x2) {
    set_pin(A1_PORT_NAME, A1_PORT_BIT);
  } else {
    reset_pin(A1_PORT_NAME, A1_PORT_BIT);
    108c:	29 98       	cbi	0x05, 1	; 5
    DDRD &= ~0xC0;
  }
}

inline void write_data(uint8_t data) {
  PORTC &= ~0x3F;
    108e:	e8 b1       	in	r30, 0x08	; 8
    1090:	e0 7c       	andi	r30, 0xC0	; 192
    1092:	e8 b9       	out	0x08, r30	; 8
  PORTC |= data & 0x3F;
    1094:	e8 b1       	in	r30, 0x08	; 8
    1096:	3e 2b       	or	r19, r30
    1098:	38 b9       	out	0x08, r19	; 8
  PORTD &= ~0xC0;
    109a:	3b b1       	in	r19, 0x0b	; 11
    109c:	3f 73       	andi	r19, 0x3F	; 63
    109e:	3b b9       	out	0x0b, r19	; 11
  PORTD |= data & 0xC0;
    10a0:	3b b1       	in	r19, 0x0b	; 11
    10a2:	23 2b       	or	r18, r19
    10a4:	2b b9       	out	0x0b, r18	; 11
inline void write(uint8_t addr, uint8_t data) {
  set_addr(addr);
  write_data(data);

  // it is important that the WRB pin be stable *before* DSB goes low.
  reset_pin(WRB_PORT_NAME, WRB_PORT_BIT);
    10a6:	5a 98       	cbi	0x0b, 2	; 11
  reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
    10a8:	5c 98       	cbi	0x0b, 4	; 11
  // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
  set_pin(DSB_PORT_NAME, DSB_PORT_BIT);
    10aa:	5c 9a       	sbi	0x0b, 4	; 11
  set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
    10ac:	5a 9a       	sbi	0x0b, 2	; 11
  return val;
}

inline void set_addr(uint8_t addr) {
  if(addr & 0x1) {
    set_pin(A0_PORT_NAME, A0_PORT_BIT);
    10ae:	28 9a       	sbi	0x05, 0	; 5
  }

  if(addr & 0x2) {
    set_pin(A1_PORT_NAME, A1_PORT_BIT);
  } else {
    reset_pin(A1_PORT_NAME, A1_PORT_BIT);
    10b0:	29 98       	cbi	0x05, 1	; 5
    DDRD &= ~0xC0;
  }
}

inline void write_data(uint8_t data) {
  PORTC &= ~0x3F;
    10b2:	28 b1       	in	r18, 0x08	; 8
    10b4:	20 7c       	andi	r18, 0xC0	; 192
    10b6:	28 b9       	out	0x08, r18	; 8
  PORTC |= data & 0x3F;
    10b8:	28 b1       	in	r18, 0x08	; 8
    10ba:	39 2f       	mov	r19, r25
    10bc:	3f 73       	andi	r19, 0x3F	; 63
    10be:	23 2b       	or	r18, r19
    10c0:	28 b9       	out	0x08, r18	; 8
  PORTD &= ~0xC0;
    10c2:	2b b1       	in	r18, 0x0b	; 11
    10c4:	2f 73       	andi	r18, 0x3F	; 63
    10c6:	2b b9       	out	0x0b, r18	; 11
  PORTD |= data & 0xC0;
    10c8:	2b b1       	in	r18, 0x0b	; 11
    10ca:	39 2f       	mov	r19, r25
    10cc:	30 7c       	andi	r19, 0xC0	; 192
    10ce:	23 2b       	or	r18, r19
    10d0:	2b b9       	out	0x0b, r18	; 11
inline void write(uint8_t addr, uint8_t data) {
  set_addr(addr);
  write_data(data);

  // it is important that the WRB pin be stable *before* DSB goes low.
  reset_pin(WRB_PORT_NAME, WRB_PORT_BIT);
    10d2:	5a 98       	cbi	0x0b, 2	; 11
  reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
    10d4:	5c 98       	cbi	0x0b, 4	; 11
  // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
  set_pin(DSB_PORT_NAME, DSB_PORT_BIT);
    10d6:	5c 9a       	sbi	0x0b, 4	; 11
  set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
    10d8:	5a 9a       	sbi	0x0b, 2	; 11

inline void set_addr(uint8_t addr) {
  if(addr & 0x1) {
    set_pin(A0_PORT_NAME, A0_PORT_BIT);
  } else {
    reset_pin(A0_PORT_NAME, A0_PORT_BIT);
    10da:	28 98       	cbi	0x05, 0	; 5
  }

  if(addr & 0x2) {
    set_pin(A1_PORT_NAME, A1_PORT_BIT);
    10dc:	29 9a       	sbi	0x05, 1	; 5
    DDRD &= ~0xC0;
  }
}

inline void write_data(uint8_t data) {
  PORTC &= ~0x3F;
    10de:	28 b1       	in	r18, 0x08	; 8
    10e0:	20 7c       	andi	r18, 0xC0	; 192
    10e2:	28 b9       	out	0x08, r18	; 8
  PORTC |= data & 0x3F;
    10e4:	38 b1       	in	r19, 0x08	; 8
    10e6:	27 2f       	mov	r18, r23
    10e8:	23 2b       	or	r18, r19
    10ea:	28 b9       	out	0x08, r18	; 8
  PORTD &= ~0xC0;
    10ec:	2b b1       	in	r18, 0x0b	; 11
    10ee:	2f 73       	andi	r18, 0x3F	; 63
    10f0:	2b b9       	out	0x0b, r18	; 11
  PORTD |= data & 0xC0;
    10f2:	3b b1       	in	r19, 0x0b	; 11
    10f4:	26 2f       	mov	r18, r22
    10f6:	20 7c       	andi	r18, 0xC0	; 192
    10f8:	23 2b       	or	r18, r19
    10fa:	2b b9       	out	0x0b, r18	; 11
inline void write(uint8_t addr, uint8_t data) {
  set_addr(addr);
  write_data(data);

  // it is important that the WRB pin be stable *before* DSB goes low.
  reset_pin(WRB_PORT_NAME, WRB_PORT_BIT);
    10fc:	5a 98       	cbi	0x0b, 2	; 11
  reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
    10fe:	5c 98       	cbi	0x0b, 4	; 11
  // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
  set_pin(DSB_PORT_NAME, DSB_PORT_BIT);
    1100:	5c 9a       	sbi	0x0b, 4	; 11
  set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
    1102:	5a 9a       	sbi	0x0b, 2	; 11
static bool inverse_text = false;
static bool scroll_enabled = true;

inline void scroll_up() {
  uint16_t addr=0;
  for(; addr<(64*47*8); ++addr) {
    1104:	01 96       	adiw	r24, 0x01	; 1
    1106:	81 15       	cp	r24, r1
    1108:	2e e5       	ldi	r18, 0x5E	; 94
    110a:	92 07       	cpc	r25, r18
    110c:	09 f0       	breq	.+2      	; 0x1110 <_Z4loopv+0x770>
    110e:	7b cf       	rjmp	.-266    	; 0x1006 <_Z4loopv+0x666>

inline void set_addr(uint8_t addr) {
  if(addr & 0x1) {
    set_pin(A0_PORT_NAME, A0_PORT_BIT);
  } else {
    reset_pin(A0_PORT_NAME, A0_PORT_BIT);
    1110:	28 98       	cbi	0x05, 0	; 5
  }

  if(addr & 0x2) {
    set_pin(A1_PORT_NAME, A1_PORT_BIT);
  } else {
    reset_pin(A1_PORT_NAME, A1_PORT_BIT);
    1112:	29 98       	cbi	0x05, 1	; 5
    DDRD &= ~0xC0;
  }
}

inline void write_data(uint8_t data) {
  PORTC &= ~0x3F;
    1114:	28 b1       	in	r18, 0x08	; 8
    1116:	20 7c       	andi	r18, 0xC0	; 192
    1118:	28 b9       	out	0x08, r18	; 8
  PORTC |= data & 0x3F;
    111a:	28 b1       	in	r18, 0x08	; 8
    111c:	38 2f       	mov	r19, r24
    111e:	3f 73       	andi	r19, 0x3F	; 63
    1120:	23 2b       	or	r18, r19
    1122:	28 b9       	out	0x08, r18	; 8
  PORTD &= ~0xC0;
    1124:	2b b1       	in	r18, 0x0b	; 11
    1126:	2f 73       	andi	r18, 0x3F	; 63
    1128:	2b b9       	out	0x0b, r18	; 11
  PORTD |= data & 0xC0;
    112a:	2b b1       	in	r18, 0x0b	; 11
    112c:	38 2f       	mov	r19, r24
    112e:	30 7c       	andi	r19, 0xC0	; 192
    1130:	23 2b       	or	r18, r19
    1132:	2b b9       	out	0x0b, r18	; 11
inline void write(uint8_t addr, uint8_t data) {
  set_addr(addr);
  write_data(data);

  // it is important that the WRB pin be stable *before* DSB goes low.
  reset_pin(WRB_PORT_NAME, WRB_PORT_BIT);
    1134:	5a 98       	cbi	0x0b, 2	; 11
  reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
    1136:	5c 98       	cbi	0x0b, 4	; 11
  // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
  set_pin(DSB_PORT_NAME, DSB_PORT_BIT);
    1138:	5c 9a       	sbi	0x0b, 4	; 11
  set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
    113a:	5a 9a       	sbi	0x0b, 2	; 11
  return val;
}

inline void set_addr(uint8_t addr) {
  if(addr & 0x1) {
    set_pin(A0_PORT_NAME, A0_PORT_BIT);
    113c:	28 9a       	sbi	0x05, 0	; 5
  }

  if(addr & 0x2) {
    set_pin(A1_PORT_NAME, A1_PORT_BIT);
  } else {
    reset_pin(A1_PORT_NAME, A1_PORT_BIT);
    113e:	29 98       	cbi	0x05, 1	; 5
    DDRD &= ~0xC0;
  }
}

inline void write_data(uint8_t data) {
  PORTC &= ~0x3F;
    1140:	28 b1       	in	r18, 0x08	; 8
    1142:	20 7c       	andi	r18, 0xC0	; 192
    1144:	28 b9       	out	0x08, r18	; 8
  PORTC |= data & 0x3F;
    1146:	28 b1       	in	r18, 0x08	; 8
    1148:	39 2f       	mov	r19, r25
    114a:	3f 73       	andi	r19, 0x3F	; 63
    114c:	23 2b       	or	r18, r19
    114e:	28 b9       	out	0x08, r18	; 8
  PORTD &= ~0xC0;
    1150:	2b b1       	in	r18, 0x0b	; 11
    1152:	2f 73       	andi	r18, 0x3F	; 63
    1154:	2b b9       	out	0x0b, r18	; 11
  PORTD |= data & 0xC0;
    1156:	5e 9a       	sbi	0x0b, 6	; 11
inline void write(uint8_t addr, uint8_t data) {
  set_addr(addr);
  write_data(data);

  // it is important that the WRB pin be stable *before* DSB goes low.
  reset_pin(WRB_PORT_NAME, WRB_PORT_BIT);
    1158:	5a 98       	cbi	0x0b, 2	; 11
  reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
    115a:	5c 98       	cbi	0x0b, 4	; 11
  // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
  set_pin(DSB_PORT_NAME, DSB_PORT_BIT);
    115c:	5c 9a       	sbi	0x0b, 4	; 11
  set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
    115e:	5a 9a       	sbi	0x0b, 2	; 11

inline void set_addr(uint8_t addr) {
  if(addr & 0x1) {
    set_pin(A0_PORT_NAME, A0_PORT_BIT);
  } else {
    reset_pin(A0_PORT_NAME, A0_PORT_BIT);
    1160:	28 98       	cbi	0x05, 0	; 5
  }

  if(addr & 0x2) {
    set_pin(A1_PORT_NAME, A1_PORT_BIT);
    1162:	29 9a       	sbi	0x05, 1	; 5
    DDRD &= ~0xC0;
  }
}

inline void write_data(uint8_t data) {
  PORTC &= ~0x3F;
    1164:	28 b1       	in	r18, 0x08	; 8
    1166:	20 7c       	andi	r18, 0xC0	; 192
    1168:	28 b9       	out	0x08, r18	; 8
  PORTC |= data & 0x3F;
    116a:	28 b1       	in	r18, 0x08	; 8
    116c:	28 b9       	out	0x08, r18	; 8
  PORTD &= ~0xC0;
    116e:	2b b1       	in	r18, 0x0b	; 11
    1170:	2f 73       	andi	r18, 0x3F	; 63
    1172:	2b b9       	out	0x0b, r18	; 11
  PORTD |= data & 0xC0;
    1174:	2b b1       	in	r18, 0x0b	; 11
    1176:	2b b9       	out	0x0b, r18	; 11
inline void write(uint8_t addr, uint8_t data) {
  set_addr(addr);
  write_data(data);

  // it is important that the WRB pin be stable *before* DSB goes low.
  reset_pin(WRB_PORT_NAME, WRB_PORT_BIT);
    1178:	5a 98       	cbi	0x0b, 2	; 11
  reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
    117a:	5c 98       	cbi	0x0b, 4	; 11
  // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
  set_pin(DSB_PORT_NAME, DSB_PORT_BIT);
    117c:	5c 9a       	sbi	0x0b, 4	; 11
  set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
    117e:	5a 9a       	sbi	0x0b, 2	; 11
inline void scroll_up() {
  uint16_t addr=0;
  for(; addr<(64*47*8); ++addr) {
    write_vram(addr, read_vram(addr + (64*8)));
  }
  for(; addr<(64*48*8); ++addr) {
    1180:	01 96       	adiw	r24, 0x01	; 1
    1182:	81 15       	cp	r24, r1
    1184:	30 e6       	ldi	r19, 0x60	; 96
    1186:	93 07       	cpc	r25, r19
    1188:	19 f6       	brne	.-122    	; 0x1110 <_Z4loopv+0x770>
  print_at(cursor_x, cursor_y, ch);
  cursor_x += 1;
  if(cursor_x == 64) { cursor_x = 0; cursor_y += 1; }
  if(cursor_y == 48) {
    if(scroll_enabled) {
      scroll_up(); cursor_y = 47;
    118a:	8f e2       	ldi	r24, 0x2F	; 47
    118c:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <_ZL8cursor_y>
    1190:	41 ce       	rjmp	.-894    	; 0xe14 <_Z4loopv+0x474>
  for(uint16_t i=0; i<300; ++i) {
    inverse_text = !inverse_text;
    puts(" Look Around You! ");
  }

  set_pin(HEARTBEAT_PORT_NAME, HEARTBEAT_PORT_BIT);
    1192:	58 9a       	sbi	0x0b, 0	; 11

  for(addr=0, y=0; y<384; y++) {
    1194:	1c 82       	std	Y+4, r1	; 0x04
    1196:	1b 82       	std	Y+3, r1	; 0x03
    1198:	1e 82       	std	Y+6, r1	; 0x06
    119a:	1d 82       	std	Y+5, r1	; 0x05
    float v = y - 192.f;
    119c:	60 e0       	ldi	r22, 0x00	; 0
    119e:	70 e0       	ldi	r23, 0x00	; 0
    11a0:	80 e4       	ldi	r24, 0x40	; 64
    11a2:	93 ec       	ldi	r25, 0xC3	; 195
    uint8_t c1 = 0xFF, c2 = 0x00, c3 = (y & 1) ? 0x55 : 0xAA;
    11a4:	4a ea       	ldi	r20, 0xAA	; 170
    11a6:	24 2e       	mov	r2, r20
            b |= c3 & (1<<(7-dx));
          } else {
            b |= c2 & (1<<(7-dx));
          }
        } else {
          b |= c1 & (1<<(7-dx));
    11a8:	aa 24       	eor	r10, r10
    11aa:	a3 94       	inc	r10
    11ac:	b1 2c       	mov	r11, r1
    11ae:	ba 82       	std	Y+2, r11	; 0x02
    11b0:	a9 82       	std	Y+1, r10	; 0x01
    11b2:	9b 01       	movw	r18, r22
    11b4:	ac 01       	movw	r20, r24
    11b6:	0e 94 76 0b 	call	0x16ec	; 0x16ec <__mulsf3>
    11ba:	2b 01       	movw	r4, r22
    11bc:	3c 01       	movw	r6, r24

  set_pin(HEARTBEAT_PORT_NAME, HEARTBEAT_PORT_BIT);

  for(addr=0, y=0; y<384; y++) {
    float v = y - 192.f;
    uint8_t c1 = 0xFF, c2 = 0x00, c3 = (y & 1) ? 0x55 : 0xAA;
    11be:	ed 80       	ldd	r14, Y+5	; 0x05
    11c0:	fe 80       	ldd	r15, Y+6	; 0x06
    for(x=0; x<512; x+=8, addr++) {
    11c2:	c1 2c       	mov	r12, r1
    11c4:	d1 2c       	mov	r13, r1
    11c6:	86 01       	movw	r16, r12
    11c8:	87 e0       	ldi	r24, 0x07	; 7
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	98 87       	std	Y+8, r25	; 0x08
    11ce:	8f 83       	std	Y+7, r24	; 0x07
    11d0:	31 2c       	mov	r3, r1
    11d2:	1d c0       	rjmp	.+58     	; 0x120e <_Z4loopv+0x86e>
      uint8_t b = 0;
      for(dx=0; dx<8; dx++) {
        float u = (x + dx) - 256.f;
        r2 = u*u + v*v;
        if(r2 < 190.f*190.f) {
          if(r2 < 128.f*123.f) {
    11d4:	20 e0       	ldi	r18, 0x00	; 0
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	46 e7       	ldi	r20, 0x76	; 118
    11da:	56 e4       	ldi	r21, 0x46	; 70
    11dc:	c5 01       	movw	r24, r10
    11de:	b4 01       	movw	r22, r8
    11e0:	0e 94 bf 0a 	call	0x157e	; 0x157e <__cmpsf2>
    11e4:	87 ff       	sbrs	r24, 7
    11e6:	0a c0       	rjmp	.+20     	; 0x11fc <_Z4loopv+0x85c>
            b |= c3 & (1<<(7-dx));
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
    11ea:	9a 81       	ldd	r25, Y+2	; 0x02
    11ec:	0f 80       	ldd	r0, Y+7	; 0x07
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <_Z4loopv+0x854>
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	0a 94       	dec	r0
    11f6:	e2 f7       	brpl	.-8      	; 0x11f0 <_Z4loopv+0x850>
    11f8:	82 21       	and	r24, r2
    11fa:	38 2a       	or	r3, r24
    11fc:	ef 81       	ldd	r30, Y+7	; 0x07
    11fe:	f8 85       	ldd	r31, Y+8	; 0x08
    1200:	31 97       	sbiw	r30, 0x01	; 1
    1202:	f8 87       	std	Y+8, r31	; 0x08
    1204:	ef 83       	std	Y+7, r30	; 0x07
    1206:	0f 5f       	subi	r16, 0xFF	; 255
    1208:	1f 4f       	sbci	r17, 0xFF	; 255
  for(addr=0, y=0; y<384; y++) {
    float v = y - 192.f;
    uint8_t c1 = 0xFF, c2 = 0x00, c3 = (y & 1) ? 0x55 : 0xAA;
    for(x=0; x<512; x+=8, addr++) {
      uint8_t b = 0;
      for(dx=0; dx<8; dx++) {
    120a:	31 96       	adiw	r30, 0x01	; 1
    120c:	39 f1       	breq	.+78     	; 0x125c <_Z4loopv+0x8bc>
        float u = (x + dx) - 256.f;
    120e:	b8 01       	movw	r22, r16
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	0e 94 c4 0a 	call	0x1588	; 0x1588 <__floatunsisf>
    1218:	20 e0       	ldi	r18, 0x00	; 0
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	40 e8       	ldi	r20, 0x80	; 128
    121e:	53 e4       	ldi	r21, 0x43	; 67
    1220:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__subsf3>
        r2 = u*u + v*v;
    1224:	9b 01       	movw	r18, r22
    1226:	ac 01       	movw	r20, r24
    1228:	0e 94 76 0b 	call	0x16ec	; 0x16ec <__mulsf3>
    122c:	a3 01       	movw	r20, r6
    122e:	92 01       	movw	r18, r4
    1230:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <__addsf3>
    1234:	4b 01       	movw	r8, r22
    1236:	5c 01       	movw	r10, r24
        if(r2 < 190.f*190.f) {
    1238:	20 e0       	ldi	r18, 0x00	; 0
    123a:	34 e0       	ldi	r19, 0x04	; 4
    123c:	4d e0       	ldi	r20, 0x0D	; 13
    123e:	57 e4       	ldi	r21, 0x47	; 71
    1240:	0e 94 bf 0a 	call	0x157e	; 0x157e <__cmpsf2>
    1244:	87 fd       	sbrc	r24, 7
    1246:	c6 cf       	rjmp	.-116    	; 0x11d4 <_Z4loopv+0x834>
            b |= c3 & (1<<(7-dx));
          } else {
            b |= c2 & (1<<(7-dx));
          }
        } else {
          b |= c1 & (1<<(7-dx));
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	9a 81       	ldd	r25, Y+2	; 0x02
    124c:	0f 80       	ldd	r0, Y+7	; 0x07
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <_Z4loopv+0x8b4>
    1250:	88 0f       	add	r24, r24
    1252:	99 1f       	adc	r25, r25
    1254:	0a 94       	dec	r0
    1256:	e2 f7       	brpl	.-8      	; 0x1250 <_Z4loopv+0x8b0>
    1258:	38 2a       	or	r3, r24
    125a:	d0 cf       	rjmp	.-96     	; 0x11fc <_Z4loopv+0x85c>

inline void set_addr(uint8_t addr) {
  if(addr & 0x1) {
    set_pin(A0_PORT_NAME, A0_PORT_BIT);
  } else {
    reset_pin(A0_PORT_NAME, A0_PORT_BIT);
    125c:	28 98       	cbi	0x05, 0	; 5
  }

  if(addr & 0x2) {
    set_pin(A1_PORT_NAME, A1_PORT_BIT);
  } else {
    reset_pin(A1_PORT_NAME, A1_PORT_BIT);
    125e:	29 98       	cbi	0x05, 1	; 5
    DDRD &= ~0xC0;
  }
}

inline void write_data(uint8_t data) {
  PORTC &= ~0x3F;
    1260:	88 b1       	in	r24, 0x08	; 8
    1262:	80 7c       	andi	r24, 0xC0	; 192
    1264:	88 b9       	out	0x08, r24	; 8
  PORTC |= data & 0x3F;
    1266:	88 b1       	in	r24, 0x08	; 8
    1268:	9e 2d       	mov	r25, r14
    126a:	9f 73       	andi	r25, 0x3F	; 63
    126c:	89 2b       	or	r24, r25
    126e:	88 b9       	out	0x08, r24	; 8
  PORTD &= ~0xC0;
    1270:	8b b1       	in	r24, 0x0b	; 11
    1272:	8f 73       	andi	r24, 0x3F	; 63
    1274:	8b b9       	out	0x0b, r24	; 11
  PORTD |= data & 0xC0;
    1276:	8b b1       	in	r24, 0x0b	; 11
    1278:	9e 2d       	mov	r25, r14
    127a:	90 7c       	andi	r25, 0xC0	; 192
    127c:	89 2b       	or	r24, r25
    127e:	8b b9       	out	0x0b, r24	; 11
inline void write(uint8_t addr, uint8_t data) {
  set_addr(addr);
  write_data(data);

  // it is important that the WRB pin be stable *before* DSB goes low.
  reset_pin(WRB_PORT_NAME, WRB_PORT_BIT);
    1280:	5a 98       	cbi	0x0b, 2	; 11
  reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
    1282:	5c 98       	cbi	0x0b, 4	; 11
  // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
  set_pin(DSB_PORT_NAME, DSB_PORT_BIT);
    1284:	5c 9a       	sbi	0x0b, 4	; 11
  set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
    1286:	5a 9a       	sbi	0x0b, 2	; 11
  return val;
}

inline void set_addr(uint8_t addr) {
  if(addr & 0x1) {
    set_pin(A0_PORT_NAME, A0_PORT_BIT);
    1288:	28 9a       	sbi	0x05, 0	; 5
  }

  if(addr & 0x2) {
    set_pin(A1_PORT_NAME, A1_PORT_BIT);
  } else {
    reset_pin(A1_PORT_NAME, A1_PORT_BIT);
    128a:	29 98       	cbi	0x05, 1	; 5
    DDRD &= ~0xC0;
  }
}

inline void write_data(uint8_t data) {
  PORTC &= ~0x3F;
    128c:	88 b1       	in	r24, 0x08	; 8
    128e:	80 7c       	andi	r24, 0xC0	; 192
    1290:	88 b9       	out	0x08, r24	; 8
  PORTC |= data & 0x3F;
    1292:	88 b1       	in	r24, 0x08	; 8
    1294:	9f 2d       	mov	r25, r15
    1296:	9f 73       	andi	r25, 0x3F	; 63
    1298:	89 2b       	or	r24, r25
    129a:	88 b9       	out	0x08, r24	; 8
  PORTD &= ~0xC0;
    129c:	8b b1       	in	r24, 0x0b	; 11
    129e:	8f 73       	andi	r24, 0x3F	; 63
    12a0:	8b b9       	out	0x0b, r24	; 11
  PORTD |= data & 0xC0;
    12a2:	8b b1       	in	r24, 0x0b	; 11
    12a4:	9f 2d       	mov	r25, r15
    12a6:	90 7c       	andi	r25, 0xC0	; 192
    12a8:	89 2b       	or	r24, r25
    12aa:	8b b9       	out	0x0b, r24	; 11
inline void write(uint8_t addr, uint8_t data) {
  set_addr(addr);
  write_data(data);

  // it is important that the WRB pin be stable *before* DSB goes low.
  reset_pin(WRB_PORT_NAME, WRB_PORT_BIT);
    12ac:	5a 98       	cbi	0x0b, 2	; 11
  reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
    12ae:	5c 98       	cbi	0x0b, 4	; 11
  // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
  set_pin(DSB_PORT_NAME, DSB_PORT_BIT);
    12b0:	5c 9a       	sbi	0x0b, 4	; 11
  set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
    12b2:	5a 9a       	sbi	0x0b, 2	; 11

inline void set_addr(uint8_t addr) {
  if(addr & 0x1) {
    set_pin(A0_PORT_NAME, A0_PORT_BIT);
  } else {
    reset_pin(A0_PORT_NAME, A0_PORT_BIT);
    12b4:	28 98       	cbi	0x05, 0	; 5
  }

  if(addr & 0x2) {
    set_pin(A1_PORT_NAME, A1_PORT_BIT);
    12b6:	29 9a       	sbi	0x05, 1	; 5
    DDRD &= ~0xC0;
  }
}

inline void write_data(uint8_t data) {
  PORTC &= ~0x3F;
    12b8:	88 b1       	in	r24, 0x08	; 8
    12ba:	80 7c       	andi	r24, 0xC0	; 192
    12bc:	88 b9       	out	0x08, r24	; 8
  PORTC |= data & 0x3F;
    12be:	88 b1       	in	r24, 0x08	; 8
    12c0:	93 2d       	mov	r25, r3
    12c2:	9f 73       	andi	r25, 0x3F	; 63
    12c4:	89 2b       	or	r24, r25
    12c6:	88 b9       	out	0x08, r24	; 8
  PORTD &= ~0xC0;
    12c8:	8b b1       	in	r24, 0x0b	; 11
    12ca:	8f 73       	andi	r24, 0x3F	; 63
    12cc:	8b b9       	out	0x0b, r24	; 11
  PORTD |= data & 0xC0;
    12ce:	9b b1       	in	r25, 0x0b	; 11
    12d0:	83 2d       	mov	r24, r3
    12d2:	80 7c       	andi	r24, 0xC0	; 192
    12d4:	38 2e       	mov	r3, r24
    12d6:	39 2a       	or	r3, r25
    12d8:	3b b8       	out	0x0b, r3	; 11
inline void write(uint8_t addr, uint8_t data) {
  set_addr(addr);
  write_data(data);

  // it is important that the WRB pin be stable *before* DSB goes low.
  reset_pin(WRB_PORT_NAME, WRB_PORT_BIT);
    12da:	5a 98       	cbi	0x0b, 2	; 11
  reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
    12dc:	5c 98       	cbi	0x0b, 4	; 11
  // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
  set_pin(DSB_PORT_NAME, DSB_PORT_BIT);
    12de:	5c 9a       	sbi	0x0b, 4	; 11
  set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
    12e0:	5a 9a       	sbi	0x0b, 2	; 11
  set_pin(HEARTBEAT_PORT_NAME, HEARTBEAT_PORT_BIT);

  for(addr=0, y=0; y<384; y++) {
    float v = y - 192.f;
    uint8_t c1 = 0xFF, c2 = 0x00, c3 = (y & 1) ? 0x55 : 0xAA;
    for(x=0; x<512; x+=8, addr++) {
    12e2:	38 e0       	ldi	r19, 0x08	; 8
    12e4:	c3 0e       	add	r12, r19
    12e6:	d1 1c       	adc	r13, r1
    12e8:	8f ef       	ldi	r24, 0xFF	; 255
    12ea:	e8 1a       	sub	r14, r24
    12ec:	f8 0a       	sbc	r15, r24
    12ee:	c1 14       	cp	r12, r1
    12f0:	92 e0       	ldi	r25, 0x02	; 2
    12f2:	d9 06       	cpc	r13, r25
    12f4:	09 f0       	breq	.+2      	; 0x12f8 <_Z4loopv+0x958>
    12f6:	67 cf       	rjmp	.-306    	; 0x11c6 <_Z4loopv+0x826>
    12f8:	ed 81       	ldd	r30, Y+5	; 0x05
    12fa:	fe 81       	ldd	r31, Y+6	; 0x06
    12fc:	e0 5c       	subi	r30, 0xC0	; 192
    12fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1300:	fe 83       	std	Y+6, r31	; 0x06
    1302:	ed 83       	std	Y+5, r30	; 0x05
    puts(" Look Around You! ");
  }

  set_pin(HEARTBEAT_PORT_NAME, HEARTBEAT_PORT_BIT);

  for(addr=0, y=0; y<384; y++) {
    1304:	2b 81       	ldd	r18, Y+3	; 0x03
    1306:	3c 81       	ldd	r19, Y+4	; 0x04
    1308:	2f 5f       	subi	r18, 0xFF	; 255
    130a:	3f 4f       	sbci	r19, 0xFF	; 255
    130c:	3c 83       	std	Y+4, r19	; 0x04
    130e:	2b 83       	std	Y+3, r18	; 0x03
    1310:	e1 15       	cp	r30, r1
    1312:	f0 46       	sbci	r31, 0x60	; 96
    1314:	b1 f0       	breq	.+44     	; 0x1342 <_Z4loopv+0x9a2>
    float v = y - 192.f;
    1316:	2b 81       	ldd	r18, Y+3	; 0x03
    1318:	3c 81       	ldd	r19, Y+4	; 0x04
    131a:	b9 01       	movw	r22, r18
    131c:	80 e0       	ldi	r24, 0x00	; 0
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	0e 94 c4 0a 	call	0x1588	; 0x1588 <__floatunsisf>
    1324:	20 e0       	ldi	r18, 0x00	; 0
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	40 e4       	ldi	r20, 0x40	; 64
    132a:	53 e4       	ldi	r21, 0x43	; 67
    132c:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__subsf3>
    uint8_t c1 = 0xFF, c2 = 0x00, c3 = (y & 1) ? 0x55 : 0xAA;
    1330:	3b 81       	ldd	r19, Y+3	; 0x03
    1332:	30 ff       	sbrs	r19, 0
    1334:	03 c0       	rjmp	.+6      	; 0x133c <_Z4loopv+0x99c>
    1336:	35 e5       	ldi	r19, 0x55	; 85
    1338:	23 2e       	mov	r2, r19
    133a:	3b cf       	rjmp	.-394    	; 0x11b2 <_Z4loopv+0x812>
    133c:	2a ea       	ldi	r18, 0xAA	; 170
    133e:	22 2e       	mov	r2, r18
    1340:	38 cf       	rjmp	.-400    	; 0x11b2 <_Z4loopv+0x812>
    1342:	b4 e1       	ldi	r27, 0x14	; 20
    1344:	20 e0       	ldi	r18, 0x00	; 0
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	f9 01       	movw	r30, r18
    134a:	e0 5c       	subi	r30, 0xC0	; 192
    134c:	ff 4f       	sbci	r31, 0xFF	; 255

inline void set_addr(uint8_t addr) {
  if(addr & 0x1) {
    set_pin(A0_PORT_NAME, A0_PORT_BIT);
  } else {
    reset_pin(A0_PORT_NAME, A0_PORT_BIT);
    134e:	28 98       	cbi	0x05, 0	; 5
  }

  if(addr & 0x2) {
    set_pin(A1_PORT_NAME, A1_PORT_BIT);
  } else {
    reset_pin(A1_PORT_NAME, A1_PORT_BIT);
    1350:	29 98       	cbi	0x05, 1	; 5
    DDRD &= ~0xC0;
  }
}

inline void write_data(uint8_t data) {
  PORTC &= ~0x3F;
    1352:	88 b1       	in	r24, 0x08	; 8
    1354:	80 7c       	andi	r24, 0xC0	; 192
    1356:	88 b9       	out	0x08, r24	; 8
  PORTC |= data & 0x3F;
    1358:	88 b1       	in	r24, 0x08	; 8
    135a:	72 2f       	mov	r23, r18
    135c:	7f 73       	andi	r23, 0x3F	; 63
    135e:	87 2b       	or	r24, r23
    1360:	88 b9       	out	0x08, r24	; 8
  PORTD &= ~0xC0;
    1362:	8b b1       	in	r24, 0x0b	; 11
    1364:	8f 73       	andi	r24, 0x3F	; 63
    1366:	8b b9       	out	0x0b, r24	; 11
  PORTD |= data & 0xC0;
    1368:	8b b1       	in	r24, 0x0b	; 11
    136a:	62 2f       	mov	r22, r18
    136c:	60 7c       	andi	r22, 0xC0	; 192
    136e:	86 2b       	or	r24, r22
    1370:	8b b9       	out	0x0b, r24	; 11
inline void write(uint8_t addr, uint8_t data) {
  set_addr(addr);
  write_data(data);

  // it is important that the WRB pin be stable *before* DSB goes low.
  reset_pin(WRB_PORT_NAME, WRB_PORT_BIT);
    1372:	5a 98       	cbi	0x0b, 2	; 11
  reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
    1374:	5c 98       	cbi	0x0b, 4	; 11
  // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
  set_pin(DSB_PORT_NAME, DSB_PORT_BIT);
    1376:	5c 9a       	sbi	0x0b, 4	; 11
  set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
    1378:	5a 9a       	sbi	0x0b, 2	; 11
  return val;
}

inline void set_addr(uint8_t addr) {
  if(addr & 0x1) {
    set_pin(A0_PORT_NAME, A0_PORT_BIT);
    137a:	28 9a       	sbi	0x05, 0	; 5
  }

  if(addr & 0x2) {
    set_pin(A1_PORT_NAME, A1_PORT_BIT);
  } else {
    reset_pin(A1_PORT_NAME, A1_PORT_BIT);
    137c:	29 98       	cbi	0x05, 1	; 5
    DDRD &= ~0xC0;
  }
}

inline void write_data(uint8_t data) {
  PORTC &= ~0x3F;
    137e:	88 b1       	in	r24, 0x08	; 8
    1380:	80 7c       	andi	r24, 0xC0	; 192
    1382:	88 b9       	out	0x08, r24	; 8
  PORTC |= data & 0x3F;
    1384:	88 b1       	in	r24, 0x08	; 8
    1386:	53 2f       	mov	r21, r19
    1388:	5f 73       	andi	r21, 0x3F	; 63
    138a:	85 2b       	or	r24, r21
    138c:	88 b9       	out	0x08, r24	; 8
  PORTD &= ~0xC0;
    138e:	8b b1       	in	r24, 0x0b	; 11
    1390:	8f 73       	andi	r24, 0x3F	; 63
    1392:	8b b9       	out	0x0b, r24	; 11
  PORTD |= data & 0xC0;
    1394:	8b b1       	in	r24, 0x0b	; 11
    1396:	43 2f       	mov	r20, r19
    1398:	40 7c       	andi	r20, 0xC0	; 192
    139a:	84 2b       	or	r24, r20
    139c:	8b b9       	out	0x0b, r24	; 11
inline void write(uint8_t addr, uint8_t data) {
  set_addr(addr);
  write_data(data);

  // it is important that the WRB pin be stable *before* DSB goes low.
  reset_pin(WRB_PORT_NAME, WRB_PORT_BIT);
    139e:	5a 98       	cbi	0x0b, 2	; 11
  reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
    13a0:	5c 98       	cbi	0x0b, 4	; 11
  // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
  set_pin(DSB_PORT_NAME, DSB_PORT_BIT);
    13a2:	5c 9a       	sbi	0x0b, 4	; 11
  set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
    13a4:	5a 9a       	sbi	0x0b, 2	; 11

inline void set_addr(uint8_t addr) {
  if(addr & 0x1) {
    set_pin(A0_PORT_NAME, A0_PORT_BIT);
  } else {
    reset_pin(A0_PORT_NAME, A0_PORT_BIT);
    13a6:	28 98       	cbi	0x05, 0	; 5
  }

  if(addr & 0x2) {
    set_pin(A1_PORT_NAME, A1_PORT_BIT);
    13a8:	29 9a       	sbi	0x05, 1	; 5
}

inline uint8_t read(uint8_t addr) {
  set_addr(addr);

  set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
    13aa:	5a 9a       	sbi	0x0b, 2	; 11
  reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
    13ac:	5c 98       	cbi	0x0b, 4	; 11
inline void set_databus_is_output(bool output) {
  if(output) {
    DDRC |= 0x3F;
    DDRD |= 0xC0;
  } else {
    DDRC &= ~0x3F;
    13ae:	87 b1       	in	r24, 0x07	; 7
    13b0:	80 7c       	andi	r24, 0xC0	; 192
    13b2:	87 b9       	out	0x07, r24	; 7
    DDRD &= ~0xC0;
    13b4:	8a b1       	in	r24, 0x0a	; 10
    13b6:	8f 73       	andi	r24, 0x3F	; 63
    13b8:	8a b9       	out	0x0a, r24	; 10
  PORTD |= data & 0xC0;
}

inline uint8_t read_data() {
  set_databus_is_output(false);
  uint8_t val = (PINC & 0x3F) | (PIND & 0xC0);
    13ba:	86 b1       	in	r24, 0x06	; 6
    13bc:	99 b1       	in	r25, 0x09	; 9
  }
}

inline void set_databus_is_output(bool output) {
  if(output) {
    DDRC |= 0x3F;
    13be:	a7 b1       	in	r26, 0x07	; 7
    13c0:	af 63       	ori	r26, 0x3F	; 63
    13c2:	a7 b9       	out	0x07, r26	; 7
    DDRD |= 0xC0;
    13c4:	aa b1       	in	r26, 0x0a	; 10
    13c6:	a0 6c       	ori	r26, 0xC0	; 192
    13c8:	aa b9       	out	0x0a, r26	; 10

  set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
  reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
  // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
  uint8_t val = read_data();
  set_pin(DSB_PORT_NAME, DSB_PORT_BIT);
    13ca:	5c 9a       	sbi	0x0b, 4	; 11

inline void set_addr(uint8_t addr) {
  if(addr & 0x1) {
    set_pin(A0_PORT_NAME, A0_PORT_BIT);
  } else {
    reset_pin(A0_PORT_NAME, A0_PORT_BIT);
    13cc:	28 98       	cbi	0x05, 0	; 5
  }

  if(addr & 0x2) {
    set_pin(A1_PORT_NAME, A1_PORT_BIT);
  } else {
    reset_pin(A1_PORT_NAME, A1_PORT_BIT);
    13ce:	29 98       	cbi	0x05, 1	; 5
    DDRD &= ~0xC0;
  }
}

inline void write_data(uint8_t data) {
  PORTC &= ~0x3F;
    13d0:	a8 b1       	in	r26, 0x08	; 8
    13d2:	a0 7c       	andi	r26, 0xC0	; 192
    13d4:	a8 b9       	out	0x08, r26	; 8
  PORTC |= data & 0x3F;
    13d6:	a8 b1       	in	r26, 0x08	; 8
    13d8:	7a 2b       	or	r23, r26
    13da:	78 b9       	out	0x08, r23	; 8
  PORTD &= ~0xC0;
    13dc:	7b b1       	in	r23, 0x0b	; 11
    13de:	7f 73       	andi	r23, 0x3F	; 63
    13e0:	7b b9       	out	0x0b, r23	; 11
  PORTD |= data & 0xC0;
    13e2:	7b b1       	in	r23, 0x0b	; 11
    13e4:	67 2b       	or	r22, r23
    13e6:	6b b9       	out	0x0b, r22	; 11
inline void write(uint8_t addr, uint8_t data) {
  set_addr(addr);
  write_data(data);

  // it is important that the WRB pin be stable *before* DSB goes low.
  reset_pin(WRB_PORT_NAME, WRB_PORT_BIT);
    13e8:	5a 98       	cbi	0x0b, 2	; 11
  reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
    13ea:	5c 98       	cbi	0x0b, 4	; 11
  // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
  set_pin(DSB_PORT_NAME, DSB_PORT_BIT);
    13ec:	5c 9a       	sbi	0x0b, 4	; 11
  set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
    13ee:	5a 9a       	sbi	0x0b, 2	; 11
  return val;
}

inline void set_addr(uint8_t addr) {
  if(addr & 0x1) {
    set_pin(A0_PORT_NAME, A0_PORT_BIT);
    13f0:	28 9a       	sbi	0x05, 0	; 5
  }

  if(addr & 0x2) {
    set_pin(A1_PORT_NAME, A1_PORT_BIT);
  } else {
    reset_pin(A1_PORT_NAME, A1_PORT_BIT);
    13f2:	29 98       	cbi	0x05, 1	; 5
    DDRD &= ~0xC0;
  }
}

inline void write_data(uint8_t data) {
  PORTC &= ~0x3F;
    13f4:	68 b1       	in	r22, 0x08	; 8
    13f6:	60 7c       	andi	r22, 0xC0	; 192
    13f8:	68 b9       	out	0x08, r22	; 8
  PORTC |= data & 0x3F;
    13fa:	68 b1       	in	r22, 0x08	; 8
    13fc:	56 2b       	or	r21, r22
    13fe:	58 b9       	out	0x08, r21	; 8
  PORTD &= ~0xC0;
    1400:	5b b1       	in	r21, 0x0b	; 11
    1402:	5f 73       	andi	r21, 0x3F	; 63
    1404:	5b b9       	out	0x0b, r21	; 11
  PORTD |= data & 0xC0;
    1406:	5b b1       	in	r21, 0x0b	; 11
    1408:	45 2b       	or	r20, r21
    140a:	4b b9       	out	0x0b, r20	; 11
inline void write(uint8_t addr, uint8_t data) {
  set_addr(addr);
  write_data(data);

  // it is important that the WRB pin be stable *before* DSB goes low.
  reset_pin(WRB_PORT_NAME, WRB_PORT_BIT);
    140c:	5a 98       	cbi	0x0b, 2	; 11
  reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
    140e:	5c 98       	cbi	0x0b, 4	; 11
  // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
  set_pin(DSB_PORT_NAME, DSB_PORT_BIT);
    1410:	5c 9a       	sbi	0x0b, 4	; 11
  set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
    1412:	5a 9a       	sbi	0x0b, 2	; 11

inline void set_addr(uint8_t addr) {
  if(addr & 0x1) {
    set_pin(A0_PORT_NAME, A0_PORT_BIT);
  } else {
    reset_pin(A0_PORT_NAME, A0_PORT_BIT);
    1414:	28 98       	cbi	0x05, 0	; 5
  }

  if(addr & 0x2) {
    set_pin(A1_PORT_NAME, A1_PORT_BIT);
    1416:	29 9a       	sbi	0x05, 1	; 5
    DDRD &= ~0xC0;
  }
}

inline void write_data(uint8_t data) {
  PORTC &= ~0x3F;
    1418:	48 b1       	in	r20, 0x08	; 8
    141a:	40 7c       	andi	r20, 0xC0	; 192
    141c:	48 b9       	out	0x08, r20	; 8
  PORTC |= data & 0x3F;
    141e:	48 b1       	in	r20, 0x08	; 8
    1420:	58 2f       	mov	r21, r24
    1422:	5f 73       	andi	r21, 0x3F	; 63
    1424:	89 2f       	mov	r24, r25
    1426:	80 7c       	andi	r24, 0xC0	; 192
    1428:	85 2b       	or	r24, r21
    142a:	80 95       	com	r24
    142c:	98 2f       	mov	r25, r24
    142e:	9f 73       	andi	r25, 0x3F	; 63
    1430:	94 2b       	or	r25, r20
    1432:	98 b9       	out	0x08, r25	; 8
  PORTD &= ~0xC0;
    1434:	9b b1       	in	r25, 0x0b	; 11
    1436:	9f 73       	andi	r25, 0x3F	; 63
    1438:	9b b9       	out	0x0b, r25	; 11
  PORTD |= data & 0xC0;
    143a:	9b b1       	in	r25, 0x0b	; 11
    143c:	80 7c       	andi	r24, 0xC0	; 192
    143e:	89 2b       	or	r24, r25
    1440:	8b b9       	out	0x0b, r24	; 11
inline void write(uint8_t addr, uint8_t data) {
  set_addr(addr);
  write_data(data);

  // it is important that the WRB pin be stable *before* DSB goes low.
  reset_pin(WRB_PORT_NAME, WRB_PORT_BIT);
    1442:	5a 98       	cbi	0x0b, 2	; 11
  reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
    1444:	5c 98       	cbi	0x0b, 4	; 11
  // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
  set_pin(DSB_PORT_NAME, DSB_PORT_BIT);
    1446:	5c 9a       	sbi	0x0b, 4	; 11
  set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
    1448:	5a 9a       	sbi	0x0b, 2	; 11
    }
  }

  for(uint8_t i=0; i<20; ++i) {
    for(addr=0, y=0; y<384; y++) {
      for(x=0; x<512; x+=8, addr++) {
    144a:	2f 5f       	subi	r18, 0xFF	; 255
    144c:	3f 4f       	sbci	r19, 0xFF	; 255
    144e:	2e 17       	cp	r18, r30
    1450:	3f 07       	cpc	r19, r31
    1452:	09 f0       	breq	.+2      	; 0x1456 <_Z4loopv+0xab6>
    1454:	7c cf       	rjmp	.-264    	; 0x134e <_Z4loopv+0x9ae>
      write_vram(addr, b);
    }
  }

  for(uint8_t i=0; i<20; ++i) {
    for(addr=0, y=0; y<384; y++) {
    1456:	21 15       	cp	r18, r1
    1458:	80 e6       	ldi	r24, 0x60	; 96
    145a:	38 07       	cpc	r19, r24
    145c:	09 f0       	breq	.+2      	; 0x1460 <_Z4loopv+0xac0>
    145e:	74 cf       	rjmp	.-280    	; 0x1348 <_Z4loopv+0x9a8>
    1460:	b1 50       	subi	r27, 0x01	; 1
      }
      write_vram(addr, b);
    }
  }

  for(uint8_t i=0; i<20; ++i) {
    1462:	09 f0       	breq	.+2      	; 0x1466 <_Z4loopv+0xac6>
    1464:	6f cf       	rjmp	.-290    	; 0x1344 <_Z4loopv+0x9a4>
        write_vram(addr, ~read_vram(addr));
      }
    }
  }

  reset_pin(HEARTBEAT_PORT_NAME, HEARTBEAT_PORT_BIT);
    1466:	58 98       	cbi	0x0b, 0	; 11
  set_pin(HEARTBEAT_PORT_NAME, HEARTBEAT_PORT_BIT);
  _delay_ms(500);
  reset_pin(HEARTBEAT_PORT_NAME, HEARTBEAT_PORT_BIT);
  _delay_ms(500);
#endif
}
    1468:	28 96       	adiw	r28, 0x08	; 8
    146a:	0f b6       	in	r0, 0x3f	; 63
    146c:	f8 94       	cli
    146e:	de bf       	out	0x3e, r29	; 62
    1470:	0f be       	out	0x3f, r0	; 63
    1472:	cd bf       	out	0x3d, r28	; 61
    1474:	df 91       	pop	r29
    1476:	cf 91       	pop	r28
    1478:	1f 91       	pop	r17
    147a:	0f 91       	pop	r16
    147c:	ff 90       	pop	r15
    147e:	ef 90       	pop	r14
    1480:	df 90       	pop	r13
    1482:	cf 90       	pop	r12
    1484:	bf 90       	pop	r11
    1486:	af 90       	pop	r10
    1488:	9f 90       	pop	r9
    148a:	8f 90       	pop	r8
    148c:	7f 90       	pop	r7
    148e:	6f 90       	pop	r6
    1490:	5f 90       	pop	r5
    1492:	4f 90       	pop	r4
    1494:	3f 90       	pop	r3
    1496:	2f 90       	pop	r2
    1498:	08 95       	ret

0000149a <main>:

int main() {
  setup();
    149a:	0e 94 7f 04 	call	0x8fe	; 0x8fe <_Z5setupv>

  while(1) { loop(); };
    149e:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <_Z4loopv>
    14a2:	fd cf       	rjmp	.-6      	; 0x149e <main+0x4>

000014a4 <__subsf3>:
    14a4:	50 58       	subi	r21, 0x80	; 128

000014a6 <__addsf3>:
    14a6:	bb 27       	eor	r27, r27
    14a8:	aa 27       	eor	r26, r26
    14aa:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <__addsf3x>
    14ae:	0c 94 3c 0b 	jmp	0x1678	; 0x1678 <__fp_round>
    14b2:	0e 94 2e 0b 	call	0x165c	; 0x165c <__fp_pscA>
    14b6:	38 f0       	brcs	.+14     	; 0x14c6 <__addsf3+0x20>
    14b8:	0e 94 35 0b 	call	0x166a	; 0x166a <__fp_pscB>
    14bc:	20 f0       	brcs	.+8      	; 0x14c6 <__addsf3+0x20>
    14be:	39 f4       	brne	.+14     	; 0x14ce <__addsf3+0x28>
    14c0:	9f 3f       	cpi	r25, 0xFF	; 255
    14c2:	19 f4       	brne	.+6      	; 0x14ca <__addsf3+0x24>
    14c4:	26 f4       	brtc	.+8      	; 0x14ce <__addsf3+0x28>
    14c6:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__fp_nan>
    14ca:	0e f4       	brtc	.+2      	; 0x14ce <__addsf3+0x28>
    14cc:	e0 95       	com	r30
    14ce:	e7 fb       	bst	r30, 7
    14d0:	0c 94 25 0b 	jmp	0x164a	; 0x164a <__fp_inf>

000014d4 <__addsf3x>:
    14d4:	e9 2f       	mov	r30, r25
    14d6:	0e 94 4d 0b 	call	0x169a	; 0x169a <__fp_split3>
    14da:	58 f3       	brcs	.-42     	; 0x14b2 <__addsf3+0xc>
    14dc:	ba 17       	cp	r27, r26
    14de:	62 07       	cpc	r22, r18
    14e0:	73 07       	cpc	r23, r19
    14e2:	84 07       	cpc	r24, r20
    14e4:	95 07       	cpc	r25, r21
    14e6:	20 f0       	brcs	.+8      	; 0x14f0 <__addsf3x+0x1c>
    14e8:	79 f4       	brne	.+30     	; 0x1508 <__addsf3x+0x34>
    14ea:	a6 f5       	brtc	.+104    	; 0x1554 <__addsf3x+0x80>
    14ec:	0c 94 6f 0b 	jmp	0x16de	; 0x16de <__fp_zero>
    14f0:	0e f4       	brtc	.+2      	; 0x14f4 <__addsf3x+0x20>
    14f2:	e0 95       	com	r30
    14f4:	0b 2e       	mov	r0, r27
    14f6:	ba 2f       	mov	r27, r26
    14f8:	a0 2d       	mov	r26, r0
    14fa:	0b 01       	movw	r0, r22
    14fc:	b9 01       	movw	r22, r18
    14fe:	90 01       	movw	r18, r0
    1500:	0c 01       	movw	r0, r24
    1502:	ca 01       	movw	r24, r20
    1504:	a0 01       	movw	r20, r0
    1506:	11 24       	eor	r1, r1
    1508:	ff 27       	eor	r31, r31
    150a:	59 1b       	sub	r21, r25
    150c:	99 f0       	breq	.+38     	; 0x1534 <__addsf3x+0x60>
    150e:	59 3f       	cpi	r21, 0xF9	; 249
    1510:	50 f4       	brcc	.+20     	; 0x1526 <__addsf3x+0x52>
    1512:	50 3e       	cpi	r21, 0xE0	; 224
    1514:	68 f1       	brcs	.+90     	; 0x1570 <__addsf3x+0x9c>
    1516:	1a 16       	cp	r1, r26
    1518:	f0 40       	sbci	r31, 0x00	; 0
    151a:	a2 2f       	mov	r26, r18
    151c:	23 2f       	mov	r18, r19
    151e:	34 2f       	mov	r19, r20
    1520:	44 27       	eor	r20, r20
    1522:	58 5f       	subi	r21, 0xF8	; 248
    1524:	f3 cf       	rjmp	.-26     	; 0x150c <__addsf3x+0x38>
    1526:	46 95       	lsr	r20
    1528:	37 95       	ror	r19
    152a:	27 95       	ror	r18
    152c:	a7 95       	ror	r26
    152e:	f0 40       	sbci	r31, 0x00	; 0
    1530:	53 95       	inc	r21
    1532:	c9 f7       	brne	.-14     	; 0x1526 <__addsf3x+0x52>
    1534:	7e f4       	brtc	.+30     	; 0x1554 <__addsf3x+0x80>
    1536:	1f 16       	cp	r1, r31
    1538:	ba 0b       	sbc	r27, r26
    153a:	62 0b       	sbc	r22, r18
    153c:	73 0b       	sbc	r23, r19
    153e:	84 0b       	sbc	r24, r20
    1540:	ba f0       	brmi	.+46     	; 0x1570 <__addsf3x+0x9c>
    1542:	91 50       	subi	r25, 0x01	; 1
    1544:	a1 f0       	breq	.+40     	; 0x156e <__addsf3x+0x9a>
    1546:	ff 0f       	add	r31, r31
    1548:	bb 1f       	adc	r27, r27
    154a:	66 1f       	adc	r22, r22
    154c:	77 1f       	adc	r23, r23
    154e:	88 1f       	adc	r24, r24
    1550:	c2 f7       	brpl	.-16     	; 0x1542 <__addsf3x+0x6e>
    1552:	0e c0       	rjmp	.+28     	; 0x1570 <__addsf3x+0x9c>
    1554:	ba 0f       	add	r27, r26
    1556:	62 1f       	adc	r22, r18
    1558:	73 1f       	adc	r23, r19
    155a:	84 1f       	adc	r24, r20
    155c:	48 f4       	brcc	.+18     	; 0x1570 <__addsf3x+0x9c>
    155e:	87 95       	ror	r24
    1560:	77 95       	ror	r23
    1562:	67 95       	ror	r22
    1564:	b7 95       	ror	r27
    1566:	f7 95       	ror	r31
    1568:	9e 3f       	cpi	r25, 0xFE	; 254
    156a:	08 f0       	brcs	.+2      	; 0x156e <__addsf3x+0x9a>
    156c:	b0 cf       	rjmp	.-160    	; 0x14ce <__addsf3+0x28>
    156e:	93 95       	inc	r25
    1570:	88 0f       	add	r24, r24
    1572:	08 f0       	brcs	.+2      	; 0x1576 <__addsf3x+0xa2>
    1574:	99 27       	eor	r25, r25
    1576:	ee 0f       	add	r30, r30
    1578:	97 95       	ror	r25
    157a:	87 95       	ror	r24
    157c:	08 95       	ret

0000157e <__cmpsf2>:
    157e:	0e 94 01 0b 	call	0x1602	; 0x1602 <__fp_cmp>
    1582:	08 f4       	brcc	.+2      	; 0x1586 <__cmpsf2+0x8>
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	08 95       	ret

00001588 <__floatunsisf>:
    1588:	e8 94       	clt
    158a:	09 c0       	rjmp	.+18     	; 0x159e <__floatsisf+0x12>

0000158c <__floatsisf>:
    158c:	97 fb       	bst	r25, 7
    158e:	3e f4       	brtc	.+14     	; 0x159e <__floatsisf+0x12>
    1590:	90 95       	com	r25
    1592:	80 95       	com	r24
    1594:	70 95       	com	r23
    1596:	61 95       	neg	r22
    1598:	7f 4f       	sbci	r23, 0xFF	; 255
    159a:	8f 4f       	sbci	r24, 0xFF	; 255
    159c:	9f 4f       	sbci	r25, 0xFF	; 255
    159e:	99 23       	and	r25, r25
    15a0:	a9 f0       	breq	.+42     	; 0x15cc <__floatsisf+0x40>
    15a2:	f9 2f       	mov	r31, r25
    15a4:	96 e9       	ldi	r25, 0x96	; 150
    15a6:	bb 27       	eor	r27, r27
    15a8:	93 95       	inc	r25
    15aa:	f6 95       	lsr	r31
    15ac:	87 95       	ror	r24
    15ae:	77 95       	ror	r23
    15b0:	67 95       	ror	r22
    15b2:	b7 95       	ror	r27
    15b4:	f1 11       	cpse	r31, r1
    15b6:	f8 cf       	rjmp	.-16     	; 0x15a8 <__floatsisf+0x1c>
    15b8:	fa f4       	brpl	.+62     	; 0x15f8 <__floatsisf+0x6c>
    15ba:	bb 0f       	add	r27, r27
    15bc:	11 f4       	brne	.+4      	; 0x15c2 <__floatsisf+0x36>
    15be:	60 ff       	sbrs	r22, 0
    15c0:	1b c0       	rjmp	.+54     	; 0x15f8 <__floatsisf+0x6c>
    15c2:	6f 5f       	subi	r22, 0xFF	; 255
    15c4:	7f 4f       	sbci	r23, 0xFF	; 255
    15c6:	8f 4f       	sbci	r24, 0xFF	; 255
    15c8:	9f 4f       	sbci	r25, 0xFF	; 255
    15ca:	16 c0       	rjmp	.+44     	; 0x15f8 <__floatsisf+0x6c>
    15cc:	88 23       	and	r24, r24
    15ce:	11 f0       	breq	.+4      	; 0x15d4 <__floatsisf+0x48>
    15d0:	96 e9       	ldi	r25, 0x96	; 150
    15d2:	11 c0       	rjmp	.+34     	; 0x15f6 <__floatsisf+0x6a>
    15d4:	77 23       	and	r23, r23
    15d6:	21 f0       	breq	.+8      	; 0x15e0 <__floatsisf+0x54>
    15d8:	9e e8       	ldi	r25, 0x8E	; 142
    15da:	87 2f       	mov	r24, r23
    15dc:	76 2f       	mov	r23, r22
    15de:	05 c0       	rjmp	.+10     	; 0x15ea <__floatsisf+0x5e>
    15e0:	66 23       	and	r22, r22
    15e2:	71 f0       	breq	.+28     	; 0x1600 <__floatsisf+0x74>
    15e4:	96 e8       	ldi	r25, 0x86	; 134
    15e6:	86 2f       	mov	r24, r22
    15e8:	70 e0       	ldi	r23, 0x00	; 0
    15ea:	60 e0       	ldi	r22, 0x00	; 0
    15ec:	2a f0       	brmi	.+10     	; 0x15f8 <__floatsisf+0x6c>
    15ee:	9a 95       	dec	r25
    15f0:	66 0f       	add	r22, r22
    15f2:	77 1f       	adc	r23, r23
    15f4:	88 1f       	adc	r24, r24
    15f6:	da f7       	brpl	.-10     	; 0x15ee <__floatsisf+0x62>
    15f8:	88 0f       	add	r24, r24
    15fa:	96 95       	lsr	r25
    15fc:	87 95       	ror	r24
    15fe:	97 f9       	bld	r25, 7
    1600:	08 95       	ret

00001602 <__fp_cmp>:
    1602:	99 0f       	add	r25, r25
    1604:	00 08       	sbc	r0, r0
    1606:	55 0f       	add	r21, r21
    1608:	aa 0b       	sbc	r26, r26
    160a:	e0 e8       	ldi	r30, 0x80	; 128
    160c:	fe ef       	ldi	r31, 0xFE	; 254
    160e:	16 16       	cp	r1, r22
    1610:	17 06       	cpc	r1, r23
    1612:	e8 07       	cpc	r30, r24
    1614:	f9 07       	cpc	r31, r25
    1616:	c0 f0       	brcs	.+48     	; 0x1648 <__fp_cmp+0x46>
    1618:	12 16       	cp	r1, r18
    161a:	13 06       	cpc	r1, r19
    161c:	e4 07       	cpc	r30, r20
    161e:	f5 07       	cpc	r31, r21
    1620:	98 f0       	brcs	.+38     	; 0x1648 <__fp_cmp+0x46>
    1622:	62 1b       	sub	r22, r18
    1624:	73 0b       	sbc	r23, r19
    1626:	84 0b       	sbc	r24, r20
    1628:	95 0b       	sbc	r25, r21
    162a:	39 f4       	brne	.+14     	; 0x163a <__fp_cmp+0x38>
    162c:	0a 26       	eor	r0, r26
    162e:	61 f0       	breq	.+24     	; 0x1648 <__fp_cmp+0x46>
    1630:	23 2b       	or	r18, r19
    1632:	24 2b       	or	r18, r20
    1634:	25 2b       	or	r18, r21
    1636:	21 f4       	brne	.+8      	; 0x1640 <__fp_cmp+0x3e>
    1638:	08 95       	ret
    163a:	0a 26       	eor	r0, r26
    163c:	09 f4       	brne	.+2      	; 0x1640 <__fp_cmp+0x3e>
    163e:	a1 40       	sbci	r26, 0x01	; 1
    1640:	a6 95       	lsr	r26
    1642:	8f ef       	ldi	r24, 0xFF	; 255
    1644:	81 1d       	adc	r24, r1
    1646:	81 1d       	adc	r24, r1
    1648:	08 95       	ret

0000164a <__fp_inf>:
    164a:	97 f9       	bld	r25, 7
    164c:	9f 67       	ori	r25, 0x7F	; 127
    164e:	80 e8       	ldi	r24, 0x80	; 128
    1650:	70 e0       	ldi	r23, 0x00	; 0
    1652:	60 e0       	ldi	r22, 0x00	; 0
    1654:	08 95       	ret

00001656 <__fp_nan>:
    1656:	9f ef       	ldi	r25, 0xFF	; 255
    1658:	80 ec       	ldi	r24, 0xC0	; 192
    165a:	08 95       	ret

0000165c <__fp_pscA>:
    165c:	00 24       	eor	r0, r0
    165e:	0a 94       	dec	r0
    1660:	16 16       	cp	r1, r22
    1662:	17 06       	cpc	r1, r23
    1664:	18 06       	cpc	r1, r24
    1666:	09 06       	cpc	r0, r25
    1668:	08 95       	ret

0000166a <__fp_pscB>:
    166a:	00 24       	eor	r0, r0
    166c:	0a 94       	dec	r0
    166e:	12 16       	cp	r1, r18
    1670:	13 06       	cpc	r1, r19
    1672:	14 06       	cpc	r1, r20
    1674:	05 06       	cpc	r0, r21
    1676:	08 95       	ret

00001678 <__fp_round>:
    1678:	09 2e       	mov	r0, r25
    167a:	03 94       	inc	r0
    167c:	00 0c       	add	r0, r0
    167e:	11 f4       	brne	.+4      	; 0x1684 <__fp_round+0xc>
    1680:	88 23       	and	r24, r24
    1682:	52 f0       	brmi	.+20     	; 0x1698 <__fp_round+0x20>
    1684:	bb 0f       	add	r27, r27
    1686:	40 f4       	brcc	.+16     	; 0x1698 <__fp_round+0x20>
    1688:	bf 2b       	or	r27, r31
    168a:	11 f4       	brne	.+4      	; 0x1690 <__fp_round+0x18>
    168c:	60 ff       	sbrs	r22, 0
    168e:	04 c0       	rjmp	.+8      	; 0x1698 <__fp_round+0x20>
    1690:	6f 5f       	subi	r22, 0xFF	; 255
    1692:	7f 4f       	sbci	r23, 0xFF	; 255
    1694:	8f 4f       	sbci	r24, 0xFF	; 255
    1696:	9f 4f       	sbci	r25, 0xFF	; 255
    1698:	08 95       	ret

0000169a <__fp_split3>:
    169a:	57 fd       	sbrc	r21, 7
    169c:	90 58       	subi	r25, 0x80	; 128
    169e:	44 0f       	add	r20, r20
    16a0:	55 1f       	adc	r21, r21
    16a2:	59 f0       	breq	.+22     	; 0x16ba <__fp_splitA+0x10>
    16a4:	5f 3f       	cpi	r21, 0xFF	; 255
    16a6:	71 f0       	breq	.+28     	; 0x16c4 <__fp_splitA+0x1a>
    16a8:	47 95       	ror	r20

000016aa <__fp_splitA>:
    16aa:	88 0f       	add	r24, r24
    16ac:	97 fb       	bst	r25, 7
    16ae:	99 1f       	adc	r25, r25
    16b0:	61 f0       	breq	.+24     	; 0x16ca <__fp_splitA+0x20>
    16b2:	9f 3f       	cpi	r25, 0xFF	; 255
    16b4:	79 f0       	breq	.+30     	; 0x16d4 <__fp_splitA+0x2a>
    16b6:	87 95       	ror	r24
    16b8:	08 95       	ret
    16ba:	12 16       	cp	r1, r18
    16bc:	13 06       	cpc	r1, r19
    16be:	14 06       	cpc	r1, r20
    16c0:	55 1f       	adc	r21, r21
    16c2:	f2 cf       	rjmp	.-28     	; 0x16a8 <__fp_split3+0xe>
    16c4:	46 95       	lsr	r20
    16c6:	f1 df       	rcall	.-30     	; 0x16aa <__fp_splitA>
    16c8:	08 c0       	rjmp	.+16     	; 0x16da <__fp_splitA+0x30>
    16ca:	16 16       	cp	r1, r22
    16cc:	17 06       	cpc	r1, r23
    16ce:	18 06       	cpc	r1, r24
    16d0:	99 1f       	adc	r25, r25
    16d2:	f1 cf       	rjmp	.-30     	; 0x16b6 <__fp_splitA+0xc>
    16d4:	86 95       	lsr	r24
    16d6:	71 05       	cpc	r23, r1
    16d8:	61 05       	cpc	r22, r1
    16da:	08 94       	sec
    16dc:	08 95       	ret

000016de <__fp_zero>:
    16de:	e8 94       	clt

000016e0 <__fp_szero>:
    16e0:	bb 27       	eor	r27, r27
    16e2:	66 27       	eor	r22, r22
    16e4:	77 27       	eor	r23, r23
    16e6:	cb 01       	movw	r24, r22
    16e8:	97 f9       	bld	r25, 7
    16ea:	08 95       	ret

000016ec <__mulsf3>:
    16ec:	0e 94 89 0b 	call	0x1712	; 0x1712 <__mulsf3x>
    16f0:	0c 94 3c 0b 	jmp	0x1678	; 0x1678 <__fp_round>
    16f4:	0e 94 2e 0b 	call	0x165c	; 0x165c <__fp_pscA>
    16f8:	38 f0       	brcs	.+14     	; 0x1708 <__mulsf3+0x1c>
    16fa:	0e 94 35 0b 	call	0x166a	; 0x166a <__fp_pscB>
    16fe:	20 f0       	brcs	.+8      	; 0x1708 <__mulsf3+0x1c>
    1700:	95 23       	and	r25, r21
    1702:	11 f0       	breq	.+4      	; 0x1708 <__mulsf3+0x1c>
    1704:	0c 94 25 0b 	jmp	0x164a	; 0x164a <__fp_inf>
    1708:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__fp_nan>
    170c:	11 24       	eor	r1, r1
    170e:	0c 94 70 0b 	jmp	0x16e0	; 0x16e0 <__fp_szero>

00001712 <__mulsf3x>:
    1712:	0e 94 4d 0b 	call	0x169a	; 0x169a <__fp_split3>
    1716:	70 f3       	brcs	.-36     	; 0x16f4 <__mulsf3+0x8>

00001718 <__mulsf3_pse>:
    1718:	95 9f       	mul	r25, r21
    171a:	c1 f3       	breq	.-16     	; 0x170c <__mulsf3+0x20>
    171c:	95 0f       	add	r25, r21
    171e:	50 e0       	ldi	r21, 0x00	; 0
    1720:	55 1f       	adc	r21, r21
    1722:	62 9f       	mul	r22, r18
    1724:	f0 01       	movw	r30, r0
    1726:	72 9f       	mul	r23, r18
    1728:	bb 27       	eor	r27, r27
    172a:	f0 0d       	add	r31, r0
    172c:	b1 1d       	adc	r27, r1
    172e:	63 9f       	mul	r22, r19
    1730:	aa 27       	eor	r26, r26
    1732:	f0 0d       	add	r31, r0
    1734:	b1 1d       	adc	r27, r1
    1736:	aa 1f       	adc	r26, r26
    1738:	64 9f       	mul	r22, r20
    173a:	66 27       	eor	r22, r22
    173c:	b0 0d       	add	r27, r0
    173e:	a1 1d       	adc	r26, r1
    1740:	66 1f       	adc	r22, r22
    1742:	82 9f       	mul	r24, r18
    1744:	22 27       	eor	r18, r18
    1746:	b0 0d       	add	r27, r0
    1748:	a1 1d       	adc	r26, r1
    174a:	62 1f       	adc	r22, r18
    174c:	73 9f       	mul	r23, r19
    174e:	b0 0d       	add	r27, r0
    1750:	a1 1d       	adc	r26, r1
    1752:	62 1f       	adc	r22, r18
    1754:	83 9f       	mul	r24, r19
    1756:	a0 0d       	add	r26, r0
    1758:	61 1d       	adc	r22, r1
    175a:	22 1f       	adc	r18, r18
    175c:	74 9f       	mul	r23, r20
    175e:	33 27       	eor	r19, r19
    1760:	a0 0d       	add	r26, r0
    1762:	61 1d       	adc	r22, r1
    1764:	23 1f       	adc	r18, r19
    1766:	84 9f       	mul	r24, r20
    1768:	60 0d       	add	r22, r0
    176a:	21 1d       	adc	r18, r1
    176c:	82 2f       	mov	r24, r18
    176e:	76 2f       	mov	r23, r22
    1770:	6a 2f       	mov	r22, r26
    1772:	11 24       	eor	r1, r1
    1774:	9f 57       	subi	r25, 0x7F	; 127
    1776:	50 40       	sbci	r21, 0x00	; 0
    1778:	9a f0       	brmi	.+38     	; 0x17a0 <__mulsf3_pse+0x88>
    177a:	f1 f0       	breq	.+60     	; 0x17b8 <__mulsf3_pse+0xa0>
    177c:	88 23       	and	r24, r24
    177e:	4a f0       	brmi	.+18     	; 0x1792 <__mulsf3_pse+0x7a>
    1780:	ee 0f       	add	r30, r30
    1782:	ff 1f       	adc	r31, r31
    1784:	bb 1f       	adc	r27, r27
    1786:	66 1f       	adc	r22, r22
    1788:	77 1f       	adc	r23, r23
    178a:	88 1f       	adc	r24, r24
    178c:	91 50       	subi	r25, 0x01	; 1
    178e:	50 40       	sbci	r21, 0x00	; 0
    1790:	a9 f7       	brne	.-22     	; 0x177c <__mulsf3_pse+0x64>
    1792:	9e 3f       	cpi	r25, 0xFE	; 254
    1794:	51 05       	cpc	r21, r1
    1796:	80 f0       	brcs	.+32     	; 0x17b8 <__mulsf3_pse+0xa0>
    1798:	0c 94 25 0b 	jmp	0x164a	; 0x164a <__fp_inf>
    179c:	0c 94 70 0b 	jmp	0x16e0	; 0x16e0 <__fp_szero>
    17a0:	5f 3f       	cpi	r21, 0xFF	; 255
    17a2:	e4 f3       	brlt	.-8      	; 0x179c <__mulsf3_pse+0x84>
    17a4:	98 3e       	cpi	r25, 0xE8	; 232
    17a6:	d4 f3       	brlt	.-12     	; 0x179c <__mulsf3_pse+0x84>
    17a8:	86 95       	lsr	r24
    17aa:	77 95       	ror	r23
    17ac:	67 95       	ror	r22
    17ae:	b7 95       	ror	r27
    17b0:	f7 95       	ror	r31
    17b2:	e7 95       	ror	r30
    17b4:	9f 5f       	subi	r25, 0xFF	; 255
    17b6:	c1 f7       	brne	.-16     	; 0x17a8 <__mulsf3_pse+0x90>
    17b8:	fe 2b       	or	r31, r30
    17ba:	88 0f       	add	r24, r24
    17bc:	91 1d       	adc	r25, r1
    17be:	96 95       	lsr	r25
    17c0:	87 95       	ror	r24
    17c2:	97 f9       	bld	r25, 7
    17c4:	08 95       	ret

000017c6 <_exit>:
    17c6:	f8 94       	cli

000017c8 <__stop_program>:
    17c8:	ff cf       	rjmp	.-2      	; 0x17c8 <__stop_program>
