   1               		.file	"timings.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
 115               	.global	__vector_16
 117               	__vector_16:
 118               		.stabd	46,0,0
   1:timings.c     **** #include <avr/io.h>
   2:timings.c     **** #include <avr/interrupt.h>
   3:timings.c     **** #include <stdint.h>
   4:timings.c     **** #include <stdlib.h>
   5:timings.c     **** 
   6:timings.c     **** // VGA timing generator.
   7:timings.c     **** //
   8:timings.c     **** // Output HSYNC, VSYNC, and VISB signals.
   9:timings.c     **** 
  10:timings.c     **** // Pin assignment - ATMEGA328P
  11:timings.c     **** #define HSYNC_PORT_BIT  5   // =OC0B, pin 11, fixed by hardware
  12:timings.c     **** #define HSYNC_PORT_NAME D
  13:timings.c     **** #define VISB_PORT_BIT    3   // =OC2B, pin 5, fixed by hardware
  14:timings.c     **** #define VISB_PORT_NAME   D
  15:timings.c     **** #define VSYNC_PORT_BIT  2   // =OC1B, pin 16, fixed by hardware
  16:timings.c     **** #define VSYNC_PORT_NAME B
  17:timings.c     **** 
  18:timings.c     **** #define HEARTBEAT_PORT_BIT  0   // pin 2, free choice
  19:timings.c     **** #define HEARTBEAT_PORT_NAME D
  20:timings.c     **** 
  21:timings.c     **** // Free choices:
  22:timings.c     **** 
  23:timings.c     **** #define WRB_PORT_BIT 2  // pin 4
  24:timings.c     **** #define WRB_PORT_NAME D
  25:timings.c     **** #define DSB_PORT_BIT 4  // pin 6
  26:timings.c     **** #define DSB_PORT_NAME D
  27:timings.c     **** #define A0_PORT_BIT 0  // pin 14
  28:timings.c     **** #define A0_PORT_NAME B
  29:timings.c     **** #define A1_PORT_BIT 1  // pin 15
  30:timings.c     **** #define A1_PORT_NAME B
  31:timings.c     **** #define WAITB_PORT_BIT 1  // pin 3
  32:timings.c     **** #define WAITB_PORT_NAME D
  33:timings.c     **** 
  34:timings.c     **** // Define constant to 1 if should bit-bang CPU bus
  35:timings.c     **** #define DEMO_MODE 1
  36:timings.c     **** 
  37:timings.c     **** #if 0
  38:timings.c     **** // 640x480 VGA @ 60Hz
  39:timings.c     **** const double dot_clock_freq       = 25.175;           // MHz
  40:timings.c     **** const int h_visible_area          = 640;              // pixels
  41:timings.c     **** const int h_front_porch           = 16;               // pixels
  42:timings.c     **** const int h_sync_width            = 96;               // pixels
  43:timings.c     **** const int h_back_porch            = 48;               // pixels
  44:timings.c     **** const int h_polarity              = -1;               // sign
  45:timings.c     **** 
  46:timings.c     **** const int v_visible_area          = 480;              // lines
  47:timings.c     **** const int v_front_porch           = 10;               // lines
  48:timings.c     **** const int v_sync_width            = 2;                // lines
  49:timings.c     **** const int v_back_porch            = 33;               // lines
  50:timings.c     **** const int v_polarity              = -1;               // sign
  51:timings.c     **** #endif
  52:timings.c     **** 
  53:timings.c     **** #if 0
  54:timings.c     **** // 640x408 VGA @ 60Hz centred in 640x480 window
  55:timings.c     **** const double dot_clock_freq       = 25.175;           // MHz
  56:timings.c     **** const int h_visible_area          = 640;              // pixels
  57:timings.c     **** const int h_front_porch           = 16;               // pixels
  58:timings.c     **** const int h_sync_width            = 96;               // pixels
  59:timings.c     **** const int h_back_porch            = 48;               // pixels
  60:timings.c     **** const int h_polarity              = -1;               // sign
  61:timings.c     **** 
  62:timings.c     **** const int v_visible_area          = 408;              // lines
  63:timings.c     **** const int v_front_porch           = 46;               // lines
  64:timings.c     **** const int v_sync_width            = 2;                // lines
  65:timings.c     **** const int v_back_porch            = 69;               // lines
  66:timings.c     **** const int v_polarity              = -1;               // sign
  67:timings.c     **** #endif
  68:timings.c     **** 
  69:timings.c     **** #if 0
  70:timings.c     **** // 800x600 SVGA
  71:timings.c     **** const double dot_clock_freq       = 40;               // MHz
  72:timings.c     **** const int h_visible_area          = 800;              // pixels
  73:timings.c     **** const int h_front_porch           = 40;               // pixels
  74:timings.c     **** const int h_sync_width            = 128;              // pixels
  75:timings.c     **** const int h_back_porch            = 88;               // pixels
  76:timings.c     **** const int h_polarity              = +1;               // sign
  77:timings.c     **** 
  78:timings.c     **** const int v_visible_area          = 600;              // lines
  79:timings.c     **** const int v_front_porch           = 1;                // lines
  80:timings.c     **** const int v_sync_width            = 4;                // lines
  81:timings.c     **** const int v_back_porch            = 23;               // lines
  82:timings.c     **** const int v_polarity              = +1;               // sign
  83:timings.c     **** #endif
  84:timings.c     **** 
  85:timings.c     **** #if 1
  86:timings.c     **** // 1024x768 XGA with half dot clock
  87:timings.c     **** // FIXME: need actual oscillator at this freq
  88:timings.c     **** //const double dot_clock_freq       = 32;               // MHz
  89:timings.c     **** const double dot_clock_freq       = 25.175;           // MHz
  90:timings.c     **** const int h_visible_area          = 1024/2;           // pixels
  91:timings.c     **** const int h_front_porch           = 24/2;             // pixels
  92:timings.c     **** const int h_sync_width            = 136/2;            // pixels
  93:timings.c     **** const int h_back_porch            = 160/2;            // pixels
  94:timings.c     **** const int h_polarity              = -1;               // sign
  95:timings.c     **** 
  96:timings.c     **** const int v_visible_area          = 768;              // lines
  97:timings.c     **** const int v_front_porch           = 3;                // lines
  98:timings.c     **** const int v_sync_width            = 6;                // lines
  99:timings.c     **** const int v_back_porch            = 29;               // lines
 100:timings.c     **** const int v_polarity              = -1;               // sign
 101:timings.c     **** #endif
 102:timings.c     **** 
 103:timings.c     **** // Derived timings
 104:timings.c     **** const double h_visible_area_t     = h_visible_area / dot_clock_freq;  // µs
 105:timings.c     **** const double h_front_porch_t      = h_front_porch / dot_clock_freq;   // µs
 106:timings.c     **** const double h_sync_width_t       = h_sync_width / dot_clock_freq;    // µs
 107:timings.c     **** const double h_back_porch_t       = h_back_porch / dot_clock_freq;    // µs
 108:timings.c     **** 
 109:timings.c     **** const double hvis_inactive_width  =
 110:timings.c     ****     h_sync_width_t + h_front_porch_t + h_back_porch_t;
 111:timings.c     **** const double hvis_inactive_offset =
 112:timings.c     ****     0.5 * (h_back_porch_t - h_front_porch_t);
 113:timings.c     **** const double whole_line           =
 114:timings.c     ****     h_visible_area_t + h_front_porch_t + h_sync_width_t + h_back_porch_t;
 115:timings.c     **** const uint16_t whole_frame             =
 116:timings.c     ****     v_visible_area + v_front_porch + v_sync_width + v_back_porch;
 117:timings.c     **** 
 118:timings.c     **** // Counter timer
 119:timings.c     **** const double timer_freq           = dot_clock_freq / 2;   // MHz
 120:timings.c     **** 
 121:timings.c     **** // CPU frequency is half the dot clock
 122:timings.c     **** #define F_CPU (unsigned long)((dot_clock_freq / 2) * 1e6)
 123:timings.c     **** 
 124:timings.c     **** #define PASTER(x,y) x ## y
 125:timings.c     **** #define EVALUATOR(x, y) PASTER(x, y)
 126:timings.c     **** 
 127:timings.c     **** #define set_pin_output(port_name, port_bit) do { \
 128:timings.c     ****   EVALUATOR(DDR, port_name) |= _BV(EVALUATOR(PORT, EVALUATOR(port_name, port_bit))); \
 129:timings.c     **** } while(0)
 130:timings.c     **** 
 131:timings.c     **** #define set_pin(port_name, port_bit) do { \
 132:timings.c     ****   EVALUATOR(PORT, port_name) |= _BV(EVALUATOR(PORT, EVALUATOR(port_name, port_bit))); \
 133:timings.c     **** } while(0)
 134:timings.c     **** 
 135:timings.c     **** #define reset_pin(port_name, port_bit) do { \
 136:timings.c     ****   EVALUATOR(PORT, port_name) &= ~_BV(EVALUATOR(PORT, EVALUATOR(port_name, port_bit))); \
 137:timings.c     **** } while(0)
 138:timings.c     **** 
 139:timings.c     **** #define read_pin(port_name, port_bit) (EVALUATOR(PIN, port_name) & _BV(EVALUATOR(PIN, EVALUATOR(por
 140:timings.c     **** 
 141:timings.c     **** #if DEMO_MODE
 142:timings.c     **** // As F_CPU is set, we can include the delay utilities.
 143:timings.c     **** #include <util/delay.h>
 144:timings.c     **** #include <avr/pgmspace.h>
 145:timings.c     **** #include "font/font.h"
 146:timings.c     **** #endif
 147:timings.c     **** 
 148:timings.c     **** // Called around the middle of the HSYNC pulse which will be after TCNT1 update.
 149:timings.c     **** // Use the value of TCNT1 (the row counter) to determine if the VISB pulse
 150:timings.c     **** // should be enabled for this line.
 151:timings.c     **** ISR(TIMER0_OVF_vect) {
 120               	.LM0:
 121               	.LFBB1:
 122 0000 1F92      		push r1
 123 0002 0F92      		push r0
 124 0004 0FB6      		in r0,__SREG__
 125 0006 0F92      		push r0
 126 0008 1124      		clr __zero_reg__
 127 000a 2F93      		push r18
 128 000c 8F93      		push r24
 129 000e 9F93      		push r25
 130               	/* prologue: Signal */
 131               	/* frame size = 0 */
 132               	/* stack size = 6 */
 133               	.L__stack_usage = 6
 152:timings.c     ****   // Note: TCNT1 == 0 implies start of VSYNC pulse which explains why all of
 153:timings.c     ****   // these values are offset by v_front_porch.
 154:timings.c     ****   switch(TCNT1) {
 135               	.LM1:
 136 0010 8091 8400 		lds r24,132
 137 0014 9091 8500 		lds r25,132+1
 138 0018 8332      		cpi r24,35
 139 001a 9105      		cpc r25,__zero_reg__
 140 001c 01F0      		breq .L3
 141 001e 8332      		cpi r24,35
 142 0020 9340      		sbci r25,3
 143 0022 01F4      		brne .L1
 155:timings.c     ****     case v_sync_width + v_back_porch:
 156:timings.c     ****       // Enable VISB pulse output for this line
 157:timings.c     ****       TCCR2A |= (_BV(COM2B1));
 158:timings.c     ****       break;
 159:timings.c     ****     case v_sync_width + v_back_porch + v_visible_area:
 160:timings.c     ****       // Disable VISB pulse output for this line
 161:timings.c     ****       TCCR2A &= ~(_BV(COM2B1));
 145               	.LM2:
 146 0024 8091 B000 		lds r24,176
 147 0028 8F7D      		andi r24,lo8(-33)
 148 002a 8093 B000 		sts 176,r24
 149               	.L1:
 150               	/* epilogue start */
 162:timings.c     ****       break;
 163:timings.c     ****   }
 164:timings.c     **** }
 152               	.LM3:
 153 002e 9F91      		pop r25
 154 0030 8F91      		pop r24
 155 0032 2F91      		pop r18
 156 0034 0F90      		pop r0
 157 0036 0FBE      		out __SREG__,r0
 158 0038 0F90      		pop r0
 159 003a 1F90      		pop r1
 160 003c 1895      		reti
 161               	.L3:
 157:timings.c     ****       break;
 163               	.LM4:
 164 003e 8091 B000 		lds r24,176
 165 0042 8062      		ori r24,lo8(32)
 166 0044 8093 B000 		sts 176,r24
 167               	/* epilogue start */
 169               	.LM5:
 170 0048 9F91      		pop r25
 171 004a 8F91      		pop r24
 172 004c 2F91      		pop r18
 173 004e 0F90      		pop r0
 174 0050 0FBE      		out __SREG__,r0
 175 0052 0F90      		pop r0
 176 0054 1F90      		pop r1
 177 0056 1895      		reti
 179               	.Lscope1:
 181               		.stabd	78,0,0
 183               	.global	_Z5setupv
 185               	_Z5setupv:
 186               		.stabd	46,0,0
 165:timings.c     **** 
 166:timings.c     **** inline void set_databus_is_output(bool output) {
 167:timings.c     ****   if(output) {
 168:timings.c     ****     DDRC |= 0x3F;
 169:timings.c     ****     DDRD |= 0xC0;
 170:timings.c     ****   } else {
 171:timings.c     ****     DDRC &= ~0x3F;
 172:timings.c     ****     DDRD &= ~0xC0;
 173:timings.c     ****   }
 174:timings.c     **** }
 175:timings.c     **** 
 176:timings.c     **** inline void write_data(uint8_t data) {
 177:timings.c     ****   PORTC &= ~0x3F;
 178:timings.c     ****   PORTC |= data & 0x3F;
 179:timings.c     ****   PORTD &= ~0xC0;
 180:timings.c     ****   PORTD |= data & 0xC0;
 181:timings.c     **** }
 182:timings.c     **** 
 183:timings.c     **** inline uint8_t read_data() {
 184:timings.c     ****   set_databus_is_output(false);
 185:timings.c     ****   uint8_t val = (PINC & 0x3F) | (PIND & 0xC0);
 186:timings.c     ****   set_databus_is_output(true);
 187:timings.c     ****   return val;
 188:timings.c     **** }
 189:timings.c     **** 
 190:timings.c     **** inline void set_addr(uint8_t addr) {
 191:timings.c     ****   if(addr & 0x1) {
 192:timings.c     ****     set_pin(A0_PORT_NAME, A0_PORT_BIT);
 193:timings.c     ****   } else {
 194:timings.c     ****     reset_pin(A0_PORT_NAME, A0_PORT_BIT);
 195:timings.c     ****   }
 196:timings.c     **** 
 197:timings.c     ****   if(addr & 0x2) {
 198:timings.c     ****     set_pin(A1_PORT_NAME, A1_PORT_BIT);
 199:timings.c     ****   } else {
 200:timings.c     ****     reset_pin(A1_PORT_NAME, A1_PORT_BIT);
 201:timings.c     ****   }
 202:timings.c     **** }
 203:timings.c     **** 
 204:timings.c     **** inline void write(uint8_t addr, uint8_t data) {
 205:timings.c     ****   set_addr(addr);
 206:timings.c     ****   write_data(data);
 207:timings.c     **** 
 208:timings.c     ****   // it is important that the WRB pin be stable *before* DSB goes low.
 209:timings.c     ****   reset_pin(WRB_PORT_NAME, WRB_PORT_BIT);
 210:timings.c     ****   reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
 211:timings.c     ****   // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
 212:timings.c     ****   set_pin(DSB_PORT_NAME, DSB_PORT_BIT);
 213:timings.c     ****   set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
 214:timings.c     **** }
 215:timings.c     **** 
 216:timings.c     **** inline uint8_t read(uint8_t addr) {
 217:timings.c     ****   set_addr(addr);
 218:timings.c     **** 
 219:timings.c     ****   set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
 220:timings.c     ****   reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
 221:timings.c     ****   // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
 222:timings.c     ****   uint8_t val = read_data();
 223:timings.c     ****   set_pin(DSB_PORT_NAME, DSB_PORT_BIT);
 224:timings.c     **** 
 225:timings.c     ****   return val;
 226:timings.c     **** }
 227:timings.c     **** 
 228:timings.c     **** inline void write_vram(uint16_t addr, uint8_t value) {
 229:timings.c     ****   write(0, addr & 0xFF);
 230:timings.c     ****   write(1, (addr >> 8) & 0xFF);
 231:timings.c     ****   write(2, value);
 232:timings.c     **** }
 233:timings.c     **** 
 234:timings.c     **** inline uint8_t read_vram(uint16_t addr) {
 235:timings.c     ****   write(0, addr & 0xFF);
 236:timings.c     ****   write(1, (addr >> 8) & 0xFF);
 237:timings.c     ****   return read(2);
 238:timings.c     **** }
 239:timings.c     **** 
 240:timings.c     **** static uint8_t cursor_x = 0, cursor_y = 0;
 241:timings.c     **** static bool inverse_text = false;
 242:timings.c     **** static bool scroll_enabled = true;
 243:timings.c     **** 
 244:timings.c     **** inline void scroll_up() {
 245:timings.c     ****   uint16_t addr=0;
 246:timings.c     ****   for(; addr<(64*47*8); ++addr) {
 247:timings.c     ****     write_vram(addr, read_vram(addr + (64*8)));
 248:timings.c     ****   }
 249:timings.c     ****   for(; addr<(64*48*8); ++addr) {
 250:timings.c     ****     write_vram(addr, 0x00);
 251:timings.c     ****   }
 252:timings.c     **** }
 253:timings.c     **** 
 254:timings.c     **** inline void print_at(uint8_t x, uint8_t y, uint8_t ch) {
 255:timings.c     ****   uint16_t addr = ((uint16_t)(y) << (6+3)) + ((uint16_t)x);
 256:timings.c     ****   uint16_t font_addr = ((uint16_t)(ch)<<3);
 257:timings.c     ****   for(int r=0; r<8; ++r, addr+=64, font_addr++) {
 258:timings.c     ****     uint8_t row = pgm_read_byte(&(font[font_addr]));
 259:timings.c     ****     write_vram(addr, inverse_text ? ~row : row);
 260:timings.c     ****   }
 261:timings.c     **** }
 262:timings.c     **** 
 263:timings.c     **** inline void putc(uint8_t ch) {
 264:timings.c     ****   print_at(cursor_x, cursor_y, ch);
 265:timings.c     ****   cursor_x += 1;
 266:timings.c     ****   if(cursor_x == 64) { cursor_x = 0; cursor_y += 1; }
 267:timings.c     ****   if(cursor_y == 48) {
 268:timings.c     ****     if(scroll_enabled) {
 269:timings.c     ****       scroll_up(); cursor_y = 47;
 270:timings.c     ****     } else {
 271:timings.c     ****       cursor_x = 63; cursor_y = 47;
 272:timings.c     ****     }
 273:timings.c     ****   }
 274:timings.c     **** }
 275:timings.c     **** 
 276:timings.c     **** inline void puts(const void* s) {
 277:timings.c     ****   const uint8_t* buf = (const uint8_t*)s;
 278:timings.c     ****   for(; *buf != '\0'; ++buf) { putc(*buf); }
 279:timings.c     **** }
 280:timings.c     **** 
 281:timings.c     **** inline void cursor_set(uint8_t x, uint8_t y) {
 282:timings.c     ****   cursor_x = x < 64 ? x : 64;
 283:timings.c     ****   cursor_y = y < 48 ? y : 47;
 284:timings.c     **** }
 285:timings.c     **** 
 286:timings.c     **** void setup() {
 188               	.LM6:
 189               	.LFBB2:
 190               	/* prologue: function */
 191               	/* frame size = 0 */
 192               	/* stack size = 0 */
 193               	.L__stack_usage = 0
 287:timings.c     ****   set_pin_output(HSYNC_PORT_NAME, HSYNC_PORT_BIT);
 195               	.LM7:
 196 0058 559A      		sbi 0xa,5
 288:timings.c     ****   set_pin_output(VSYNC_PORT_NAME, VSYNC_PORT_BIT);
 198               	.LM8:
 199 005a 229A      		sbi 0x4,2
 289:timings.c     ****   set_pin_output(VISB_PORT_NAME, VISB_PORT_BIT);
 201               	.LM9:
 202 005c 539A      		sbi 0xa,3
 290:timings.c     ****   set_pin_output(HEARTBEAT_PORT_NAME, HEARTBEAT_PORT_BIT);
 204               	.LM10:
 205 005e 509A      		sbi 0xa,0
 291:timings.c     **** 
 292:timings.c     **** #if DEMO_MODE
 293:timings.c     ****   set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
 207               	.LM11:
 208 0060 5A9A      		sbi 0xb,2
 294:timings.c     ****   set_pin(DSB_PORT_NAME, DSB_PORT_BIT);
 210               	.LM12:
 211 0062 5C9A      		sbi 0xb,4
 295:timings.c     ****   reset_pin(A0_PORT_NAME, A0_PORT_BIT);
 213               	.LM13:
 214 0064 2898      		cbi 0x5,0
 296:timings.c     ****   reset_pin(A1_PORT_NAME, A1_PORT_BIT);
 216               	.LM14:
 217 0066 2998      		cbi 0x5,1
 297:timings.c     **** 
 298:timings.c     ****   set_pin_output(WRB_PORT_NAME, WRB_PORT_BIT);
 219               	.LM15:
 220 0068 529A      		sbi 0xa,2
 299:timings.c     ****   set_pin_output(DSB_PORT_NAME, DSB_PORT_BIT);
 222               	.LM16:
 223 006a 549A      		sbi 0xa,4
 300:timings.c     ****   set_pin_output(A0_PORT_NAME, A0_PORT_BIT);
 225               	.LM17:
 226 006c 209A      		sbi 0x4,0
 301:timings.c     ****   set_pin_output(A1_PORT_NAME, A1_PORT_BIT);
 228               	.LM18:
 229 006e 219A      		sbi 0x4,1
 230               	.LBB54:
 231               	.LBB55:
 168:timings.c     ****     DDRD |= 0xC0;
 233               	.LM19:
 234 0070 87B1      		in r24,0x7
 235 0072 8F63      		ori r24,lo8(63)
 236 0074 87B9      		out 0x7,r24
 169:timings.c     ****   } else {
 238               	.LM20:
 239 0076 8AB1      		in r24,0xa
 240 0078 806C      		ori r24,lo8(-64)
 241 007a 8AB9      		out 0xa,r24
 242               	.LBE55:
 243               	.LBE54:
 302:timings.c     **** 
 303:timings.c     ****   // Data bus
 304:timings.c     ****   set_databus_is_output(true);
 305:timings.c     **** #endif
 306:timings.c     **** 
 307:timings.c     ****   // Reset all timers and halt them
 308:timings.c     ****   GTCCR = _BV(TSM) | _BV(PSRASY) | _BV(PSRSYNC);
 245               	.LM21:
 246 007c 83E8      		ldi r24,lo8(-125)
 247 007e 83BD      		out 0x23,r24
 309:timings.c     **** 
 310:timings.c     ****   // Timers 0 and 2:
 311:timings.c     ****   // We use phase correct operation so the counter counts up from BOTTOM to TOP
 312:timings.c     ****   // and back down. Both BOTTOM and TOP are present for one counter cycle so the
 313:timings.c     ****   // number of cycles for each period is 2*(TOP-BOTTOM).
 314:timings.c     ****   //
 315:timings.c     ****   // BOTTOM is 0 and TOP and so the period, T, is 2*TOP/f where f is the counter
 316:timings.c     ****   // frequency. Therefore:
 317:timings.c     ****   const int top = whole_line * timer_freq / 2.;
 318:timings.c     ****   OCR0A = top;
 249               	.LM22:
 250 0080 88EA      		ldi r24,lo8(-88)
 251 0082 87BD      		out 0x27,r24
 319:timings.c     ****   OCR2A = top;
 253               	.LM23:
 254 0084 8093 B300 		sts 179,r24
 320:timings.c     **** 
 321:timings.c     ****   // We use the phase-correct PWM mode so the pulse width will be 2*COMPARE/f
 322:timings.c     ****   // and so, COMPARE = width * f / 2.
 323:timings.c     **** 
 324:timings.c     ****   // Timer 0: HSYNC
 325:timings.c     **** 
 326:timings.c     ****   // Set HSYNC pulse width,
 327:timings.c     ****   OCR0B = (int)(h_sync_width_t * timer_freq / 2.);
 256               	.LM24:
 257 0088 81E1      		ldi r24,lo8(17)
 258 008a 88BD      		out 0x28,r24
 328:timings.c     **** 
 329:timings.c     ****   // Phase correct PWM, TOP = OCR0A, internal clock, no pre-scaling,
 330:timings.c     ****   // OC0B pin is RESET when match on counting UP and SET when match on counting
 331:timings.c     ****   // DOWN for +ve HSYNC polarity. (Opposite for -ve.)
 332:timings.c     ****   //TCCR0A = _BV(COM0B1) | _BV(WGM00) | ((h_polarity < 0) ? _BV(COM2B0) : 0);
 333:timings.c     ****   TCCR0A = _BV(COM0B1) | _BV(WGM00) | ((h_polarity > 0) ? _BV(COM2B0) : 0); // output is ~HSYNC
 260               	.LM25:
 261 008c 81E2      		ldi r24,lo8(33)
 262 008e 84BD      		out 0x24,r24
 334:timings.c     ****   TCCR0B = _BV(WGM02) | _BV(CS00);
 264               	.LM26:
 265 0090 99E0      		ldi r25,lo8(9)
 266 0092 95BD      		out 0x25,r25
 335:timings.c     **** 
 336:timings.c     ****   // Timer 1: VSYNC
 337:timings.c     **** 
 338:timings.c     ****   // T1 == OC0B which is HSYNC so we can use it as a clock which is a happy
 339:timings.c     ****   // co-incidence.
 340:timings.c     **** 
 341:timings.c     ****   // TOP/OCR1A is set to the total size of the frame in lines minus 1 since it
 342:timings.c     ****   // is zero based.
 343:timings.c     ****   OCR1A = whole_frame - 1;
 268               	.LM27:
 269 0094 25E2      		ldi r18,lo8(37)
 270 0096 33E0      		ldi r19,lo8(3)
 271 0098 3093 8900 		sts 136+1,r19
 272 009c 2093 8800 		sts 136,r18
 344:timings.c     **** 
 345:timings.c     ****   // OCR1B is set to the pulse width minus 1 since it is zero based.
 346:timings.c     ****   OCR1B = v_sync_width - 1;
 274               	.LM28:
 275 00a0 25E0      		ldi r18,lo8(5)
 276 00a2 30E0      		ldi r19,0
 277 00a4 3093 8B00 		sts 138+1,r19
 278 00a8 2093 8A00 		sts 138,r18
 347:timings.c     **** 
 348:timings.c     ****   // Fast PWM, TOP = OCR1A
 349:timings.c     ****   TCCR1A = _BV(WGM11) | _BV(WGM10);
 280               	.LM29:
 281 00ac A0E8      		ldi r26,lo8(-128)
 282 00ae B0E0      		ldi r27,0
 283 00b0 83E0      		ldi r24,lo8(3)
 284 00b2 8C93      		st X,r24
 350:timings.c     ****   TCCR1B = _BV(WGM13) | _BV(WGM12);
 286               	.LM30:
 287 00b4 E1E8      		ldi r30,lo8(-127)
 288 00b6 F0E0      		ldi r31,0
 289 00b8 88E1      		ldi r24,lo8(24)
 290 00ba 8083      		st Z,r24
 351:timings.c     **** 
 352:timings.c     ****   //if(v_polarity < 0) {
 353:timings.c     ****   if(v_polarity > 0) { // output is ~VSYNC
 354:timings.c     ****     // Set OC1B on match, clear at bottom.
 355:timings.c     ****     TCCR1A |= _BV(COM1B1) | _BV(COM1B0);
 356:timings.c     ****   } else {
 357:timings.c     ****     // Clear OC1B on match, set at bottom.
 358:timings.c     ****     TCCR1A |= _BV(COM1B1);
 292               	.LM31:
 293 00bc 8C91      		ld r24,X
 294 00be 8062      		ori r24,lo8(32)
 295 00c0 8C93      		st X,r24
 359:timings.c     ****   }
 360:timings.c     **** 
 361:timings.c     ****   // Depending on polarity of HSYNC, clock on rising or falling edge of T1 (aka
 362:timings.c     ****   // HSYNC).
 363:timings.c     ****   // if(h_polarity < 0) {
 364:timings.c     ****   if(h_polarity > 0) {
 365:timings.c     ****     // Clock on falling edge of T1.
 366:timings.c     ****     TCCR1B |= _BV(CS12) | _BV(CS11);
 367:timings.c     ****   } else {
 368:timings.c     ****     // Clock on rising edge of T1.
 369:timings.c     ****     TCCR1B |= _BV(CS12) | _BV(CS11) | _BV(CS10);
 297               	.LM32:
 298 00c2 8081      		ld r24,Z
 299 00c4 8760      		ori r24,lo8(7)
 300 00c6 8083      		st Z,r24
 370:timings.c     ****   }
 371:timings.c     **** 
 372:timings.c     ****   // Timer 2: VISB
 373:timings.c     **** 
 374:timings.c     ****   // We set the display inactive pulse width because that pulse is nearly
 375:timings.c     ****   // aligned to HSYNC already.
 376:timings.c     ****   OCR2B = (int)(hvis_inactive_width * timer_freq / 2.);
 302               	.LM33:
 303 00c8 88E2      		ldi r24,lo8(40)
 304 00ca 8093 B400 		sts 180,r24
 377:timings.c     **** 
 378:timings.c     ****   // Phase correct PWM, TOP = OCR2A, no clock, no pre-scaling,
 379:timings.c     ****   // OC2B pin is SET when match on counting UP and RESET when match on counting
 380:timings.c     ****   // DOWN (see timer 0 overflow handler).
 381:timings.c     ****   TCCR2A = _BV(WGM20);
 306               	.LM34:
 307 00ce 81E0      		ldi r24,lo8(1)
 308 00d0 8093 B000 		sts 176,r24
 382:timings.c     ****   TCCR2B = _BV(WGM22) | _BV(CS20);
 310               	.LM35:
 311 00d4 9093 B100 		sts 177,r25
 383:timings.c     **** 
 384:timings.c     ****   // set default VISB value for when VISB is disabled
 385:timings.c     ****   set_pin(VISB_PORT_NAME, VISB_PORT_BIT);
 313               	.LM36:
 314 00d8 5B9A      		sbi 0xb,3
 386:timings.c     **** 
 387:timings.c     ****   // The centre points of the HSYNC and VISB pulses are *nearly* aligned
 388:timings.c     ****   // already. However, the HSYNC pulse is not quite in the middle of the
 389:timings.c     ****   // inactive VISB region so we offset the inactive pulse from the HSYNC pulse.
 390:timings.c     ****   TCNT0 = 0;
 316               	.LM37:
 317 00da 16BC      		out 0x26,__zero_reg__
 391:timings.c     ****   TCNT1 = 0; // corresponds to start of vsync pulse
 319               	.LM38:
 320 00dc 1092 8500 		sts 132+1,__zero_reg__
 321 00e0 1092 8400 		sts 132,__zero_reg__
 392:timings.c     ****   TCNT2 = 256-(int)(hvis_inactive_offset * timer_freq);
 323               	.LM39:
 324 00e4 8FEE      		ldi r24,lo8(-17)
 325 00e6 8093 B200 		sts 178,r24
 393:timings.c     **** 
 394:timings.c     ****   // Enable OVF interrupt for timer 0
 395:timings.c     ****   TIMSK0 |= _BV(TOIE0);
 327               	.LM40:
 328 00ea EEE6      		ldi r30,lo8(110)
 329 00ec F0E0      		ldi r31,0
 330 00ee 8081      		ld r24,Z
 331 00f0 8160      		ori r24,lo8(1)
 332 00f2 8083      		st Z,r24
 396:timings.c     **** 
 397:timings.c     ****   // Start timers and enable interrupts.
 398:timings.c     ****   sei();
 334               	.LM41:
 335               	/* #APP */
 336               	 ;  398 "timings.c" 1
 337 00f4 7894      		sei
 338               	 ;  0 "" 2
 399:timings.c     ****   GTCCR = 0;
 340               	.LM42:
 341               	/* #NOAPP */
 342 00f6 13BC      		out 0x23,__zero_reg__
 343 00f8 0895      		ret
 345               	.Lscope2:
 347               		.stabd	78,0,0
 348               		.section	.rodata.str1.1,"aMS",@progbits,1
 349               	.LC0:
 350 0000 204C 6F6F 		.string	" Look Around You! "
 350      6B20 4172 
 350      6F75 6E64 
 350      2059 6F75 
 350      2120 00
 351               	.global	__floatunsisf
 352               	.global	__subsf3
 353               	.global	__mulsf3
 354               	.global	__addsf3
 355               	.global	__ltsf2
 356               		.text
 358               	.global	_Z4loopv
 360               	_Z4loopv:
 361               		.stabd	46,0,0
 400:timings.c     **** }
 401:timings.c     **** 
 402:timings.c     **** void loop() {
 363               	.LM43:
 364               	.LFBB3:
 365 00fa 2F92      		push r2
 366 00fc 3F92      		push r3
 367 00fe 4F92      		push r4
 368 0100 5F92      		push r5
 369 0102 6F92      		push r6
 370 0104 7F92      		push r7
 371 0106 8F92      		push r8
 372 0108 9F92      		push r9
 373 010a AF92      		push r10
 374 010c BF92      		push r11
 375 010e CF92      		push r12
 376 0110 DF92      		push r13
 377 0112 EF92      		push r14
 378 0114 FF92      		push r15
 379 0116 0F93      		push r16
 380 0118 1F93      		push r17
 381 011a CF93      		push r28
 382 011c DF93      		push r29
 383 011e CDB7      		in r28,__SP_L__
 384 0120 DEB7      		in r29,__SP_H__
 385 0122 2897      		sbiw r28,8
 386 0124 0FB6      		in __tmp_reg__,__SREG__
 387 0126 F894      		cli
 388 0128 DEBF      		out __SP_H__,r29
 389 012a 0FBE      		out __SREG__,__tmp_reg__
 390 012c CDBF      		out __SP_L__,r28
 391               	/* prologue: function */
 392               	/* frame size = 8 */
 393               	/* stack size = 26 */
 394               	.L__stack_usage = 26
 395               	.LBB391:
 403:timings.c     **** #if DEMO_MODE
 404:timings.c     ****   uint16_t x=0, y=0, dx=0, addr=0;
 405:timings.c     ****   float r2;
 406:timings.c     **** 
 407:timings.c     ****   for(addr=0, y=0; y<384; y++) {
 397               	.LM44:
 398 012e 80E0      		ldi r24,0
 399 0130 90E0      		ldi r25,0
 400               	.L9:
 401 0132 AC01      		movw r20,r24
 402 0134 405C      		subi r20,-64
 403 0136 5F4F      		sbci r21,-1
 404               	.L8:
 405               	.LBB392:
 406               	.LBB393:
 407               	.LBB394:
 408               	.LBB395:
 409               	.LBB396:
 410               	.LBB397:
 411               	.LBB398:
 194:timings.c     ****   }
 413               	.LM45:
 414 0138 2898      		cbi 0x5,0
 200:timings.c     ****   }
 416               	.LM46:
 417 013a 2998      		cbi 0x5,1
 418               	.LBE398:
 419               	.LBE397:
 420               	.LBB399:
 421               	.LBB400:
 177:timings.c     ****   PORTC |= data & 0x3F;
 423               	.LM47:
 424 013c 28B1      		in r18,0x8
 425 013e 207C      		andi r18,lo8(-64)
 426 0140 28B9      		out 0x8,r18
 178:timings.c     ****   PORTD &= ~0xC0;
 428               	.LM48:
 429 0142 28B1      		in r18,0x8
 430 0144 382F      		mov r19,r24
 431 0146 3F73      		andi r19,lo8(63)
 432 0148 232B      		or r18,r19
 433 014a 28B9      		out 0x8,r18
 179:timings.c     ****   PORTD |= data & 0xC0;
 435               	.LM49:
 436 014c 2BB1      		in r18,0xb
 437 014e 2F73      		andi r18,lo8(63)
 438 0150 2BB9      		out 0xb,r18
 180:timings.c     **** }
 440               	.LM50:
 441 0152 2BB1      		in r18,0xb
 442 0154 382F      		mov r19,r24
 443 0156 307C      		andi r19,lo8(-64)
 444 0158 232B      		or r18,r19
 445 015a 2BB9      		out 0xb,r18
 446               	.LBE400:
 447               	.LBE399:
 209:timings.c     ****   reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
 449               	.LM51:
 450 015c 5A98      		cbi 0xb,2
 210:timings.c     ****   // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
 452               	.LM52:
 453 015e 5C98      		cbi 0xb,4
 212:timings.c     ****   set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
 455               	.LM53:
 456 0160 5C9A      		sbi 0xb,4
 213:timings.c     **** }
 458               	.LM54:
 459 0162 5A9A      		sbi 0xb,2
 460               	.LBE396:
 461               	.LBE395:
 462               	.LBB401:
 463               	.LBB402:
 464               	.LBB403:
 465               	.LBB404:
 192:timings.c     ****   } else {
 467               	.LM55:
 468 0164 289A      		sbi 0x5,0
 200:timings.c     ****   }
 470               	.LM56:
 471 0166 2998      		cbi 0x5,1
 472               	.LBE404:
 473               	.LBE403:
 474               	.LBB405:
 475               	.LBB406:
 177:timings.c     ****   PORTC |= data & 0x3F;
 477               	.LM57:
 478 0168 28B1      		in r18,0x8
 479 016a 207C      		andi r18,lo8(-64)
 480 016c 28B9      		out 0x8,r18
 178:timings.c     ****   PORTD &= ~0xC0;
 482               	.LM58:
 483 016e 28B1      		in r18,0x8
 484 0170 392F      		mov r19,r25
 485 0172 3F73      		andi r19,lo8(63)
 486 0174 232B      		or r18,r19
 487 0176 28B9      		out 0x8,r18
 179:timings.c     ****   PORTD |= data & 0xC0;
 489               	.LM59:
 490 0178 2BB1      		in r18,0xb
 491 017a 2F73      		andi r18,lo8(63)
 492 017c 2BB9      		out 0xb,r18
 180:timings.c     **** }
 494               	.LM60:
 495 017e 2BB1      		in r18,0xb
 496 0180 392F      		mov r19,r25
 497 0182 307C      		andi r19,lo8(-64)
 498 0184 232B      		or r18,r19
 499 0186 2BB9      		out 0xb,r18
 500               	.LBE406:
 501               	.LBE405:
 209:timings.c     ****   reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
 503               	.LM61:
 504 0188 5A98      		cbi 0xb,2
 210:timings.c     ****   // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
 506               	.LM62:
 507 018a 5C98      		cbi 0xb,4
 212:timings.c     ****   set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
 509               	.LM63:
 510 018c 5C9A      		sbi 0xb,4
 213:timings.c     **** }
 512               	.LM64:
 513 018e 5A9A      		sbi 0xb,2
 514               	.LBE402:
 515               	.LBE401:
 516               	.LBB407:
 517               	.LBB408:
 518               	.LBB409:
 519               	.LBB410:
 194:timings.c     ****   }
 521               	.LM65:
 522 0190 2898      		cbi 0x5,0
 198:timings.c     ****   } else {
 524               	.LM66:
 525 0192 299A      		sbi 0x5,1
 526               	.LBE410:
 527               	.LBE409:
 528               	.LBB411:
 529               	.LBB412:
 177:timings.c     ****   PORTC |= data & 0x3F;
 531               	.LM67:
 532 0194 28B1      		in r18,0x8
 533 0196 207C      		andi r18,lo8(-64)
 534 0198 28B9      		out 0x8,r18
 178:timings.c     ****   PORTD &= ~0xC0;
 536               	.LM68:
 537 019a 28B1      		in r18,0x8
 538 019c 28B9      		out 0x8,r18
 179:timings.c     ****   PORTD |= data & 0xC0;
 540               	.LM69:
 541 019e 2BB1      		in r18,0xb
 542 01a0 2F73      		andi r18,lo8(63)
 543 01a2 2BB9      		out 0xb,r18
 180:timings.c     **** }
 545               	.LM70:
 546 01a4 2BB1      		in r18,0xb
 547 01a6 2BB9      		out 0xb,r18
 548               	.LBE412:
 549               	.LBE411:
 209:timings.c     ****   reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
 551               	.LM71:
 552 01a8 5A98      		cbi 0xb,2
 210:timings.c     ****   // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
 554               	.LM72:
 555 01aa 5C98      		cbi 0xb,4
 212:timings.c     ****   set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
 557               	.LM73:
 558 01ac 5C9A      		sbi 0xb,4
 213:timings.c     **** }
 560               	.LM74:
 561 01ae 5A9A      		sbi 0xb,2
 562               	.LBE408:
 563               	.LBE407:
 564               	.LBE394:
 565               	.LBE393:
 408:timings.c     ****     uint8_t b = 0;
 409:timings.c     ****     for(x=0; x<512; x+=8, addr++) {
 567               	.LM75:
 568 01b0 0196      		adiw r24,1
 569 01b2 8417      		cp r24,r20
 570 01b4 9507      		cpc r25,r21
 571 01b6 01F0      		breq .+2
 572 01b8 00C0      		rjmp .L8
 573               	.LBE392:
 407:timings.c     ****     uint8_t b = 0;
 575               	.LM76:
 576 01ba 8115      		cp r24,__zero_reg__
 577 01bc 10E6      		ldi r17,96
 578 01be 9107      		cpc r25,r17
 579 01c0 01F0      		breq .+2
 580 01c2 00C0      		rjmp .L9
 581               	.LBE391:
 582               	.LBB413:
 583               	.LBB414:
 585               	.Ltext1:
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 587               	.LM77:
 588 01c4 2BEF      		ldi r18,lo8(2517499)
 589 01c6 39E6      		ldi r19,hi8(2517499)
 590 01c8 86E2      		ldi r24,hlo8(2517499)
 591 01ca 2150      	1:	subi r18,1
 592 01cc 3040      		sbci r19,0
 593 01ce 8040      		sbci r24,0
 594 01d0 01F4      		brne 1b
 595 01d2 00C0      		rjmp .
 596 01d4 0000      		nop
 597               	.LBE414:
 598               	.LBE413:
 599               	.LBB415:
 601               	.Ltext2:
 410:timings.c     ****       write_vram(addr, b);
 411:timings.c     ****     }
 412:timings.c     ****   }
 413:timings.c     **** 
 414:timings.c     ****   _delay_ms(1000);
 415:timings.c     **** 
 416:timings.c     ****   for(addr=0, y=0; y<384; y++) {
 603               	.LM78:
 604 01d6 80E0      		ldi r24,0
 605 01d8 90E0      		ldi r25,0
 606               	.L11:
 607 01da AC01      		movw r20,r24
 608 01dc 405C      		subi r20,-64
 609 01de 5F4F      		sbci r21,-1
 610               	.L10:
 611               	.LBB416:
 612               	.LBB417:
 613               	.LBB418:
 614               	.LBB419:
 615               	.LBB420:
 616               	.LBB421:
 617               	.LBB422:
 194:timings.c     ****   }
 619               	.LM79:
 620 01e0 2898      		cbi 0x5,0
 200:timings.c     ****   }
 622               	.LM80:
 623 01e2 2998      		cbi 0x5,1
 624               	.LBE422:
 625               	.LBE421:
 626               	.LBB423:
 627               	.LBB424:
 177:timings.c     ****   PORTC |= data & 0x3F;
 629               	.LM81:
 630 01e4 28B1      		in r18,0x8
 631 01e6 207C      		andi r18,lo8(-64)
 632 01e8 28B9      		out 0x8,r18
 178:timings.c     ****   PORTD &= ~0xC0;
 634               	.LM82:
 635 01ea 28B1      		in r18,0x8
 636 01ec 382F      		mov r19,r24
 637 01ee 3F73      		andi r19,lo8(63)
 638 01f0 232B      		or r18,r19
 639 01f2 28B9      		out 0x8,r18
 179:timings.c     ****   PORTD |= data & 0xC0;
 641               	.LM83:
 642 01f4 2BB1      		in r18,0xb
 643 01f6 2F73      		andi r18,lo8(63)
 644 01f8 2BB9      		out 0xb,r18
 180:timings.c     **** }
 646               	.LM84:
 647 01fa 2BB1      		in r18,0xb
 648 01fc 382F      		mov r19,r24
 649 01fe 307C      		andi r19,lo8(-64)
 650 0200 232B      		or r18,r19
 651 0202 2BB9      		out 0xb,r18
 652               	.LBE424:
 653               	.LBE423:
 209:timings.c     ****   reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
 655               	.LM85:
 656 0204 5A98      		cbi 0xb,2
 210:timings.c     ****   // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
 658               	.LM86:
 659 0206 5C98      		cbi 0xb,4
 212:timings.c     ****   set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
 661               	.LM87:
 662 0208 5C9A      		sbi 0xb,4
 213:timings.c     **** }
 664               	.LM88:
 665 020a 5A9A      		sbi 0xb,2
 666               	.LBE420:
 667               	.LBE419:
 668               	.LBB425:
 669               	.LBB426:
 670               	.LBB427:
 671               	.LBB428:
 192:timings.c     ****   } else {
 673               	.LM89:
 674 020c 289A      		sbi 0x5,0
 200:timings.c     ****   }
 676               	.LM90:
 677 020e 2998      		cbi 0x5,1
 678               	.LBE428:
 679               	.LBE427:
 680               	.LBB429:
 681               	.LBB430:
 177:timings.c     ****   PORTC |= data & 0x3F;
 683               	.LM91:
 684 0210 28B1      		in r18,0x8
 685 0212 207C      		andi r18,lo8(-64)
 686 0214 28B9      		out 0x8,r18
 178:timings.c     ****   PORTD &= ~0xC0;
 688               	.LM92:
 689 0216 28B1      		in r18,0x8
 690 0218 392F      		mov r19,r25
 691 021a 3F73      		andi r19,lo8(63)
 692 021c 232B      		or r18,r19
 693 021e 28B9      		out 0x8,r18
 179:timings.c     ****   PORTD |= data & 0xC0;
 695               	.LM93:
 696 0220 2BB1      		in r18,0xb
 697 0222 2F73      		andi r18,lo8(63)
 698 0224 2BB9      		out 0xb,r18
 180:timings.c     **** }
 700               	.LM94:
 701 0226 2BB1      		in r18,0xb
 702 0228 392F      		mov r19,r25
 703 022a 307C      		andi r19,lo8(-64)
 704 022c 232B      		or r18,r19
 705 022e 2BB9      		out 0xb,r18
 706               	.LBE430:
 707               	.LBE429:
 209:timings.c     ****   reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
 709               	.LM95:
 710 0230 5A98      		cbi 0xb,2
 210:timings.c     ****   // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
 712               	.LM96:
 713 0232 5C98      		cbi 0xb,4
 212:timings.c     ****   set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
 715               	.LM97:
 716 0234 5C9A      		sbi 0xb,4
 213:timings.c     **** }
 718               	.LM98:
 719 0236 5A9A      		sbi 0xb,2
 720               	.LBE426:
 721               	.LBE425:
 722               	.LBB431:
 723               	.LBB432:
 724               	.LBB433:
 725               	.LBB434:
 194:timings.c     ****   }
 727               	.LM99:
 728 0238 2898      		cbi 0x5,0
 198:timings.c     ****   } else {
 730               	.LM100:
 731 023a 299A      		sbi 0x5,1
 732               	.LBE434:
 733               	.LBE433:
 734               	.LBB435:
 735               	.LBB436:
 177:timings.c     ****   PORTC |= data & 0x3F;
 737               	.LM101:
 738 023c 28B1      		in r18,0x8
 739 023e 207C      		andi r18,lo8(-64)
 740 0240 28B9      		out 0x8,r18
 178:timings.c     ****   PORTD &= ~0xC0;
 742               	.LM102:
 743 0242 28B1      		in r18,0x8
 744 0244 2F63      		ori r18,lo8(63)
 745 0246 28B9      		out 0x8,r18
 179:timings.c     ****   PORTD |= data & 0xC0;
 747               	.LM103:
 748 0248 2BB1      		in r18,0xb
 749 024a 2F73      		andi r18,lo8(63)
 750 024c 2BB9      		out 0xb,r18
 180:timings.c     **** }
 752               	.LM104:
 753 024e 2BB1      		in r18,0xb
 754 0250 206C      		ori r18,lo8(-64)
 755 0252 2BB9      		out 0xb,r18
 756               	.LBE436:
 757               	.LBE435:
 209:timings.c     ****   reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
 759               	.LM105:
 760 0254 5A98      		cbi 0xb,2
 210:timings.c     ****   // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
 762               	.LM106:
 763 0256 5C98      		cbi 0xb,4
 212:timings.c     ****   set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
 765               	.LM107:
 766 0258 5C9A      		sbi 0xb,4
 213:timings.c     **** }
 768               	.LM108:
 769 025a 5A9A      		sbi 0xb,2
 770               	.LBE432:
 771               	.LBE431:
 772               	.LBE418:
 773               	.LBE417:
 417:timings.c     ****     uint8_t b = 0xff;
 418:timings.c     ****     for(x=0; x<512; x+=8, addr++) {
 775               	.LM109:
 776 025c 0196      		adiw r24,1
 777 025e 8417      		cp r24,r20
 778 0260 9507      		cpc r25,r21
 779 0262 01F0      		breq .+2
 780 0264 00C0      		rjmp .L10
 781               	.LBE416:
 416:timings.c     ****     uint8_t b = 0xff;
 783               	.LM110:
 784 0266 8115      		cp r24,__zero_reg__
 785 0268 E0E6      		ldi r30,96
 786 026a 9E07      		cpc r25,r30
 787 026c 01F0      		breq .+2
 788 026e 00C0      		rjmp .L11
 789 0270 60E0      		ldi r22,0
 790 0272 70E0      		ldi r23,0
 791 0274 80E0      		ldi r24,0
 792 0276 90E0      		ldi r25,0
 793 0278 E5E5      		ldi r30,lo8(85)
 794               	.L12:
 795 027a FE2F      		mov r31,r30
 796 027c FF73      		andi r31,lo8(63)
 797 027e 3E2F      		mov r19,r30
 798 0280 307C      		andi r19,lo8(-64)
 799 0282 AC01      		movw r20,r24
 800 0284 405C      		subi r20,-64
 801 0286 5F4F      		sbci r21,-1
 802               	.L14:
 803               	.LBE415:
 804               	.LBB437:
 805               	.LBB438:
 806               	.LBB439:
 807               	.LBB440:
 808               	.LBB441:
 809               	.LBB442:
 810               	.LBB443:
 811               	.LBB444:
 194:timings.c     ****   }
 813               	.LM111:
 814 0288 2898      		cbi 0x5,0
 200:timings.c     ****   }
 816               	.LM112:
 817 028a 2998      		cbi 0x5,1
 818               	.LBE444:
 819               	.LBE443:
 820               	.LBB445:
 821               	.LBB446:
 177:timings.c     ****   PORTC |= data & 0x3F;
 823               	.LM113:
 824 028c 28B1      		in r18,0x8
 825 028e 207C      		andi r18,lo8(-64)
 826 0290 28B9      		out 0x8,r18
 178:timings.c     ****   PORTD &= ~0xC0;
 828               	.LM114:
 829 0292 28B1      		in r18,0x8
 830 0294 E82F      		mov r30,r24
 831 0296 EF73      		andi r30,lo8(63)
 832 0298 2E2B      		or r18,r30
 833 029a 28B9      		out 0x8,r18
 179:timings.c     ****   PORTD |= data & 0xC0;
 835               	.LM115:
 836 029c 2BB1      		in r18,0xb
 837 029e 2F73      		andi r18,lo8(63)
 838 02a0 2BB9      		out 0xb,r18
 180:timings.c     **** }
 840               	.LM116:
 841 02a2 2BB1      		in r18,0xb
 842 02a4 E82F      		mov r30,r24
 843 02a6 E07C      		andi r30,lo8(-64)
 844 02a8 2E2B      		or r18,r30
 845 02aa 2BB9      		out 0xb,r18
 846               	.LBE446:
 847               	.LBE445:
 209:timings.c     ****   reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
 849               	.LM117:
 850 02ac 5A98      		cbi 0xb,2
 210:timings.c     ****   // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
 852               	.LM118:
 853 02ae 5C98      		cbi 0xb,4
 212:timings.c     ****   set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
 855               	.LM119:
 856 02b0 5C9A      		sbi 0xb,4
 213:timings.c     **** }
 858               	.LM120:
 859 02b2 5A9A      		sbi 0xb,2
 860               	.LBE442:
 861               	.LBE441:
 862               	.LBB447:
 863               	.LBB448:
 864               	.LBB449:
 865               	.LBB450:
 192:timings.c     ****   } else {
 867               	.LM121:
 868 02b4 289A      		sbi 0x5,0
 200:timings.c     ****   }
 870               	.LM122:
 871 02b6 2998      		cbi 0x5,1
 872               	.LBE450:
 873               	.LBE449:
 874               	.LBB451:
 875               	.LBB452:
 177:timings.c     ****   PORTC |= data & 0x3F;
 877               	.LM123:
 878 02b8 28B1      		in r18,0x8
 879 02ba 207C      		andi r18,lo8(-64)
 880 02bc 28B9      		out 0x8,r18
 178:timings.c     ****   PORTD &= ~0xC0;
 882               	.LM124:
 883 02be 28B1      		in r18,0x8
 884 02c0 E92F      		mov r30,r25
 885 02c2 EF73      		andi r30,lo8(63)
 886 02c4 2E2B      		or r18,r30
 887 02c6 28B9      		out 0x8,r18
 179:timings.c     ****   PORTD |= data & 0xC0;
 889               	.LM125:
 890 02c8 2BB1      		in r18,0xb
 891 02ca 2F73      		andi r18,lo8(63)
 892 02cc 2BB9      		out 0xb,r18
 180:timings.c     **** }
 894               	.LM126:
 895 02ce 2BB1      		in r18,0xb
 896 02d0 E92F      		mov r30,r25
 897 02d2 E07C      		andi r30,lo8(-64)
 898 02d4 2E2B      		or r18,r30
 899 02d6 2BB9      		out 0xb,r18
 900               	.LBE452:
 901               	.LBE451:
 209:timings.c     ****   reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
 903               	.LM127:
 904 02d8 5A98      		cbi 0xb,2
 210:timings.c     ****   // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
 906               	.LM128:
 907 02da 5C98      		cbi 0xb,4
 212:timings.c     ****   set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
 909               	.LM129:
 910 02dc 5C9A      		sbi 0xb,4
 213:timings.c     **** }
 912               	.LM130:
 913 02de 5A9A      		sbi 0xb,2
 914               	.LBE448:
 915               	.LBE447:
 916               	.LBB453:
 917               	.LBB454:
 918               	.LBB455:
 919               	.LBB456:
 194:timings.c     ****   }
 921               	.LM131:
 922 02e0 2898      		cbi 0x5,0
 198:timings.c     ****   } else {
 924               	.LM132:
 925 02e2 299A      		sbi 0x5,1
 926               	.LBE456:
 927               	.LBE455:
 928               	.LBB457:
 929               	.LBB458:
 177:timings.c     ****   PORTC |= data & 0x3F;
 931               	.LM133:
 932 02e4 28B1      		in r18,0x8
 933 02e6 207C      		andi r18,lo8(-64)
 934 02e8 28B9      		out 0x8,r18
 178:timings.c     ****   PORTD &= ~0xC0;
 936               	.LM134:
 937 02ea 28B1      		in r18,0x8
 938 02ec 2F2B      		or r18,r31
 939 02ee 28B9      		out 0x8,r18
 179:timings.c     ****   PORTD |= data & 0xC0;
 941               	.LM135:
 942 02f0 2BB1      		in r18,0xb
 943 02f2 2F73      		andi r18,lo8(63)
 944 02f4 2BB9      		out 0xb,r18
 180:timings.c     **** }
 946               	.LM136:
 947 02f6 2BB1      		in r18,0xb
 948 02f8 232B      		or r18,r19
 949 02fa 2BB9      		out 0xb,r18
 950               	.LBE458:
 951               	.LBE457:
 209:timings.c     ****   reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
 953               	.LM137:
 954 02fc 5A98      		cbi 0xb,2
 210:timings.c     ****   // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
 956               	.LM138:
 957 02fe 5C98      		cbi 0xb,4
 212:timings.c     ****   set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
 959               	.LM139:
 960 0300 5C9A      		sbi 0xb,4
 213:timings.c     **** }
 962               	.LM140:
 963 0302 5A9A      		sbi 0xb,2
 964               	.LBE454:
 965               	.LBE453:
 966               	.LBE440:
 967               	.LBE439:
 419:timings.c     ****       write_vram(addr, b);
 420:timings.c     ****     }
 421:timings.c     ****   }
 422:timings.c     **** 
 423:timings.c     ****   // _delay_ms(1000);
 424:timings.c     **** 
 425:timings.c     ****   for(addr=0, y=0; y<384; y++) {
 426:timings.c     ****     uint8_t b = (y & 1) ? 0xAA : 0x55;
 427:timings.c     ****     for(x=0; x<512; x+=8, addr++) {
 969               	.LM141:
 970 0304 0196      		adiw r24,1
 971 0306 8417      		cp r24,r20
 972 0308 9507      		cpc r25,r21
 973 030a 01F0      		breq .+2
 974 030c 00C0      		rjmp .L14
 975               	.LBE438:
 425:timings.c     ****     uint8_t b = (y & 1) ? 0xAA : 0x55;
 977               	.LM142:
 978 030e 6F5F      		subi r22,-1
 979 0310 7F4F      		sbci r23,-1
 980 0312 8115      		cp r24,__zero_reg__
 981 0314 9046      		sbci r25,96
 982 0316 01F0      		breq .L74
 983               	.LBB459:
 426:timings.c     ****     for(x=0; x<512; x+=8, addr++) {
 985               	.LM143:
 986 0318 60FF      		sbrs r22,0
 987 031a 00C0      		rjmp .L52
 988 031c EAEA      		ldi r30,lo8(-86)
 989 031e CA01      		movw r24,r20
 990 0320 00C0      		rjmp .L12
 991               	.L52:
 992 0322 E5E5      		ldi r30,lo8(85)
 993 0324 CA01      		movw r24,r20
 994 0326 00C0      		rjmp .L12
 995               	.L74:
 996               	.LBE459:
 997               	.LBE437:
 428:timings.c     ****       write_vram(addr, b);
 429:timings.c     ****     }
 430:timings.c     ****   }
 431:timings.c     **** 
 432:timings.c     ****   //_delay_ms(1000);
 433:timings.c     **** 
 434:timings.c     ****   scroll_enabled = false;
 999               	.LM144:
 1000 0328 1092 0000 		sts _ZL14scroll_enabled,__zero_reg__
 1001               	.LBB460:
 1002               	.LBB461:
 282:timings.c     ****   cursor_y = y < 48 ? y : 47;
 1004               	.LM145:
 1005 032c 1092 0000 		sts _ZL8cursor_x,__zero_reg__
 283:timings.c     **** }
 1007               	.LM146:
 1008 0330 1092 0000 		sts _ZL8cursor_y,__zero_reg__
 1009 0334 80E0      		ldi r24,0
 1010 0336 20E0      		ldi r18,0
 1011               	.LBE461:
 1012               	.LBE460:
 1013               	.LBB462:
 435:timings.c     **** 
 436:timings.c     ****   cursor_set(0, 0);
 437:timings.c     ****   for(uint16_t i=0; i<64*48; ++i) {
 1015               	.LM147:
 1016 0338 40E0      		ldi r20,0
 1017 033a 50E0      		ldi r21,0
 1018               	.LBB463:
 1019               	.LBB464:
 271:timings.c     ****     }
 1021               	.LM148:
 1022 033c BFE3      		ldi r27,lo8(63)
 1023 033e AFE2      		ldi r26,lo8(47)
 1024               	.L26:
 1025               	.LBE464:
 1026               	.LBE463:
 438:timings.c     ****     inverse_text = (i & 0x100) ? true : false;
 1028               	.LM149:
 1029 0340 352F      		mov r19,r21
 1030 0342 3170      		andi r19,lo8(1)
 1031 0344 3093 0000 		sts _ZL12inverse_text,r19
 1032               	.LBB559:
 1033               	.LBB556:
 1034               	.LBB465:
 1035               	.LBB466:
 255:timings.c     ****   uint16_t font_addr = ((uint16_t)(ch)<<3);
 1037               	.LM150:
 1038 0348 622F      		mov r22,r18
 1039 034a 70E0      		ldi r23,0
 1040 034c 762F      		mov r23,r22
 1041 034e 6627      		clr r22
 1042 0350 770F      		lsl r23
 1043 0352 FB01      		movw r30,r22
 1044 0354 E80F      		add r30,r24
 1045 0356 F11D      		adc r31,__zero_reg__
 1046 0358 CF01      		movw r24,r30
 1047 035a FA01      		movw r30,r20
 1048 035c FF27      		clr r31
 1049 035e EE0F      		lsl r30
 1050 0360 FF1F      		rol r31
 1051 0362 EE0F      		lsl r30
 1052 0364 FF1F      		rol r31
 1053 0366 EE0F      		lsl r30
 1054 0368 FF1F      		rol r31
 1055 036a E050      		subi r30,lo8(-(_ZL4font))
 1056 036c F040      		sbci r31,hi8(-(_ZL4font))
 1057 036e BC01      		movw r22,r24
 1058 0370 7E5F      		subi r23,-2
 1059 0372 00C0      		rjmp .L18
 1060               	.L75:
 1061 0374 3091 0000 		lds r19,_ZL12inverse_text
 1062               	.L18:
 1063               	.LBB467:
 1064               	.LBB468:
 1065               	.LBB469:
 258:timings.c     ****     write_vram(addr, inverse_text ? ~row : row);
 1067               	.LM151:
 1068               	/* #APP */
 1069               	 ;  258 "timings.c" 1
 1070 0378 2491      		lpm r18, Z
 1071               		
 1072               	 ;  0 "" 2
 1073               	/* #NOAPP */
 1074               	.LBE469:
 259:timings.c     ****   }
 1076               	.LM152:
 1077 037a 3111      		cpse r19,__zero_reg__
 1078 037c 2095      		com r18
 1079               	.L16:
 1080               	.LBB470:
 1081               	.LBB471:
 1082               	.LBB472:
 1083               	.LBB473:
 1084               	.LBB474:
 1085               	.LBB475:
 194:timings.c     ****   }
 1087               	.LM153:
 1088 037e 2898      		cbi 0x5,0
 200:timings.c     ****   }
 1090               	.LM154:
 1091 0380 2998      		cbi 0x5,1
 1092               	.LBE475:
 1093               	.LBE474:
 1094               	.LBB476:
 1095               	.LBB477:
 177:timings.c     ****   PORTC |= data & 0x3F;
 1097               	.LM155:
 1098 0382 38B1      		in r19,0x8
 1099 0384 307C      		andi r19,lo8(-64)
 1100 0386 38B9      		out 0x8,r19
 178:timings.c     ****   PORTD &= ~0xC0;
 1102               	.LM156:
 1103 0388 38B1      		in r19,0x8
 1104 038a 182F      		mov r17,r24
 1105 038c 1F73      		andi r17,lo8(63)
 1106 038e 312B      		or r19,r17
 1107 0390 38B9      		out 0x8,r19
 179:timings.c     ****   PORTD |= data & 0xC0;
 1109               	.LM157:
 1110 0392 3BB1      		in r19,0xb
 1111 0394 3F73      		andi r19,lo8(63)
 1112 0396 3BB9      		out 0xb,r19
 180:timings.c     **** }
 1114               	.LM158:
 1115 0398 3BB1      		in r19,0xb
 1116 039a 182F      		mov r17,r24
 1117 039c 107C      		andi r17,lo8(-64)
 1118 039e 312B      		or r19,r17
 1119 03a0 3BB9      		out 0xb,r19
 1120               	.LBE477:
 1121               	.LBE476:
 209:timings.c     ****   reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
 1123               	.LM159:
 1124 03a2 5A98      		cbi 0xb,2
 210:timings.c     ****   // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
 1126               	.LM160:
 1127 03a4 5C98      		cbi 0xb,4
 212:timings.c     ****   set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
 1129               	.LM161:
 1130 03a6 5C9A      		sbi 0xb,4
 213:timings.c     **** }
 1132               	.LM162:
 1133 03a8 5A9A      		sbi 0xb,2
 1134               	.LBE473:
 1135               	.LBE472:
 1136               	.LBB478:
 1137               	.LBB479:
 1138               	.LBB480:
 1139               	.LBB481:
 192:timings.c     ****   } else {
 1141               	.LM163:
 1142 03aa 289A      		sbi 0x5,0
 200:timings.c     ****   }
 1144               	.LM164:
 1145 03ac 2998      		cbi 0x5,1
 1146               	.LBE481:
 1147               	.LBE480:
 1148               	.LBB482:
 1149               	.LBB483:
 177:timings.c     ****   PORTC |= data & 0x3F;
 1151               	.LM165:
 1152 03ae 38B1      		in r19,0x8
 1153 03b0 307C      		andi r19,lo8(-64)
 1154 03b2 38B9      		out 0x8,r19
 178:timings.c     ****   PORTD &= ~0xC0;
 1156               	.LM166:
 1157 03b4 38B1      		in r19,0x8
 1158 03b6 192F      		mov r17,r25
 1159 03b8 1F73      		andi r17,lo8(63)
 1160 03ba 312B      		or r19,r17
 1161 03bc 38B9      		out 0x8,r19
 179:timings.c     ****   PORTD |= data & 0xC0;
 1163               	.LM167:
 1164 03be 3BB1      		in r19,0xb
 1165 03c0 3F73      		andi r19,lo8(63)
 1166 03c2 3BB9      		out 0xb,r19
 180:timings.c     **** }
 1168               	.LM168:
 1169 03c4 3BB1      		in r19,0xb
 1170 03c6 192F      		mov r17,r25
 1171 03c8 107C      		andi r17,lo8(-64)
 1172 03ca 312B      		or r19,r17
 1173 03cc 3BB9      		out 0xb,r19
 1174               	.LBE483:
 1175               	.LBE482:
 209:timings.c     ****   reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
 1177               	.LM169:
 1178 03ce 5A98      		cbi 0xb,2
 210:timings.c     ****   // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
 1180               	.LM170:
 1181 03d0 5C98      		cbi 0xb,4
 212:timings.c     ****   set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
 1183               	.LM171:
 1184 03d2 5C9A      		sbi 0xb,4
 213:timings.c     **** }
 1186               	.LM172:
 1187 03d4 5A9A      		sbi 0xb,2
 1188               	.LBE479:
 1189               	.LBE478:
 1190               	.LBB484:
 1191               	.LBB485:
 1192               	.LBB486:
 1193               	.LBB487:
 194:timings.c     ****   }
 1195               	.LM173:
 1196 03d6 2898      		cbi 0x5,0
 198:timings.c     ****   } else {
 1198               	.LM174:
 1199 03d8 299A      		sbi 0x5,1
 1200               	.LBE487:
 1201               	.LBE486:
 1202               	.LBB488:
 1203               	.LBB489:
 177:timings.c     ****   PORTC |= data & 0x3F;
 1205               	.LM175:
 1206 03da 38B1      		in r19,0x8
 1207 03dc 307C      		andi r19,lo8(-64)
 1208 03de 38B9      		out 0x8,r19
 178:timings.c     ****   PORTD &= ~0xC0;
 1210               	.LM176:
 1211 03e0 38B1      		in r19,0x8
 1212 03e2 122F      		mov r17,r18
 1213 03e4 1F73      		andi r17,lo8(63)
 1214 03e6 312B      		or r19,r17
 1215 03e8 38B9      		out 0x8,r19
 179:timings.c     ****   PORTD |= data & 0xC0;
 1217               	.LM177:
 1218 03ea 3BB1      		in r19,0xb
 1219 03ec 3F73      		andi r19,lo8(63)
 1220 03ee 3BB9      		out 0xb,r19
 180:timings.c     **** }
 1222               	.LM178:
 1223 03f0 3BB1      		in r19,0xb
 1224 03f2 207C      		andi r18,lo8(-64)
 1225 03f4 232B      		or r18,r19
 1226 03f6 2BB9      		out 0xb,r18
 1227               	.LBE489:
 1228               	.LBE488:
 209:timings.c     ****   reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
 1230               	.LM179:
 1231 03f8 5A98      		cbi 0xb,2
 210:timings.c     ****   // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
 1233               	.LM180:
 1234 03fa 5C98      		cbi 0xb,4
 212:timings.c     ****   set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
 1236               	.LM181:
 1237 03fc 5C9A      		sbi 0xb,4
 213:timings.c     **** }
 1239               	.LM182:
 1240 03fe 5A9A      		sbi 0xb,2
 1241               	.LBE485:
 1242               	.LBE484:
 1243               	.LBE471:
 1244               	.LBE470:
 1245               	.LBE468:
 257:timings.c     ****     uint8_t row = pgm_read_byte(&(font[font_addr]));
 1247               	.LM183:
 1248 0400 805C      		subi r24,-64
 1249 0402 9F4F      		sbci r25,-1
 1250 0404 3196      		adiw r30,1
 1251 0406 8617      		cp r24,r22
 1252 0408 9707      		cpc r25,r23
 1253 040a 01F0      		breq .+2
 1254 040c 00C0      		rjmp .L75
 1255               	.LBE467:
 1256               	.LBE466:
 1257               	.LBE465:
 265:timings.c     ****   if(cursor_x == 64) { cursor_x = 0; cursor_y += 1; }
 1259               	.LM184:
 1260 040e 8091 0000 		lds r24,_ZL8cursor_x
 1261 0412 8F5F      		subi r24,lo8(-(1))
 1262 0414 8093 0000 		sts _ZL8cursor_x,r24
 266:timings.c     ****   if(cursor_y == 48) {
 1264               	.LM185:
 1265 0418 8034      		cpi r24,lo8(64)
 1266 041a 01F4      		brne .+2
 1267 041c 00C0      		rjmp .L19
 1268 041e 8091 0000 		lds r24,_ZL8cursor_y
 1269               	.L20:
 267:timings.c     ****     if(scroll_enabled) {
 1271               	.LM186:
 1272 0422 8033      		cpi r24,lo8(48)
 1273 0424 01F0      		breq .L76
 1274               	.LBE556:
 1275               	.LBE559:
 437:timings.c     ****     inverse_text = (i & 0x100) ? true : false;
 1277               	.LM187:
 1278 0426 4F5F      		subi r20,-1
 1279 0428 5F4F      		sbci r21,-1
 1280 042a 4115      		cp r20,__zero_reg__
 1281 042c 8CE0      		ldi r24,12
 1282 042e 5807      		cpc r21,r24
 1283 0430 01F0      		breq .L25
 1284               	.L78:
 1285 0432 2091 0000 		lds r18,_ZL8cursor_y
 1286 0436 8091 0000 		lds r24,_ZL8cursor_x
 1287 043a 00C0      		rjmp .L26
 1288               	.L76:
 1289               	.LBB560:
 1290               	.LBB557:
 268:timings.c     ****       scroll_up(); cursor_y = 47;
 1292               	.LM188:
 1293 043c 8091 0000 		lds r24,_ZL14scroll_enabled
 1294 0440 8111      		cpse r24,__zero_reg__
 1295 0442 00C0      		rjmp .L77
 271:timings.c     ****     }
 1297               	.LM189:
 1298 0444 B093 0000 		sts _ZL8cursor_x,r27
 1299               	.L73:
 1300 0448 A093 0000 		sts _ZL8cursor_y,r26
 1301               	.LBE557:
 1302               	.LBE560:
 437:timings.c     ****     inverse_text = (i & 0x100) ? true : false;
 1304               	.LM190:
 1305 044c 4F5F      		subi r20,-1
 1306 044e 5F4F      		sbci r21,-1
 1307 0450 4115      		cp r20,__zero_reg__
 1308 0452 8CE0      		ldi r24,12
 1309 0454 5807      		cpc r21,r24
 1310 0456 01F4      		brne .L78
 1311               	.L25:
 1312               	.LBE462:
 1313               	.LBB562:
 1314               	.LBB563:
 1316               	.Ltext3:
 1318               	.LM191:
 1319 0458 9BEF      		ldi r25,lo8(2517499)
 1320 045a E9E6      		ldi r30,hi8(2517499)
 1321 045c F6E2      		ldi r31,hlo8(2517499)
 1322 045e 9150      	1:	subi r25,1
 1323 0460 E040      		sbci r30,0
 1324 0462 F040      		sbci r31,0
 1325 0464 01F4      		brne 1b
 1326 0466 00C0      		rjmp .
 1327 0468 0000      		nop
 1328               	.LBE563:
 1329               	.LBE562:
 1331               	.Ltext4:
 439:timings.c     ****     putc(i & 0xff);
 440:timings.c     ****   }
 441:timings.c     **** 
 442:timings.c     ****   _delay_ms(1000);
 443:timings.c     **** 
 444:timings.c     ****   /*
 445:timings.c     ****   inverse_text = true;
 446:timings.c     ****   for(uint32_t i=0; i<10ul*64ul*48ul; ++i) {
 447:timings.c     ****     cursor_set(random() % 64, random() % 48);
 448:timings.c     ****     putc(random() & 0xff);
 449:timings.c     ****   }
 450:timings.c     ****   */
 451:timings.c     **** 
 452:timings.c     ****   scroll_enabled = true;
 1333               	.LM192:
 1334 046a 81E0      		ldi r24,lo8(1)
 1335 046c 8093 0000 		sts _ZL14scroll_enabled,r24
 1336               	.LBB564:
 1337               	.LBB565:
 282:timings.c     ****   cursor_y = y < 48 ? y : 47;
 1339               	.LM193:
 1340 0470 1092 0000 		sts _ZL8cursor_x,__zero_reg__
 283:timings.c     **** }
 1342               	.LM194:
 1343 0474 1092 0000 		sts _ZL8cursor_y,__zero_reg__
 1344 0478 4CE2      		ldi r20,lo8(44)
 1345 047a 51E0      		ldi r21,lo8(1)
 1346 047c 80E0      		ldi r24,0
 1347 047e 20E0      		ldi r18,0
 1348 0480 90E0      		ldi r25,0
 1349               	.LBE565:
 1350               	.LBE564:
 1351               	.LBB566:
 453:timings.c     **** 
 454:timings.c     ****   inverse_text = false;
 455:timings.c     ****   cursor_set(0, 0);
 456:timings.c     ****   for(uint16_t i=0; i<300; ++i) {
 457:timings.c     ****     inverse_text = !inverse_text;
 1353               	.LM195:
 1354 0482 11E0      		ldi r17,lo8(1)
 1355               	.LBB567:
 1356               	.LBB568:
 1357               	.LBB569:
 1358               	.LBB570:
 271:timings.c     ****     }
 1360               	.LM196:
 1361 0484 682F      		mov r22,r24
 1362               	.L39:
 1363               	.LBE570:
 1364               	.LBE569:
 1365               	.LBE568:
 1366               	.LBE567:
 1368               	.LM197:
 1369 0486 392F      		mov r19,r25
 1370 0488 3127      		eor r19,r17
 1371 048a 3093 0000 		sts _ZL12inverse_text,r19
 1372 048e A0E0      		ldi r26,lo8(.LC0+1)
 1373 0490 B0E0      		ldi r27,hi8(.LC0+1)
 1374 0492 E0E2      		ldi r30,lo8(32)
 1375               	.L37:
 1376               	.LBB671:
 1377               	.LBB668:
 1378               	.LBB665:
 1379               	.LBB662:
 1380               	.LBB571:
 1381               	.LBB572:
 255:timings.c     ****   uint16_t font_addr = ((uint16_t)(ch)<<3);
 1383               	.LM198:
 1384 0494 822F      		mov r24,r18
 1385 0496 90E0      		ldi r25,0
 1386 0498 982F      		mov r25,r24
 1387 049a 8827      		clr r24
 1388 049c 990F      		lsl r25
 1389 049e 860F      		add r24,r22
 1390 04a0 911D      		adc r25,__zero_reg__
 1391 04a2 F0E0      		ldi r31,0
 1392 04a4 EE0F      		lsl r30
 1393 04a6 FF1F      		rol r31
 1394 04a8 EE0F      		lsl r30
 1395 04aa FF1F      		rol r31
 1396 04ac EE0F      		lsl r30
 1397 04ae FF1F      		rol r31
 1398 04b0 E050      		subi r30,lo8(-(_ZL4font))
 1399 04b2 F040      		sbci r31,hi8(-(_ZL4font))
 1400 04b4 BC01      		movw r22,r24
 1401 04b6 7E5F      		subi r23,-2
 1402 04b8 00C0      		rjmp .L29
 1403               	.L79:
 1404 04ba 3091 0000 		lds r19,_ZL12inverse_text
 1405               	.L29:
 1406               	.LBB573:
 1407               	.LBB574:
 1408               	.LBB575:
 258:timings.c     ****     write_vram(addr, inverse_text ? ~row : row);
 1410               	.LM199:
 1411               	/* #APP */
 1412               	 ;  258 "timings.c" 1
 1413 04be 2491      		lpm r18, Z
 1414               		
 1415               	 ;  0 "" 2
 1416               	/* #NOAPP */
 1417               	.LBE575:
 259:timings.c     ****   }
 1419               	.LM200:
 1420 04c0 3111      		cpse r19,__zero_reg__
 1421 04c2 2095      		com r18
 1422               	.L27:
 1423               	.LBB576:
 1424               	.LBB577:
 1425               	.LBB578:
 1426               	.LBB579:
 1427               	.LBB580:
 1428               	.LBB581:
 194:timings.c     ****   }
 1430               	.LM201:
 1431 04c4 2898      		cbi 0x5,0
 200:timings.c     ****   }
 1433               	.LM202:
 1434 04c6 2998      		cbi 0x5,1
 1435               	.LBE581:
 1436               	.LBE580:
 1437               	.LBB582:
 1438               	.LBB583:
 177:timings.c     ****   PORTC |= data & 0x3F;
 1440               	.LM203:
 1441 04c8 38B1      		in r19,0x8
 1442 04ca 307C      		andi r19,lo8(-64)
 1443 04cc 38B9      		out 0x8,r19
 178:timings.c     ****   PORTD &= ~0xC0;
 1445               	.LM204:
 1446 04ce 38B1      		in r19,0x8
 1447 04d0 082F      		mov r16,r24
 1448 04d2 0F73      		andi r16,lo8(63)
 1449 04d4 302B      		or r19,r16
 1450 04d6 38B9      		out 0x8,r19
 179:timings.c     ****   PORTD |= data & 0xC0;
 1452               	.LM205:
 1453 04d8 3BB1      		in r19,0xb
 1454 04da 3F73      		andi r19,lo8(63)
 1455 04dc 3BB9      		out 0xb,r19
 180:timings.c     **** }
 1457               	.LM206:
 1458 04de 3BB1      		in r19,0xb
 1459 04e0 082F      		mov r16,r24
 1460 04e2 007C      		andi r16,lo8(-64)
 1461 04e4 302B      		or r19,r16
 1462 04e6 3BB9      		out 0xb,r19
 1463               	.LBE583:
 1464               	.LBE582:
 209:timings.c     ****   reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
 1466               	.LM207:
 1467 04e8 5A98      		cbi 0xb,2
 210:timings.c     ****   // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
 1469               	.LM208:
 1470 04ea 5C98      		cbi 0xb,4
 212:timings.c     ****   set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
 1472               	.LM209:
 1473 04ec 5C9A      		sbi 0xb,4
 213:timings.c     **** }
 1475               	.LM210:
 1476 04ee 5A9A      		sbi 0xb,2
 1477               	.LBE579:
 1478               	.LBE578:
 1479               	.LBB584:
 1480               	.LBB585:
 1481               	.LBB586:
 1482               	.LBB587:
 192:timings.c     ****   } else {
 1484               	.LM211:
 1485 04f0 289A      		sbi 0x5,0
 200:timings.c     ****   }
 1487               	.LM212:
 1488 04f2 2998      		cbi 0x5,1
 1489               	.LBE587:
 1490               	.LBE586:
 1491               	.LBB588:
 1492               	.LBB589:
 177:timings.c     ****   PORTC |= data & 0x3F;
 1494               	.LM213:
 1495 04f4 38B1      		in r19,0x8
 1496 04f6 307C      		andi r19,lo8(-64)
 1497 04f8 38B9      		out 0x8,r19
 178:timings.c     ****   PORTD &= ~0xC0;
 1499               	.LM214:
 1500 04fa 38B1      		in r19,0x8
 1501 04fc 092F      		mov r16,r25
 1502 04fe 0F73      		andi r16,lo8(63)
 1503 0500 302B      		or r19,r16
 1504 0502 38B9      		out 0x8,r19
 179:timings.c     ****   PORTD |= data & 0xC0;
 1506               	.LM215:
 1507 0504 3BB1      		in r19,0xb
 1508 0506 3F73      		andi r19,lo8(63)
 1509 0508 3BB9      		out 0xb,r19
 180:timings.c     **** }
 1511               	.LM216:
 1512 050a 3BB1      		in r19,0xb
 1513 050c 092F      		mov r16,r25
 1514 050e 007C      		andi r16,lo8(-64)
 1515 0510 302B      		or r19,r16
 1516 0512 3BB9      		out 0xb,r19
 1517               	.LBE589:
 1518               	.LBE588:
 209:timings.c     ****   reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
 1520               	.LM217:
 1521 0514 5A98      		cbi 0xb,2
 210:timings.c     ****   // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
 1523               	.LM218:
 1524 0516 5C98      		cbi 0xb,4
 212:timings.c     ****   set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
 1526               	.LM219:
 1527 0518 5C9A      		sbi 0xb,4
 213:timings.c     **** }
 1529               	.LM220:
 1530 051a 5A9A      		sbi 0xb,2
 1531               	.LBE585:
 1532               	.LBE584:
 1533               	.LBB590:
 1534               	.LBB591:
 1535               	.LBB592:
 1536               	.LBB593:
 194:timings.c     ****   }
 1538               	.LM221:
 1539 051c 2898      		cbi 0x5,0
 198:timings.c     ****   } else {
 1541               	.LM222:
 1542 051e 299A      		sbi 0x5,1
 1543               	.LBE593:
 1544               	.LBE592:
 1545               	.LBB594:
 1546               	.LBB595:
 177:timings.c     ****   PORTC |= data & 0x3F;
 1548               	.LM223:
 1549 0520 38B1      		in r19,0x8
 1550 0522 307C      		andi r19,lo8(-64)
 1551 0524 38B9      		out 0x8,r19
 178:timings.c     ****   PORTD &= ~0xC0;
 1553               	.LM224:
 1554 0526 38B1      		in r19,0x8
 1555 0528 022F      		mov r16,r18
 1556 052a 0F73      		andi r16,lo8(63)
 1557 052c 302B      		or r19,r16
 1558 052e 38B9      		out 0x8,r19
 179:timings.c     ****   PORTD |= data & 0xC0;
 1560               	.LM225:
 1561 0530 3BB1      		in r19,0xb
 1562 0532 3F73      		andi r19,lo8(63)
 1563 0534 3BB9      		out 0xb,r19
 180:timings.c     **** }
 1565               	.LM226:
 1566 0536 3BB1      		in r19,0xb
 1567 0538 207C      		andi r18,lo8(-64)
 1568 053a 232B      		or r18,r19
 1569 053c 2BB9      		out 0xb,r18
 1570               	.LBE595:
 1571               	.LBE594:
 209:timings.c     ****   reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
 1573               	.LM227:
 1574 053e 5A98      		cbi 0xb,2
 210:timings.c     ****   // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
 1576               	.LM228:
 1577 0540 5C98      		cbi 0xb,4
 212:timings.c     ****   set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
 1579               	.LM229:
 1580 0542 5C9A      		sbi 0xb,4
 213:timings.c     **** }
 1582               	.LM230:
 1583 0544 5A9A      		sbi 0xb,2
 1584               	.LBE591:
 1585               	.LBE590:
 1586               	.LBE577:
 1587               	.LBE576:
 1588               	.LBE574:
 257:timings.c     ****     uint8_t row = pgm_read_byte(&(font[font_addr]));
 1590               	.LM231:
 1591 0546 805C      		subi r24,-64
 1592 0548 9F4F      		sbci r25,-1
 1593 054a 3196      		adiw r30,1
 1594 054c 8617      		cp r24,r22
 1595 054e 9707      		cpc r25,r23
 1596 0550 01F0      		breq .+2
 1597 0552 00C0      		rjmp .L79
 1598               	.LBE573:
 1599               	.LBE572:
 1600               	.LBE571:
 265:timings.c     ****   if(cursor_x == 64) { cursor_x = 0; cursor_y += 1; }
 1602               	.LM232:
 1603 0554 8091 0000 		lds r24,_ZL8cursor_x
 1604 0558 8F5F      		subi r24,lo8(-(1))
 1605 055a 8093 0000 		sts _ZL8cursor_x,r24
 266:timings.c     ****   if(cursor_y == 48) {
 1607               	.LM233:
 1608 055e 8034      		cpi r24,lo8(64)
 1609 0560 01F4      		brne .+2
 1610 0562 00C0      		rjmp .L30
 1611 0564 8091 0000 		lds r24,_ZL8cursor_y
 1612               	.L31:
 267:timings.c     ****     if(scroll_enabled) {
 1614               	.LM234:
 1615 0568 8033      		cpi r24,lo8(48)
 1616 056a 01F4      		brne .+2
 1617 056c 00C0      		rjmp .L80
 1618               	.L32:
 1619               	.LBE662:
 1620               	.LBE665:
 278:timings.c     **** }
 1622               	.LM235:
 1623 056e ED91      		ld r30,X+
 1624 0570 EE23      		tst r30
 1625 0572 01F4      		brne .+2
 1626 0574 00C0      		rjmp .L36
 1627               	.L82:
 1628 0576 2091 0000 		lds r18,_ZL8cursor_y
 1629 057a 6091 0000 		lds r22,_ZL8cursor_x
 1630 057e 3091 0000 		lds r19,_ZL12inverse_text
 1631 0582 00C0      		rjmp .L37
 1632               	.L19:
 1633               	.LBE668:
 1634               	.LBE671:
 1635               	.LBE566:
 1636               	.LBB674:
 1637               	.LBB561:
 1638               	.LBB558:
 266:timings.c     ****   if(cursor_y == 48) {
 1640               	.LM236:
 1641 0584 1092 0000 		sts _ZL8cursor_x,__zero_reg__
 1642 0588 8091 0000 		lds r24,_ZL8cursor_y
 1643 058c 8F5F      		subi r24,lo8(-(1))
 1644 058e 8093 0000 		sts _ZL8cursor_y,r24
 1645 0592 00C0      		rjmp .L20
 1646               	.L77:
 268:timings.c     ****       scroll_up(); cursor_y = 47;
 1648               	.LM237:
 1649 0594 80E0      		ldi r24,0
 1650 0596 90E0      		ldi r25,0
 1651               	.L23:
 1652               	.LBB490:
 1653               	.LBB491:
 1654               	.LBB492:
 1655               	.LBB493:
 1656               	.LBB494:
 1657               	.LBB495:
 1658               	.LBB496:
 1659               	.LBB497:
 194:timings.c     ****   }
 1661               	.LM238:
 1662 0598 2898      		cbi 0x5,0
 200:timings.c     ****   }
 1664               	.LM239:
 1665 059a 2998      		cbi 0x5,1
 1666               	.LBE497:
 1667               	.LBE496:
 1668               	.LBB498:
 1669               	.LBB499:
 177:timings.c     ****   PORTC |= data & 0x3F;
 1671               	.LM240:
 1672 059c 28B1      		in r18,0x8
 1673 059e 207C      		andi r18,lo8(-64)
 1674 05a0 28B9      		out 0x8,r18
 178:timings.c     ****   PORTD &= ~0xC0;
 1676               	.LM241:
 1677 05a2 28B1      		in r18,0x8
 1678 05a4 382F      		mov r19,r24
 1679 05a6 3F73      		andi r19,lo8(63)
 1680 05a8 232B      		or r18,r19
 1681 05aa 28B9      		out 0x8,r18
 179:timings.c     ****   PORTD |= data & 0xC0;
 1683               	.LM242:
 1684 05ac 2BB1      		in r18,0xb
 1685 05ae 2F73      		andi r18,lo8(63)
 1686 05b0 2BB9      		out 0xb,r18
 180:timings.c     **** }
 1688               	.LM243:
 1689 05b2 6BB1      		in r22,0xb
 1690 05b4 282F      		mov r18,r24
 1691 05b6 207C      		andi r18,lo8(-64)
 1692 05b8 622B      		or r22,r18
 1693 05ba 6BB9      		out 0xb,r22
 1694               	.LBE499:
 1695               	.LBE498:
 209:timings.c     ****   reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
 1697               	.LM244:
 1698 05bc 5A98      		cbi 0xb,2
 210:timings.c     ****   // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
 1700               	.LM245:
 1701 05be 5C98      		cbi 0xb,4
 212:timings.c     ****   set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
 1703               	.LM246:
 1704 05c0 5C9A      		sbi 0xb,4
 213:timings.c     **** }
 1706               	.LM247:
 1707 05c2 5A9A      		sbi 0xb,2
 1708               	.LBE495:
 1709               	.LBE494:
 1710               	.LBB500:
 1711               	.LBB501:
 1712               	.LBB502:
 1713               	.LBB503:
 192:timings.c     ****   } else {
 1715               	.LM248:
 1716 05c4 289A      		sbi 0x5,0
 200:timings.c     ****   }
 1718               	.LM249:
 1719 05c6 2998      		cbi 0x5,1
 1720               	.LBE503:
 1721               	.LBE502:
 1722               	.LBB504:
 1723               	.LBB505:
 177:timings.c     ****   PORTC |= data & 0x3F;
 1725               	.LM250:
 1726 05c8 68B1      		in r22,0x8
 1727 05ca 607C      		andi r22,lo8(-64)
 1728 05cc 68B9      		out 0x8,r22
 178:timings.c     ****   PORTD &= ~0xC0;
 1730               	.LM251:
 1731 05ce 68B1      		in r22,0x8
 1732 05d0 FC01      		movw r30,r24
 1733 05d2 FE5F      		subi r31,-2
 1734 05d4 7F2F      		mov r23,r31
 1735 05d6 7F73      		andi r23,lo8(63)
 1736 05d8 672B      		or r22,r23
 1737 05da 68B9      		out 0x8,r22
 179:timings.c     ****   PORTD |= data & 0xC0;
 1739               	.LM252:
 1740 05dc 6BB1      		in r22,0xb
 1741 05de 6F73      		andi r22,lo8(63)
 1742 05e0 6BB9      		out 0xb,r22
 180:timings.c     **** }
 1744               	.LM253:
 1745 05e2 6BB1      		in r22,0xb
 1746 05e4 7F2F      		mov r23,r31
 1747 05e6 707C      		andi r23,lo8(-64)
 1748 05e8 672B      		or r22,r23
 1749 05ea 6BB9      		out 0xb,r22
 1750               	.LBE505:
 1751               	.LBE504:
 209:timings.c     ****   reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
 1753               	.LM254:
 1754 05ec 5A98      		cbi 0xb,2
 210:timings.c     ****   // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
 1756               	.LM255:
 1757 05ee 5C98      		cbi 0xb,4
 212:timings.c     ****   set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
 1759               	.LM256:
 1760 05f0 5C9A      		sbi 0xb,4
 213:timings.c     **** }
 1762               	.LM257:
 1763 05f2 5A9A      		sbi 0xb,2
 1764               	.LBE501:
 1765               	.LBE500:
 1766               	.LBB506:
 1767               	.LBB507:
 1768               	.LBB508:
 1769               	.LBB509:
 194:timings.c     ****   }
 1771               	.LM258:
 1772 05f4 2898      		cbi 0x5,0
 198:timings.c     ****   } else {
 1774               	.LM259:
 1775 05f6 299A      		sbi 0x5,1
 1776               	.LBE509:
 1777               	.LBE508:
 219:timings.c     ****   reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
 1779               	.LM260:
 1780 05f8 5A9A      		sbi 0xb,2
 220:timings.c     ****   // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
 1782               	.LM261:
 1783 05fa 5C98      		cbi 0xb,4
 1784               	.LBB510:
 1785               	.LBB511:
 1786               	.LBB512:
 1787               	.LBB513:
 171:timings.c     ****     DDRD &= ~0xC0;
 1789               	.LM262:
 1790 05fc 67B1      		in r22,0x7
 1791 05fe 607C      		andi r22,lo8(-64)
 1792 0600 67B9      		out 0x7,r22
 172:timings.c     ****   }
 1794               	.LM263:
 1795 0602 6AB1      		in r22,0xa
 1796 0604 6F73      		andi r22,lo8(63)
 1797 0606 6AB9      		out 0xa,r22
 1798               	.LBE513:
 1799               	.LBE512:
 185:timings.c     ****   set_databus_is_output(true);
 1801               	.LM264:
 1802 0608 76B1      		in r23,0x6
 1803 060a 69B1      		in r22,0x9
 1804 060c 7F73      		andi r23,lo8(63)
 1805               	.LBB514:
 1806               	.LBB515:
 168:timings.c     ****     DDRD |= 0xC0;
 1808               	.LM265:
 1809 060e E7B1      		in r30,0x7
 1810 0610 EF63      		ori r30,lo8(63)
 1811 0612 E7B9      		out 0x7,r30
 169:timings.c     ****   } else {
 1813               	.LM266:
 1814 0614 EAB1      		in r30,0xa
 1815 0616 E06C      		ori r30,lo8(-64)
 1816 0618 EAB9      		out 0xa,r30
 1817               	.LBE515:
 1818               	.LBE514:
 1819               	.LBE511:
 1820               	.LBE510:
 223:timings.c     **** 
 1822               	.LM267:
 1823 061a 5C9A      		sbi 0xb,4
 1824               	.LBE507:
 1825               	.LBE506:
 1826               	.LBE493:
 1827               	.LBE492:
 1828               	.LBB516:
 1829               	.LBB517:
 1830               	.LBB518:
 1831               	.LBB519:
 1832               	.LBB520:
 1833               	.LBB521:
 194:timings.c     ****   }
 1835               	.LM268:
 1836 061c 2898      		cbi 0x5,0
 200:timings.c     ****   }
 1838               	.LM269:
 1839 061e 2998      		cbi 0x5,1
 1840               	.LBE521:
 1841               	.LBE520:
 1842               	.LBB522:
 1843               	.LBB523:
 177:timings.c     ****   PORTC |= data & 0x3F;
 1845               	.LM270:
 1846 0620 E8B1      		in r30,0x8
 1847 0622 E07C      		andi r30,lo8(-64)
 1848 0624 E8B9      		out 0x8,r30
 178:timings.c     ****   PORTD &= ~0xC0;
 1850               	.LM271:
 1851 0626 E8B1      		in r30,0x8
 1852 0628 3E2B      		or r19,r30
 1853 062a 38B9      		out 0x8,r19
 179:timings.c     ****   PORTD |= data & 0xC0;
 1855               	.LM272:
 1856 062c 3BB1      		in r19,0xb
 1857 062e 3F73      		andi r19,lo8(63)
 1858 0630 3BB9      		out 0xb,r19
 180:timings.c     **** }
 1860               	.LM273:
 1861 0632 3BB1      		in r19,0xb
 1862 0634 232B      		or r18,r19
 1863 0636 2BB9      		out 0xb,r18
 1864               	.LBE523:
 1865               	.LBE522:
 209:timings.c     ****   reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
 1867               	.LM274:
 1868 0638 5A98      		cbi 0xb,2
 210:timings.c     ****   // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
 1870               	.LM275:
 1871 063a 5C98      		cbi 0xb,4
 212:timings.c     ****   set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
 1873               	.LM276:
 1874 063c 5C9A      		sbi 0xb,4
 213:timings.c     **** }
 1876               	.LM277:
 1877 063e 5A9A      		sbi 0xb,2
 1878               	.LBE519:
 1879               	.LBE518:
 1880               	.LBB524:
 1881               	.LBB525:
 1882               	.LBB526:
 1883               	.LBB527:
 192:timings.c     ****   } else {
 1885               	.LM278:
 1886 0640 289A      		sbi 0x5,0
 200:timings.c     ****   }
 1888               	.LM279:
 1889 0642 2998      		cbi 0x5,1
 1890               	.LBE527:
 1891               	.LBE526:
 1892               	.LBB528:
 1893               	.LBB529:
 177:timings.c     ****   PORTC |= data & 0x3F;
 1895               	.LM280:
 1896 0644 28B1      		in r18,0x8
 1897 0646 207C      		andi r18,lo8(-64)
 1898 0648 28B9      		out 0x8,r18
 178:timings.c     ****   PORTD &= ~0xC0;
 1900               	.LM281:
 1901 064a 28B1      		in r18,0x8
 1902 064c 392F      		mov r19,r25
 1903 064e 3F73      		andi r19,lo8(63)
 1904 0650 232B      		or r18,r19
 1905 0652 28B9      		out 0x8,r18
 179:timings.c     ****   PORTD |= data & 0xC0;
 1907               	.LM282:
 1908 0654 2BB1      		in r18,0xb
 1909 0656 2F73      		andi r18,lo8(63)
 1910 0658 2BB9      		out 0xb,r18
 180:timings.c     **** }
 1912               	.LM283:
 1913 065a 2BB1      		in r18,0xb
 1914 065c 392F      		mov r19,r25
 1915 065e 307C      		andi r19,lo8(-64)
 1916 0660 232B      		or r18,r19
 1917 0662 2BB9      		out 0xb,r18
 1918               	.LBE529:
 1919               	.LBE528:
 209:timings.c     ****   reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
 1921               	.LM284:
 1922 0664 5A98      		cbi 0xb,2
 210:timings.c     ****   // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
 1924               	.LM285:
 1925 0666 5C98      		cbi 0xb,4
 212:timings.c     ****   set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
 1927               	.LM286:
 1928 0668 5C9A      		sbi 0xb,4
 213:timings.c     **** }
 1930               	.LM287:
 1931 066a 5A9A      		sbi 0xb,2
 1932               	.LBE525:
 1933               	.LBE524:
 1934               	.LBB530:
 1935               	.LBB531:
 1936               	.LBB532:
 1937               	.LBB533:
 194:timings.c     ****   }
 1939               	.LM288:
 1940 066c 2898      		cbi 0x5,0
 198:timings.c     ****   } else {
 1942               	.LM289:
 1943 066e 299A      		sbi 0x5,1
 1944               	.LBE533:
 1945               	.LBE532:
 1946               	.LBB534:
 1947               	.LBB535:
 177:timings.c     ****   PORTC |= data & 0x3F;
 1949               	.LM290:
 1950 0670 28B1      		in r18,0x8
 1951 0672 207C      		andi r18,lo8(-64)
 1952 0674 28B9      		out 0x8,r18
 178:timings.c     ****   PORTD &= ~0xC0;
 1954               	.LM291:
 1955 0676 28B1      		in r18,0x8
 1956 0678 272B      		or r18,r23
 1957 067a 28B9      		out 0x8,r18
 179:timings.c     ****   PORTD |= data & 0xC0;
 1959               	.LM292:
 1960 067c 2BB1      		in r18,0xb
 1961 067e 2F73      		andi r18,lo8(63)
 1962 0680 2BB9      		out 0xb,r18
 180:timings.c     **** }
 1964               	.LM293:
 1965 0682 3BB1      		in r19,0xb
 1966 0684 262F      		mov r18,r22
 1967 0686 207C      		andi r18,lo8(-64)
 1968 0688 232B      		or r18,r19
 1969 068a 2BB9      		out 0xb,r18
 1970               	.LBE535:
 1971               	.LBE534:
 209:timings.c     ****   reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
 1973               	.LM294:
 1974 068c 5A98      		cbi 0xb,2
 210:timings.c     ****   // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
 1976               	.LM295:
 1977 068e 5C98      		cbi 0xb,4
 212:timings.c     ****   set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
 1979               	.LM296:
 1980 0690 5C9A      		sbi 0xb,4
 213:timings.c     **** }
 1982               	.LM297:
 1983 0692 5A9A      		sbi 0xb,2
 1984               	.LBE531:
 1985               	.LBE530:
 1986               	.LBE517:
 1987               	.LBE516:
 246:timings.c     ****     write_vram(addr, read_vram(addr + (64*8)));
 1989               	.LM298:
 1990 0694 0196      		adiw r24,1
 1991 0696 8115      		cp r24,__zero_reg__
 1992 0698 2EE5      		ldi r18,94
 1993 069a 9207      		cpc r25,r18
 1994 069c 01F0      		breq .+2
 1995 069e 00C0      		rjmp .L23
 1996               	.L24:
 1997               	.LBB536:
 1998               	.LBB537:
 1999               	.LBB538:
 2000               	.LBB539:
 2001               	.LBB540:
 2002               	.LBB541:
 194:timings.c     ****   }
 2004               	.LM299:
 2005 06a0 2898      		cbi 0x5,0
 200:timings.c     ****   }
 2007               	.LM300:
 2008 06a2 2998      		cbi 0x5,1
 2009               	.LBE541:
 2010               	.LBE540:
 2011               	.LBB542:
 2012               	.LBB543:
 177:timings.c     ****   PORTC |= data & 0x3F;
 2014               	.LM301:
 2015 06a4 28B1      		in r18,0x8
 2016 06a6 207C      		andi r18,lo8(-64)
 2017 06a8 28B9      		out 0x8,r18
 178:timings.c     ****   PORTD &= ~0xC0;
 2019               	.LM302:
 2020 06aa 28B1      		in r18,0x8
 2021 06ac 382F      		mov r19,r24
 2022 06ae 3F73      		andi r19,lo8(63)
 2023 06b0 232B      		or r18,r19
 2024 06b2 28B9      		out 0x8,r18
 179:timings.c     ****   PORTD |= data & 0xC0;
 2026               	.LM303:
 2027 06b4 2BB1      		in r18,0xb
 2028 06b6 2F73      		andi r18,lo8(63)
 2029 06b8 2BB9      		out 0xb,r18
 180:timings.c     **** }
 2031               	.LM304:
 2032 06ba 2BB1      		in r18,0xb
 2033 06bc 382F      		mov r19,r24
 2034 06be 307C      		andi r19,lo8(-64)
 2035 06c0 232B      		or r18,r19
 2036 06c2 2BB9      		out 0xb,r18
 2037               	.LBE543:
 2038               	.LBE542:
 209:timings.c     ****   reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
 2040               	.LM305:
 2041 06c4 5A98      		cbi 0xb,2
 210:timings.c     ****   // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
 2043               	.LM306:
 2044 06c6 5C98      		cbi 0xb,4
 212:timings.c     ****   set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
 2046               	.LM307:
 2047 06c8 5C9A      		sbi 0xb,4
 213:timings.c     **** }
 2049               	.LM308:
 2050 06ca 5A9A      		sbi 0xb,2
 2051               	.LBE539:
 2052               	.LBE538:
 2053               	.LBB544:
 2054               	.LBB545:
 2055               	.LBB546:
 2056               	.LBB547:
 192:timings.c     ****   } else {
 2058               	.LM309:
 2059 06cc 289A      		sbi 0x5,0
 200:timings.c     ****   }
 2061               	.LM310:
 2062 06ce 2998      		cbi 0x5,1
 2063               	.LBE547:
 2064               	.LBE546:
 2065               	.LBB548:
 2066               	.LBB549:
 177:timings.c     ****   PORTC |= data & 0x3F;
 2068               	.LM311:
 2069 06d0 28B1      		in r18,0x8
 2070 06d2 207C      		andi r18,lo8(-64)
 2071 06d4 28B9      		out 0x8,r18
 178:timings.c     ****   PORTD &= ~0xC0;
 2073               	.LM312:
 2074 06d6 28B1      		in r18,0x8
 2075 06d8 392F      		mov r19,r25
 2076 06da 3F73      		andi r19,lo8(63)
 2077 06dc 232B      		or r18,r19
 2078 06de 28B9      		out 0x8,r18
 179:timings.c     ****   PORTD |= data & 0xC0;
 2080               	.LM313:
 2081 06e0 2BB1      		in r18,0xb
 2082 06e2 2F73      		andi r18,lo8(63)
 2083 06e4 2BB9      		out 0xb,r18
 180:timings.c     **** }
 2085               	.LM314:
 2086 06e6 5E9A      		sbi 0xb,6
 2087               	.LBE549:
 2088               	.LBE548:
 209:timings.c     ****   reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
 2090               	.LM315:
 2091 06e8 5A98      		cbi 0xb,2
 210:timings.c     ****   // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
 2093               	.LM316:
 2094 06ea 5C98      		cbi 0xb,4
 212:timings.c     ****   set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
 2096               	.LM317:
 2097 06ec 5C9A      		sbi 0xb,4
 213:timings.c     **** }
 2099               	.LM318:
 2100 06ee 5A9A      		sbi 0xb,2
 2101               	.LBE545:
 2102               	.LBE544:
 2103               	.LBB550:
 2104               	.LBB551:
 2105               	.LBB552:
 2106               	.LBB553:
 194:timings.c     ****   }
 2108               	.LM319:
 2109 06f0 2898      		cbi 0x5,0
 198:timings.c     ****   } else {
 2111               	.LM320:
 2112 06f2 299A      		sbi 0x5,1
 2113               	.LBE553:
 2114               	.LBE552:
 2115               	.LBB554:
 2116               	.LBB555:
 177:timings.c     ****   PORTC |= data & 0x3F;
 2118               	.LM321:
 2119 06f4 28B1      		in r18,0x8
 2120 06f6 207C      		andi r18,lo8(-64)
 2121 06f8 28B9      		out 0x8,r18
 178:timings.c     ****   PORTD &= ~0xC0;
 2123               	.LM322:
 2124 06fa 28B1      		in r18,0x8
 2125 06fc 28B9      		out 0x8,r18
 179:timings.c     ****   PORTD |= data & 0xC0;
 2127               	.LM323:
 2128 06fe 2BB1      		in r18,0xb
 2129 0700 2F73      		andi r18,lo8(63)
 2130 0702 2BB9      		out 0xb,r18
 180:timings.c     **** }
 2132               	.LM324:
 2133 0704 2BB1      		in r18,0xb
 2134 0706 2BB9      		out 0xb,r18
 2135               	.LBE555:
 2136               	.LBE554:
 209:timings.c     ****   reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
 2138               	.LM325:
 2139 0708 5A98      		cbi 0xb,2
 210:timings.c     ****   // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
 2141               	.LM326:
 2142 070a 5C98      		cbi 0xb,4
 212:timings.c     ****   set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
 2144               	.LM327:
 2145 070c 5C9A      		sbi 0xb,4
 213:timings.c     **** }
 2147               	.LM328:
 2148 070e 5A9A      		sbi 0xb,2
 2149               	.LBE551:
 2150               	.LBE550:
 2151               	.LBE537:
 2152               	.LBE536:
 249:timings.c     ****     write_vram(addr, 0x00);
 2154               	.LM329:
 2155 0710 0196      		adiw r24,1
 2156 0712 8115      		cp r24,__zero_reg__
 2157 0714 30E6      		ldi r19,96
 2158 0716 9307      		cpc r25,r19
 2159 0718 01F4      		brne .L24
 2160 071a 00C0      		rjmp .L73
 2161               	.L80:
 2162               	.LBE491:
 2163               	.LBE490:
 2164               	.LBE558:
 2165               	.LBE561:
 2166               	.LBE674:
 2167               	.LBB675:
 2168               	.LBB672:
 2169               	.LBB669:
 2170               	.LBB666:
 2171               	.LBB663:
 268:timings.c     ****       scroll_up(); cursor_y = 47;
 2173               	.LM330:
 2174 071c 8091 0000 		lds r24,_ZL14scroll_enabled
 2175 0720 8111      		cpse r24,__zero_reg__
 2176 0722 00C0      		rjmp .L81
 271:timings.c     ****     }
 2178               	.LM331:
 2179 0724 9FE3      		ldi r25,lo8(63)
 2180 0726 9093 0000 		sts _ZL8cursor_x,r25
 2181 072a EFE2      		ldi r30,lo8(47)
 2182 072c E093 0000 		sts _ZL8cursor_y,r30
 2183               	.LBE663:
 2184               	.LBE666:
 278:timings.c     **** }
 2186               	.LM332:
 2187 0730 ED91      		ld r30,X+
 2188 0732 E111      		cpse r30,__zero_reg__
 2189 0734 00C0      		rjmp .L82
 2190               	.L36:
 2191 0736 4150      		subi r20,1
 2192 0738 5109      		sbc r21,__zero_reg__
 2193               	.LBE669:
 2194               	.LBE672:
 456:timings.c     ****     inverse_text = !inverse_text;
 2196               	.LM333:
 2197 073a 01F4      		brne .+2
 2198 073c 00C0      		rjmp .L38
 2199 073e 9091 0000 		lds r25,_ZL12inverse_text
 2200 0742 2091 0000 		lds r18,_ZL8cursor_y
 2201 0746 6091 0000 		lds r22,_ZL8cursor_x
 2202 074a 00C0      		rjmp .L39
 2203               	.L30:
 2204               	.LBB673:
 2205               	.LBB670:
 2206               	.LBB667:
 2207               	.LBB664:
 266:timings.c     ****   if(cursor_y == 48) {
 2209               	.LM334:
 2210 074c 1092 0000 		sts _ZL8cursor_x,__zero_reg__
 2211 0750 8091 0000 		lds r24,_ZL8cursor_y
 2212 0754 8F5F      		subi r24,lo8(-(1))
 2213 0756 8093 0000 		sts _ZL8cursor_y,r24
 2214 075a 00C0      		rjmp .L31
 2215               	.L81:
 268:timings.c     ****       scroll_up(); cursor_y = 47;
 2217               	.LM335:
 2218 075c 80E0      		ldi r24,0
 2219 075e 90E0      		ldi r25,0
 2220               	.L34:
 2221               	.LBB596:
 2222               	.LBB597:
 2223               	.LBB598:
 2224               	.LBB599:
 2225               	.LBB600:
 2226               	.LBB601:
 2227               	.LBB602:
 2228               	.LBB603:
 194:timings.c     ****   }
 2230               	.LM336:
 2231 0760 2898      		cbi 0x5,0
 200:timings.c     ****   }
 2233               	.LM337:
 2234 0762 2998      		cbi 0x5,1
 2235               	.LBE603:
 2236               	.LBE602:
 2237               	.LBB604:
 2238               	.LBB605:
 177:timings.c     ****   PORTC |= data & 0x3F;
 2240               	.LM338:
 2241 0764 28B1      		in r18,0x8
 2242 0766 207C      		andi r18,lo8(-64)
 2243 0768 28B9      		out 0x8,r18
 178:timings.c     ****   PORTD &= ~0xC0;
 2245               	.LM339:
 2246 076a 28B1      		in r18,0x8
 2247 076c 382F      		mov r19,r24
 2248 076e 3F73      		andi r19,lo8(63)
 2249 0770 232B      		or r18,r19
 2250 0772 28B9      		out 0x8,r18
 179:timings.c     ****   PORTD |= data & 0xC0;
 2252               	.LM340:
 2253 0774 2BB1      		in r18,0xb
 2254 0776 2F73      		andi r18,lo8(63)
 2255 0778 2BB9      		out 0xb,r18
 180:timings.c     **** }
 2257               	.LM341:
 2258 077a 6BB1      		in r22,0xb
 2259 077c 282F      		mov r18,r24
 2260 077e 207C      		andi r18,lo8(-64)
 2261 0780 622B      		or r22,r18
 2262 0782 6BB9      		out 0xb,r22
 2263               	.LBE605:
 2264               	.LBE604:
 209:timings.c     ****   reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
 2266               	.LM342:
 2267 0784 5A98      		cbi 0xb,2
 210:timings.c     ****   // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
 2269               	.LM343:
 2270 0786 5C98      		cbi 0xb,4
 212:timings.c     ****   set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
 2272               	.LM344:
 2273 0788 5C9A      		sbi 0xb,4
 213:timings.c     **** }
 2275               	.LM345:
 2276 078a 5A9A      		sbi 0xb,2
 2277               	.LBE601:
 2278               	.LBE600:
 2279               	.LBB606:
 2280               	.LBB607:
 2281               	.LBB608:
 2282               	.LBB609:
 192:timings.c     ****   } else {
 2284               	.LM346:
 2285 078c 289A      		sbi 0x5,0
 200:timings.c     ****   }
 2287               	.LM347:
 2288 078e 2998      		cbi 0x5,1
 2289               	.LBE609:
 2290               	.LBE608:
 2291               	.LBB610:
 2292               	.LBB611:
 177:timings.c     ****   PORTC |= data & 0x3F;
 2294               	.LM348:
 2295 0790 68B1      		in r22,0x8
 2296 0792 607C      		andi r22,lo8(-64)
 2297 0794 68B9      		out 0x8,r22
 178:timings.c     ****   PORTD &= ~0xC0;
 2299               	.LM349:
 2300 0796 68B1      		in r22,0x8
 2301 0798 FC01      		movw r30,r24
 2302 079a FE5F      		subi r31,-2
 2303 079c 7F2F      		mov r23,r31
 2304 079e 7F73      		andi r23,lo8(63)
 2305 07a0 672B      		or r22,r23
 2306 07a2 68B9      		out 0x8,r22
 179:timings.c     ****   PORTD |= data & 0xC0;
 2308               	.LM350:
 2309 07a4 6BB1      		in r22,0xb
 2310 07a6 6F73      		andi r22,lo8(63)
 2311 07a8 6BB9      		out 0xb,r22
 180:timings.c     **** }
 2313               	.LM351:
 2314 07aa 6BB1      		in r22,0xb
 2315 07ac 7F2F      		mov r23,r31
 2316 07ae 707C      		andi r23,lo8(-64)
 2317 07b0 672B      		or r22,r23
 2318 07b2 6BB9      		out 0xb,r22
 2319               	.LBE611:
 2320               	.LBE610:
 209:timings.c     ****   reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
 2322               	.LM352:
 2323 07b4 5A98      		cbi 0xb,2
 210:timings.c     ****   // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
 2325               	.LM353:
 2326 07b6 5C98      		cbi 0xb,4
 212:timings.c     ****   set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
 2328               	.LM354:
 2329 07b8 5C9A      		sbi 0xb,4
 213:timings.c     **** }
 2331               	.LM355:
 2332 07ba 5A9A      		sbi 0xb,2
 2333               	.LBE607:
 2334               	.LBE606:
 2335               	.LBB612:
 2336               	.LBB613:
 2337               	.LBB614:
 2338               	.LBB615:
 194:timings.c     ****   }
 2340               	.LM356:
 2341 07bc 2898      		cbi 0x5,0
 198:timings.c     ****   } else {
 2343               	.LM357:
 2344 07be 299A      		sbi 0x5,1
 2345               	.LBE615:
 2346               	.LBE614:
 219:timings.c     ****   reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
 2348               	.LM358:
 2349 07c0 5A9A      		sbi 0xb,2
 220:timings.c     ****   // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
 2351               	.LM359:
 2352 07c2 5C98      		cbi 0xb,4
 2353               	.LBB616:
 2354               	.LBB617:
 2355               	.LBB618:
 2356               	.LBB619:
 171:timings.c     ****     DDRD &= ~0xC0;
 2358               	.LM360:
 2359 07c4 67B1      		in r22,0x7
 2360 07c6 607C      		andi r22,lo8(-64)
 2361 07c8 67B9      		out 0x7,r22
 172:timings.c     ****   }
 2363               	.LM361:
 2364 07ca 6AB1      		in r22,0xa
 2365 07cc 6F73      		andi r22,lo8(63)
 2366 07ce 6AB9      		out 0xa,r22
 2367               	.LBE619:
 2368               	.LBE618:
 185:timings.c     ****   set_databus_is_output(true);
 2370               	.LM362:
 2371 07d0 76B1      		in r23,0x6
 2372 07d2 69B1      		in r22,0x9
 2373 07d4 7F73      		andi r23,lo8(63)
 2374               	.LBB620:
 2375               	.LBB621:
 168:timings.c     ****     DDRD |= 0xC0;
 2377               	.LM363:
 2378 07d6 E7B1      		in r30,0x7
 2379 07d8 EF63      		ori r30,lo8(63)
 2380 07da E7B9      		out 0x7,r30
 169:timings.c     ****   } else {
 2382               	.LM364:
 2383 07dc EAB1      		in r30,0xa
 2384 07de E06C      		ori r30,lo8(-64)
 2385 07e0 EAB9      		out 0xa,r30
 2386               	.LBE621:
 2387               	.LBE620:
 2388               	.LBE617:
 2389               	.LBE616:
 223:timings.c     **** 
 2391               	.LM365:
 2392 07e2 5C9A      		sbi 0xb,4
 2393               	.LBE613:
 2394               	.LBE612:
 2395               	.LBE599:
 2396               	.LBE598:
 2397               	.LBB622:
 2398               	.LBB623:
 2399               	.LBB624:
 2400               	.LBB625:
 2401               	.LBB626:
 2402               	.LBB627:
 194:timings.c     ****   }
 2404               	.LM366:
 2405 07e4 2898      		cbi 0x5,0
 200:timings.c     ****   }
 2407               	.LM367:
 2408 07e6 2998      		cbi 0x5,1
 2409               	.LBE627:
 2410               	.LBE626:
 2411               	.LBB628:
 2412               	.LBB629:
 177:timings.c     ****   PORTC |= data & 0x3F;
 2414               	.LM368:
 2415 07e8 E8B1      		in r30,0x8
 2416 07ea E07C      		andi r30,lo8(-64)
 2417 07ec E8B9      		out 0x8,r30
 178:timings.c     ****   PORTD &= ~0xC0;
 2419               	.LM369:
 2420 07ee E8B1      		in r30,0x8
 2421 07f0 3E2B      		or r19,r30
 2422 07f2 38B9      		out 0x8,r19
 179:timings.c     ****   PORTD |= data & 0xC0;
 2424               	.LM370:
 2425 07f4 3BB1      		in r19,0xb
 2426 07f6 3F73      		andi r19,lo8(63)
 2427 07f8 3BB9      		out 0xb,r19
 180:timings.c     **** }
 2429               	.LM371:
 2430 07fa 3BB1      		in r19,0xb
 2431 07fc 232B      		or r18,r19
 2432 07fe 2BB9      		out 0xb,r18
 2433               	.LBE629:
 2434               	.LBE628:
 209:timings.c     ****   reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
 2436               	.LM372:
 2437 0800 5A98      		cbi 0xb,2
 210:timings.c     ****   // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
 2439               	.LM373:
 2440 0802 5C98      		cbi 0xb,4
 212:timings.c     ****   set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
 2442               	.LM374:
 2443 0804 5C9A      		sbi 0xb,4
 213:timings.c     **** }
 2445               	.LM375:
 2446 0806 5A9A      		sbi 0xb,2
 2447               	.LBE625:
 2448               	.LBE624:
 2449               	.LBB630:
 2450               	.LBB631:
 2451               	.LBB632:
 2452               	.LBB633:
 192:timings.c     ****   } else {
 2454               	.LM376:
 2455 0808 289A      		sbi 0x5,0
 200:timings.c     ****   }
 2457               	.LM377:
 2458 080a 2998      		cbi 0x5,1
 2459               	.LBE633:
 2460               	.LBE632:
 2461               	.LBB634:
 2462               	.LBB635:
 177:timings.c     ****   PORTC |= data & 0x3F;
 2464               	.LM378:
 2465 080c 28B1      		in r18,0x8
 2466 080e 207C      		andi r18,lo8(-64)
 2467 0810 28B9      		out 0x8,r18
 178:timings.c     ****   PORTD &= ~0xC0;
 2469               	.LM379:
 2470 0812 28B1      		in r18,0x8
 2471 0814 392F      		mov r19,r25
 2472 0816 3F73      		andi r19,lo8(63)
 2473 0818 232B      		or r18,r19
 2474 081a 28B9      		out 0x8,r18
 179:timings.c     ****   PORTD |= data & 0xC0;
 2476               	.LM380:
 2477 081c 2BB1      		in r18,0xb
 2478 081e 2F73      		andi r18,lo8(63)
 2479 0820 2BB9      		out 0xb,r18
 180:timings.c     **** }
 2481               	.LM381:
 2482 0822 2BB1      		in r18,0xb
 2483 0824 392F      		mov r19,r25
 2484 0826 307C      		andi r19,lo8(-64)
 2485 0828 232B      		or r18,r19
 2486 082a 2BB9      		out 0xb,r18
 2487               	.LBE635:
 2488               	.LBE634:
 209:timings.c     ****   reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
 2490               	.LM382:
 2491 082c 5A98      		cbi 0xb,2
 210:timings.c     ****   // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
 2493               	.LM383:
 2494 082e 5C98      		cbi 0xb,4
 212:timings.c     ****   set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
 2496               	.LM384:
 2497 0830 5C9A      		sbi 0xb,4
 213:timings.c     **** }
 2499               	.LM385:
 2500 0832 5A9A      		sbi 0xb,2
 2501               	.LBE631:
 2502               	.LBE630:
 2503               	.LBB636:
 2504               	.LBB637:
 2505               	.LBB638:
 2506               	.LBB639:
 194:timings.c     ****   }
 2508               	.LM386:
 2509 0834 2898      		cbi 0x5,0
 198:timings.c     ****   } else {
 2511               	.LM387:
 2512 0836 299A      		sbi 0x5,1
 2513               	.LBE639:
 2514               	.LBE638:
 2515               	.LBB640:
 2516               	.LBB641:
 177:timings.c     ****   PORTC |= data & 0x3F;
 2518               	.LM388:
 2519 0838 28B1      		in r18,0x8
 2520 083a 207C      		andi r18,lo8(-64)
 2521 083c 28B9      		out 0x8,r18
 178:timings.c     ****   PORTD &= ~0xC0;
 2523               	.LM389:
 2524 083e 38B1      		in r19,0x8
 2525 0840 272F      		mov r18,r23
 2526 0842 232B      		or r18,r19
 2527 0844 28B9      		out 0x8,r18
 179:timings.c     ****   PORTD |= data & 0xC0;
 2529               	.LM390:
 2530 0846 2BB1      		in r18,0xb
 2531 0848 2F73      		andi r18,lo8(63)
 2532 084a 2BB9      		out 0xb,r18
 180:timings.c     **** }
 2534               	.LM391:
 2535 084c 3BB1      		in r19,0xb
 2536 084e 262F      		mov r18,r22
 2537 0850 207C      		andi r18,lo8(-64)
 2538 0852 232B      		or r18,r19
 2539 0854 2BB9      		out 0xb,r18
 2540               	.LBE641:
 2541               	.LBE640:
 209:timings.c     ****   reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
 2543               	.LM392:
 2544 0856 5A98      		cbi 0xb,2
 210:timings.c     ****   // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
 2546               	.LM393:
 2547 0858 5C98      		cbi 0xb,4
 212:timings.c     ****   set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
 2549               	.LM394:
 2550 085a 5C9A      		sbi 0xb,4
 213:timings.c     **** }
 2552               	.LM395:
 2553 085c 5A9A      		sbi 0xb,2
 2554               	.LBE637:
 2555               	.LBE636:
 2556               	.LBE623:
 2557               	.LBE622:
 246:timings.c     ****     write_vram(addr, read_vram(addr + (64*8)));
 2559               	.LM396:
 2560 085e 0196      		adiw r24,1
 2561 0860 8115      		cp r24,__zero_reg__
 2562 0862 2EE5      		ldi r18,94
 2563 0864 9207      		cpc r25,r18
 2564 0866 01F0      		breq .+2
 2565 0868 00C0      		rjmp .L34
 2566               	.L35:
 2567               	.LBB642:
 2568               	.LBB643:
 2569               	.LBB644:
 2570               	.LBB645:
 2571               	.LBB646:
 2572               	.LBB647:
 194:timings.c     ****   }
 2574               	.LM397:
 2575 086a 2898      		cbi 0x5,0
 200:timings.c     ****   }
 2577               	.LM398:
 2578 086c 2998      		cbi 0x5,1
 2579               	.LBE647:
 2580               	.LBE646:
 2581               	.LBB648:
 2582               	.LBB649:
 177:timings.c     ****   PORTC |= data & 0x3F;
 2584               	.LM399:
 2585 086e 28B1      		in r18,0x8
 2586 0870 207C      		andi r18,lo8(-64)
 2587 0872 28B9      		out 0x8,r18
 178:timings.c     ****   PORTD &= ~0xC0;
 2589               	.LM400:
 2590 0874 28B1      		in r18,0x8
 2591 0876 382F      		mov r19,r24
 2592 0878 3F73      		andi r19,lo8(63)
 2593 087a 232B      		or r18,r19
 2594 087c 28B9      		out 0x8,r18
 179:timings.c     ****   PORTD |= data & 0xC0;
 2596               	.LM401:
 2597 087e 2BB1      		in r18,0xb
 2598 0880 2F73      		andi r18,lo8(63)
 2599 0882 2BB9      		out 0xb,r18
 180:timings.c     **** }
 2601               	.LM402:
 2602 0884 2BB1      		in r18,0xb
 2603 0886 382F      		mov r19,r24
 2604 0888 307C      		andi r19,lo8(-64)
 2605 088a 232B      		or r18,r19
 2606 088c 2BB9      		out 0xb,r18
 2607               	.LBE649:
 2608               	.LBE648:
 209:timings.c     ****   reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
 2610               	.LM403:
 2611 088e 5A98      		cbi 0xb,2
 210:timings.c     ****   // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
 2613               	.LM404:
 2614 0890 5C98      		cbi 0xb,4
 212:timings.c     ****   set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
 2616               	.LM405:
 2617 0892 5C9A      		sbi 0xb,4
 213:timings.c     **** }
 2619               	.LM406:
 2620 0894 5A9A      		sbi 0xb,2
 2621               	.LBE645:
 2622               	.LBE644:
 2623               	.LBB650:
 2624               	.LBB651:
 2625               	.LBB652:
 2626               	.LBB653:
 192:timings.c     ****   } else {
 2628               	.LM407:
 2629 0896 289A      		sbi 0x5,0
 200:timings.c     ****   }
 2631               	.LM408:
 2632 0898 2998      		cbi 0x5,1
 2633               	.LBE653:
 2634               	.LBE652:
 2635               	.LBB654:
 2636               	.LBB655:
 177:timings.c     ****   PORTC |= data & 0x3F;
 2638               	.LM409:
 2639 089a 28B1      		in r18,0x8
 2640 089c 207C      		andi r18,lo8(-64)
 2641 089e 28B9      		out 0x8,r18
 178:timings.c     ****   PORTD &= ~0xC0;
 2643               	.LM410:
 2644 08a0 28B1      		in r18,0x8
 2645 08a2 392F      		mov r19,r25
 2646 08a4 3F73      		andi r19,lo8(63)
 2647 08a6 232B      		or r18,r19
 2648 08a8 28B9      		out 0x8,r18
 179:timings.c     ****   PORTD |= data & 0xC0;
 2650               	.LM411:
 2651 08aa 2BB1      		in r18,0xb
 2652 08ac 2F73      		andi r18,lo8(63)
 2653 08ae 2BB9      		out 0xb,r18
 180:timings.c     **** }
 2655               	.LM412:
 2656 08b0 5E9A      		sbi 0xb,6
 2657               	.LBE655:
 2658               	.LBE654:
 209:timings.c     ****   reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
 2660               	.LM413:
 2661 08b2 5A98      		cbi 0xb,2
 210:timings.c     ****   // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
 2663               	.LM414:
 2664 08b4 5C98      		cbi 0xb,4
 212:timings.c     ****   set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
 2666               	.LM415:
 2667 08b6 5C9A      		sbi 0xb,4
 213:timings.c     **** }
 2669               	.LM416:
 2670 08b8 5A9A      		sbi 0xb,2
 2671               	.LBE651:
 2672               	.LBE650:
 2673               	.LBB656:
 2674               	.LBB657:
 2675               	.LBB658:
 2676               	.LBB659:
 194:timings.c     ****   }
 2678               	.LM417:
 2679 08ba 2898      		cbi 0x5,0
 198:timings.c     ****   } else {
 2681               	.LM418:
 2682 08bc 299A      		sbi 0x5,1
 2683               	.LBE659:
 2684               	.LBE658:
 2685               	.LBB660:
 2686               	.LBB661:
 177:timings.c     ****   PORTC |= data & 0x3F;
 2688               	.LM419:
 2689 08be 28B1      		in r18,0x8
 2690 08c0 207C      		andi r18,lo8(-64)
 2691 08c2 28B9      		out 0x8,r18
 178:timings.c     ****   PORTD &= ~0xC0;
 2693               	.LM420:
 2694 08c4 28B1      		in r18,0x8
 2695 08c6 28B9      		out 0x8,r18
 179:timings.c     ****   PORTD |= data & 0xC0;
 2697               	.LM421:
 2698 08c8 2BB1      		in r18,0xb
 2699 08ca 2F73      		andi r18,lo8(63)
 2700 08cc 2BB9      		out 0xb,r18
 180:timings.c     **** }
 2702               	.LM422:
 2703 08ce 2BB1      		in r18,0xb
 2704 08d0 2BB9      		out 0xb,r18
 2705               	.LBE661:
 2706               	.LBE660:
 209:timings.c     ****   reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
 2708               	.LM423:
 2709 08d2 5A98      		cbi 0xb,2
 210:timings.c     ****   // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
 2711               	.LM424:
 2712 08d4 5C98      		cbi 0xb,4
 212:timings.c     ****   set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
 2714               	.LM425:
 2715 08d6 5C9A      		sbi 0xb,4
 213:timings.c     **** }
 2717               	.LM426:
 2718 08d8 5A9A      		sbi 0xb,2
 2719               	.LBE657:
 2720               	.LBE656:
 2721               	.LBE643:
 2722               	.LBE642:
 249:timings.c     ****     write_vram(addr, 0x00);
 2724               	.LM427:
 2725 08da 0196      		adiw r24,1
 2726 08dc 8115      		cp r24,__zero_reg__
 2727 08de 30E6      		ldi r19,96
 2728 08e0 9307      		cpc r25,r19
 2729 08e2 01F4      		brne .L35
 2730               	.LBE597:
 2731               	.LBE596:
 269:timings.c     ****     } else {
 2733               	.LM428:
 2734 08e4 8FE2      		ldi r24,lo8(47)
 2735 08e6 8093 0000 		sts _ZL8cursor_y,r24
 2736 08ea 00C0      		rjmp .L32
 2737               	.L38:
 2738               	.LBE664:
 2739               	.LBE667:
 2740               	.LBE670:
 2741               	.LBE673:
 2742               	.LBE675:
 458:timings.c     ****     puts(" Look Around You! ");
 459:timings.c     ****   }
 460:timings.c     **** 
 461:timings.c     ****   set_pin(HEARTBEAT_PORT_NAME, HEARTBEAT_PORT_BIT);
 2744               	.LM429:
 2745 08ec 589A      		sbi 0xb,0
 2746               	.LBB676:
 462:timings.c     **** 
 463:timings.c     ****   for(addr=0, y=0; y<384; y++) {
 2748               	.LM430:
 2749 08ee 1C82      		std Y+4,__zero_reg__
 2750 08f0 1B82      		std Y+3,__zero_reg__
 2751 08f2 1E82      		std Y+6,__zero_reg__
 2752 08f4 1D82      		std Y+5,__zero_reg__
 2753               	.LBB677:
 464:timings.c     ****     float v = y - 192.f;
 2755               	.LM431:
 2756 08f6 60E0      		ldi r22,0
 2757 08f8 70E0      		ldi r23,0
 2758 08fa 80E4      		ldi r24,lo8(64)
 2759 08fc 93EC      		ldi r25,lo8(-61)
 465:timings.c     ****     uint8_t c1 = 0xFF, c2 = 0x00, c3 = (y & 1) ? 0x55 : 0xAA;
 2761               	.LM432:
 2762 08fe 4AEA      		ldi r20,lo8(-86)
 2763 0900 242E      		mov r2,r20
 2764               	.LBB678:
 2765               	.LBB679:
 2766               	.LBB680:
 2767               	.LBB681:
 466:timings.c     ****     for(x=0; x<512; x+=8, addr++) {
 467:timings.c     ****       uint8_t b = 0;
 468:timings.c     ****       for(dx=0; dx<8; dx++) {
 469:timings.c     ****         float u = (x + dx) - 256.f;
 470:timings.c     ****         r2 = u*u + v*v;
 471:timings.c     ****         if(r2 < 190.f*190.f) {
 472:timings.c     ****           if(r2 < 128.f*123.f) {
 473:timings.c     ****             b |= c3 & (1<<(7-dx));
 474:timings.c     ****           } else {
 475:timings.c     ****             b |= c2 & (1<<(7-dx));
 476:timings.c     ****           }
 477:timings.c     ****         } else {
 478:timings.c     ****           b |= c1 & (1<<(7-dx));
 2769               	.LM433:
 2770 0902 AA24      		clr r10
 2771 0904 A394      		inc r10
 2772 0906 B12C      		mov r11,__zero_reg__
 2773 0908 BA82      		std Y+2,r11
 2774 090a A982      		std Y+1,r10
 2775               	.L40:
 2776 090c 9B01      		movw r18,r22
 2777 090e AC01      		movw r20,r24
 2778 0910 0E94 0000 		call __mulsf3
 2779 0914 2B01      		movw r4,r22
 2780 0916 3C01      		movw r6,r24
 2781               	.LBE681:
 2782               	.LBE680:
 2783               	.LBE679:
 2784               	.LBE678:
 465:timings.c     ****     uint8_t c1 = 0xFF, c2 = 0x00, c3 = (y & 1) ? 0x55 : 0xAA;
 2786               	.LM434:
 2787 0918 ED80      		ldd r14,Y+5
 2788 091a FE80      		ldd r15,Y+6
 2789               	.LBB706:
 466:timings.c     ****     for(x=0; x<512; x+=8, addr++) {
 2791               	.LM435:
 2792 091c C12C      		mov r12,__zero_reg__
 2793 091e D12C      		mov r13,__zero_reg__
 2794               	.L47:
 466:timings.c     ****     for(x=0; x<512; x+=8, addr++) {
 2796               	.LM436:
 2797 0920 8601      		movw r16,r12
 2798 0922 87E0      		ldi r24,lo8(7)
 2799 0924 90E0      		ldi r25,0
 2800 0926 9887      		std Y+8,r25
 2801 0928 8F83      		std Y+7,r24
 2802 092a 312C      		mov r3,__zero_reg__
 2803 092c 00C0      		rjmp .L46
 2804               	.L84:
 2805               	.LBB705:
 2806               	.LBB684:
 2807               	.LBB682:
 472:timings.c     ****             b |= c3 & (1<<(7-dx));
 2809               	.LM437:
 2810 092e 20E0      		ldi r18,0
 2811 0930 30E0      		ldi r19,0
 2812 0932 46E7      		ldi r20,lo8(118)
 2813 0934 56E4      		ldi r21,lo8(70)
 2814 0936 C501      		movw r24,r10
 2815 0938 B401      		movw r22,r8
 2816 093a 0E94 0000 		call __ltsf2
 2817 093e 87FF      		sbrs r24,7
 2818 0940 00C0      		rjmp .L44
 473:timings.c     ****           } else {
 2820               	.LM438:
 2821 0942 8981      		ldd r24,Y+1
 2822 0944 9A81      		ldd r25,Y+2
 2823 0946 0F80      		ldd r0,Y+7
 2824 0948 00C0      		rjmp 2f
 2825               		1:
 2826 094a 880F      		lsl r24
 2827 094c 991F      		rol r25
 2828               		2:
 2829 094e 0A94      		dec r0
 2830 0950 02F4      		brpl 1b
 2831 0952 8221      		and r24,r2
 2832 0954 382A      		or r3,r24
 2833               	.L44:
 2834 0956 EF81      		ldd r30,Y+7
 2835 0958 F885      		ldd r31,Y+8
 2836 095a 3197      		sbiw r30,1
 2837 095c F887      		std Y+8,r31
 2838 095e EF83      		std Y+7,r30
 2839 0960 0F5F      		subi r16,-1
 2840 0962 1F4F      		sbci r17,-1
 2841               	.LBE682:
 468:timings.c     ****         float u = (x + dx) - 256.f;
 2843               	.LM439:
 2844 0964 3196      		adiw r30,1
 2845 0966 01F0      		breq .L83
 2846               	.L46:
 2847               	.LBB683:
 469:timings.c     ****         r2 = u*u + v*v;
 2849               	.LM440:
 2850 0968 B801      		movw r22,r16
 2851 096a 80E0      		ldi r24,0
 2852 096c 90E0      		ldi r25,0
 2853 096e 0E94 0000 		call __floatunsisf
 2854 0972 20E0      		ldi r18,0
 2855 0974 30E0      		ldi r19,0
 2856 0976 40E8      		ldi r20,lo8(-128)
 2857 0978 53E4      		ldi r21,lo8(67)
 2858 097a 0E94 0000 		call __subsf3
 470:timings.c     ****         if(r2 < 190.f*190.f) {
 2860               	.LM441:
 2861 097e 9B01      		movw r18,r22
 2862 0980 AC01      		movw r20,r24
 2863 0982 0E94 0000 		call __mulsf3
 2864 0986 A301      		movw r20,r6
 2865 0988 9201      		movw r18,r4
 2866 098a 0E94 0000 		call __addsf3
 2867 098e 4B01      		movw r8,r22
 2868 0990 5C01      		movw r10,r24
 471:timings.c     ****           if(r2 < 128.f*123.f) {
 2870               	.LM442:
 2871 0992 20E0      		ldi r18,0
 2872 0994 34E0      		ldi r19,lo8(4)
 2873 0996 4DE0      		ldi r20,lo8(13)
 2874 0998 57E4      		ldi r21,lo8(71)
 2875 099a 0E94 0000 		call __ltsf2
 2876 099e 87FD      		sbrc r24,7
 2877 09a0 00C0      		rjmp .L84
 2879               	.LM443:
 2880 09a2 8981      		ldd r24,Y+1
 2881 09a4 9A81      		ldd r25,Y+2
 2882 09a6 0F80      		ldd r0,Y+7
 2883 09a8 00C0      		rjmp 2f
 2884               		1:
 2885 09aa 880F      		lsl r24
 2886 09ac 991F      		rol r25
 2887               		2:
 2888 09ae 0A94      		dec r0
 2889 09b0 02F4      		brpl 1b
 2890 09b2 382A      		or r3,r24
 2891 09b4 00C0      		rjmp .L44
 2892               	.L83:
 2893               	.LBE683:
 2894               	.LBE684:
 2895               	.LBB685:
 2896               	.LBB686:
 2897               	.LBB687:
 2898               	.LBB688:
 2899               	.LBB689:
 2900               	.LBB690:
 194:timings.c     ****   }
 2902               	.LM444:
 2903 09b6 2898      		cbi 0x5,0
 200:timings.c     ****   }
 2905               	.LM445:
 2906 09b8 2998      		cbi 0x5,1
 2907               	.LBE690:
 2908               	.LBE689:
 2909               	.LBB691:
 2910               	.LBB692:
 177:timings.c     ****   PORTC |= data & 0x3F;
 2912               	.LM446:
 2913 09ba 88B1      		in r24,0x8
 2914 09bc 807C      		andi r24,lo8(-64)
 2915 09be 88B9      		out 0x8,r24
 178:timings.c     ****   PORTD &= ~0xC0;
 2917               	.LM447:
 2918 09c0 88B1      		in r24,0x8
 2919 09c2 9E2D      		mov r25,r14
 2920 09c4 9F73      		andi r25,lo8(63)
 2921 09c6 892B      		or r24,r25
 2922 09c8 88B9      		out 0x8,r24
 179:timings.c     ****   PORTD |= data & 0xC0;
 2924               	.LM448:
 2925 09ca 8BB1      		in r24,0xb
 2926 09cc 8F73      		andi r24,lo8(63)
 2927 09ce 8BB9      		out 0xb,r24
 180:timings.c     **** }
 2929               	.LM449:
 2930 09d0 8BB1      		in r24,0xb
 2931 09d2 9E2D      		mov r25,r14
 2932 09d4 907C      		andi r25,lo8(-64)
 2933 09d6 892B      		or r24,r25
 2934 09d8 8BB9      		out 0xb,r24
 2935               	.LBE692:
 2936               	.LBE691:
 209:timings.c     ****   reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
 2938               	.LM450:
 2939 09da 5A98      		cbi 0xb,2
 210:timings.c     ****   // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
 2941               	.LM451:
 2942 09dc 5C98      		cbi 0xb,4
 212:timings.c     ****   set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
 2944               	.LM452:
 2945 09de 5C9A      		sbi 0xb,4
 213:timings.c     **** }
 2947               	.LM453:
 2948 09e0 5A9A      		sbi 0xb,2
 2949               	.LBE688:
 2950               	.LBE687:
 2951               	.LBB693:
 2952               	.LBB694:
 2953               	.LBB695:
 2954               	.LBB696:
 192:timings.c     ****   } else {
 2956               	.LM454:
 2957 09e2 289A      		sbi 0x5,0
 200:timings.c     ****   }
 2959               	.LM455:
 2960 09e4 2998      		cbi 0x5,1
 2961               	.LBE696:
 2962               	.LBE695:
 2963               	.LBB697:
 2964               	.LBB698:
 177:timings.c     ****   PORTC |= data & 0x3F;
 2966               	.LM456:
 2967 09e6 88B1      		in r24,0x8
 2968 09e8 807C      		andi r24,lo8(-64)
 2969 09ea 88B9      		out 0x8,r24
 178:timings.c     ****   PORTD &= ~0xC0;
 2971               	.LM457:
 2972 09ec 88B1      		in r24,0x8
 2973 09ee 9F2D      		mov r25,r15
 2974 09f0 9F73      		andi r25,lo8(63)
 2975 09f2 892B      		or r24,r25
 2976 09f4 88B9      		out 0x8,r24
 179:timings.c     ****   PORTD |= data & 0xC0;
 2978               	.LM458:
 2979 09f6 8BB1      		in r24,0xb
 2980 09f8 8F73      		andi r24,lo8(63)
 2981 09fa 8BB9      		out 0xb,r24
 180:timings.c     **** }
 2983               	.LM459:
 2984 09fc 8BB1      		in r24,0xb
 2985 09fe 9F2D      		mov r25,r15
 2986 0a00 907C      		andi r25,lo8(-64)
 2987 0a02 892B      		or r24,r25
 2988 0a04 8BB9      		out 0xb,r24
 2989               	.LBE698:
 2990               	.LBE697:
 209:timings.c     ****   reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
 2992               	.LM460:
 2993 0a06 5A98      		cbi 0xb,2
 210:timings.c     ****   // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
 2995               	.LM461:
 2996 0a08 5C98      		cbi 0xb,4
 212:timings.c     ****   set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
 2998               	.LM462:
 2999 0a0a 5C9A      		sbi 0xb,4
 213:timings.c     **** }
 3001               	.LM463:
 3002 0a0c 5A9A      		sbi 0xb,2
 3003               	.LBE694:
 3004               	.LBE693:
 3005               	.LBB699:
 3006               	.LBB700:
 3007               	.LBB701:
 3008               	.LBB702:
 194:timings.c     ****   }
 3010               	.LM464:
 3011 0a0e 2898      		cbi 0x5,0
 198:timings.c     ****   } else {
 3013               	.LM465:
 3014 0a10 299A      		sbi 0x5,1
 3015               	.LBE702:
 3016               	.LBE701:
 3017               	.LBB703:
 3018               	.LBB704:
 177:timings.c     ****   PORTC |= data & 0x3F;
 3020               	.LM466:
 3021 0a12 88B1      		in r24,0x8
 3022 0a14 807C      		andi r24,lo8(-64)
 3023 0a16 88B9      		out 0x8,r24
 178:timings.c     ****   PORTD &= ~0xC0;
 3025               	.LM467:
 3026 0a18 88B1      		in r24,0x8
 3027 0a1a 932D      		mov r25,r3
 3028 0a1c 9F73      		andi r25,lo8(63)
 3029 0a1e 892B      		or r24,r25
 3030 0a20 88B9      		out 0x8,r24
 179:timings.c     ****   PORTD |= data & 0xC0;
 3032               	.LM468:
 3033 0a22 8BB1      		in r24,0xb
 3034 0a24 8F73      		andi r24,lo8(63)
 3035 0a26 8BB9      		out 0xb,r24
 180:timings.c     **** }
 3037               	.LM469:
 3038 0a28 9BB1      		in r25,0xb
 3039 0a2a 832D      		mov r24,r3
 3040 0a2c 807C      		andi r24,lo8(-64)
 3041 0a2e 382E      		mov r3,r24
 3042 0a30 392A      		or r3,r25
 3043 0a32 3BB8      		out 0xb,r3
 3044               	.LBE704:
 3045               	.LBE703:
 209:timings.c     ****   reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
 3047               	.LM470:
 3048 0a34 5A98      		cbi 0xb,2
 210:timings.c     ****   // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
 3050               	.LM471:
 3051 0a36 5C98      		cbi 0xb,4
 212:timings.c     ****   set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
 3053               	.LM472:
 3054 0a38 5C9A      		sbi 0xb,4
 213:timings.c     **** }
 3056               	.LM473:
 3057 0a3a 5A9A      		sbi 0xb,2
 3058               	.LBE700:
 3059               	.LBE699:
 3060               	.LBE686:
 3061               	.LBE685:
 3062               	.LBE705:
 466:timings.c     ****       uint8_t b = 0;
 3064               	.LM474:
 3065 0a3c 38E0      		ldi r19,8
 3066 0a3e C30E      		add r12,r19
 3067 0a40 D11C      		adc r13,__zero_reg__
 3068 0a42 8FEF      		ldi r24,-1
 3069 0a44 E81A      		sub r14,r24
 3070 0a46 F80A      		sbc r15,r24
 3071 0a48 C114      		cp r12,__zero_reg__
 3072 0a4a 92E0      		ldi r25,2
 3073 0a4c D906      		cpc r13,r25
 3074 0a4e 01F0      		breq .+2
 3075 0a50 00C0      		rjmp .L47
 3076 0a52 ED81      		ldd r30,Y+5
 3077 0a54 FE81      		ldd r31,Y+6
 3078 0a56 E05C      		subi r30,-64
 3079 0a58 FF4F      		sbci r31,-1
 3080 0a5a FE83      		std Y+6,r31
 3081 0a5c ED83      		std Y+5,r30
 3082               	.LBE706:
 3083               	.LBE677:
 463:timings.c     ****     float v = y - 192.f;
 3085               	.LM475:
 3086 0a5e 2B81      		ldd r18,Y+3
 3087 0a60 3C81      		ldd r19,Y+4
 3088 0a62 2F5F      		subi r18,-1
 3089 0a64 3F4F      		sbci r19,-1
 3090 0a66 3C83      		std Y+4,r19
 3091 0a68 2B83      		std Y+3,r18
 3092 0a6a E115      		cp r30,__zero_reg__
 3093 0a6c F046      		sbci r31,96
 3094 0a6e 01F0      		breq .L85
 3095               	.LBB707:
 464:timings.c     ****     uint8_t c1 = 0xFF, c2 = 0x00, c3 = (y & 1) ? 0x55 : 0xAA;
 3097               	.LM476:
 3098 0a70 2B81      		ldd r18,Y+3
 3099 0a72 3C81      		ldd r19,Y+4
 3100 0a74 B901      		movw r22,r18
 3101 0a76 80E0      		ldi r24,0
 3102 0a78 90E0      		ldi r25,0
 3103 0a7a 0E94 0000 		call __floatunsisf
 3104 0a7e 20E0      		ldi r18,0
 3105 0a80 30E0      		ldi r19,0
 3106 0a82 40E4      		ldi r20,lo8(64)
 3107 0a84 53E4      		ldi r21,lo8(67)
 3108 0a86 0E94 0000 		call __subsf3
 465:timings.c     ****     for(x=0; x<512; x+=8, addr++) {
 3110               	.LM477:
 3111 0a8a 3B81      		ldd r19,Y+3
 3112 0a8c 30FF      		sbrs r19,0
 3113 0a8e 00C0      		rjmp .L55
 3114 0a90 35E5      		ldi r19,lo8(85)
 3115 0a92 232E      		mov r2,r19
 3116 0a94 00C0      		rjmp .L40
 3117               	.L55:
 3118 0a96 2AEA      		ldi r18,lo8(-86)
 3119 0a98 222E      		mov r2,r18
 3120 0a9a 00C0      		rjmp .L40
 3121               	.L85:
 3122               	.LBE707:
 3123 0a9c B4E1      		ldi r27,lo8(20)
 3124               	.L51:
 3125 0a9e 20E0      		ldi r18,0
 3126 0aa0 30E0      		ldi r19,0
 3127               	.L50:
 3128 0aa2 F901      		movw r30,r18
 3129 0aa4 E05C      		subi r30,-64
 3130 0aa6 FF4F      		sbci r31,-1
 3131               	.L49:
 3132               	.LBE676:
 3133               	.LBB708:
 3134               	.LBB709:
 3135               	.LBB710:
 3136               	.LBB711:
 3137               	.LBB712:
 3138               	.LBB713:
 3139               	.LBB714:
 194:timings.c     ****   }
 3141               	.LM478:
 3142 0aa8 2898      		cbi 0x5,0
 200:timings.c     ****   }
 3144               	.LM479:
 3145 0aaa 2998      		cbi 0x5,1
 3146               	.LBE714:
 3147               	.LBE713:
 3148               	.LBB715:
 3149               	.LBB716:
 177:timings.c     ****   PORTC |= data & 0x3F;
 3151               	.LM480:
 3152 0aac 88B1      		in r24,0x8
 3153 0aae 807C      		andi r24,lo8(-64)
 3154 0ab0 88B9      		out 0x8,r24
 178:timings.c     ****   PORTD &= ~0xC0;
 3156               	.LM481:
 3157 0ab2 88B1      		in r24,0x8
 3158 0ab4 722F      		mov r23,r18
 3159 0ab6 7F73      		andi r23,lo8(63)
 3160 0ab8 872B      		or r24,r23
 3161 0aba 88B9      		out 0x8,r24
 179:timings.c     ****   PORTD |= data & 0xC0;
 3163               	.LM482:
 3164 0abc 8BB1      		in r24,0xb
 3165 0abe 8F73      		andi r24,lo8(63)
 3166 0ac0 8BB9      		out 0xb,r24
 180:timings.c     **** }
 3168               	.LM483:
 3169 0ac2 8BB1      		in r24,0xb
 3170 0ac4 622F      		mov r22,r18
 3171 0ac6 607C      		andi r22,lo8(-64)
 3172 0ac8 862B      		or r24,r22
 3173 0aca 8BB9      		out 0xb,r24
 3174               	.LBE716:
 3175               	.LBE715:
 209:timings.c     ****   reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
 3177               	.LM484:
 3178 0acc 5A98      		cbi 0xb,2
 210:timings.c     ****   // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
 3180               	.LM485:
 3181 0ace 5C98      		cbi 0xb,4
 212:timings.c     ****   set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
 3183               	.LM486:
 3184 0ad0 5C9A      		sbi 0xb,4
 213:timings.c     **** }
 3186               	.LM487:
 3187 0ad2 5A9A      		sbi 0xb,2
 3188               	.LBE712:
 3189               	.LBE711:
 3190               	.LBB717:
 3191               	.LBB718:
 3192               	.LBB719:
 3193               	.LBB720:
 192:timings.c     ****   } else {
 3195               	.LM488:
 3196 0ad4 289A      		sbi 0x5,0
 200:timings.c     ****   }
 3198               	.LM489:
 3199 0ad6 2998      		cbi 0x5,1
 3200               	.LBE720:
 3201               	.LBE719:
 3202               	.LBB721:
 3203               	.LBB722:
 177:timings.c     ****   PORTC |= data & 0x3F;
 3205               	.LM490:
 3206 0ad8 88B1      		in r24,0x8
 3207 0ada 807C      		andi r24,lo8(-64)
 3208 0adc 88B9      		out 0x8,r24
 178:timings.c     ****   PORTD &= ~0xC0;
 3210               	.LM491:
 3211 0ade 88B1      		in r24,0x8
 3212 0ae0 532F      		mov r21,r19
 3213 0ae2 5F73      		andi r21,lo8(63)
 3214 0ae4 852B      		or r24,r21
 3215 0ae6 88B9      		out 0x8,r24
 179:timings.c     ****   PORTD |= data & 0xC0;
 3217               	.LM492:
 3218 0ae8 8BB1      		in r24,0xb
 3219 0aea 8F73      		andi r24,lo8(63)
 3220 0aec 8BB9      		out 0xb,r24
 180:timings.c     **** }
 3222               	.LM493:
 3223 0aee 8BB1      		in r24,0xb
 3224 0af0 432F      		mov r20,r19
 3225 0af2 407C      		andi r20,lo8(-64)
 3226 0af4 842B      		or r24,r20
 3227 0af6 8BB9      		out 0xb,r24
 3228               	.LBE722:
 3229               	.LBE721:
 209:timings.c     ****   reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
 3231               	.LM494:
 3232 0af8 5A98      		cbi 0xb,2
 210:timings.c     ****   // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
 3234               	.LM495:
 3235 0afa 5C98      		cbi 0xb,4
 212:timings.c     ****   set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
 3237               	.LM496:
 3238 0afc 5C9A      		sbi 0xb,4
 213:timings.c     **** }
 3240               	.LM497:
 3241 0afe 5A9A      		sbi 0xb,2
 3242               	.LBE718:
 3243               	.LBE717:
 3244               	.LBB723:
 3245               	.LBB724:
 3246               	.LBB725:
 3247               	.LBB726:
 194:timings.c     ****   }
 3249               	.LM498:
 3250 0b00 2898      		cbi 0x5,0
 198:timings.c     ****   } else {
 3252               	.LM499:
 3253 0b02 299A      		sbi 0x5,1
 3254               	.LBE726:
 3255               	.LBE725:
 219:timings.c     ****   reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
 3257               	.LM500:
 3258 0b04 5A9A      		sbi 0xb,2
 220:timings.c     ****   // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
 3260               	.LM501:
 3261 0b06 5C98      		cbi 0xb,4
 3262               	.LBB727:
 3263               	.LBB728:
 3264               	.LBB729:
 3265               	.LBB730:
 171:timings.c     ****     DDRD &= ~0xC0;
 3267               	.LM502:
 3268 0b08 87B1      		in r24,0x7
 3269 0b0a 807C      		andi r24,lo8(-64)
 3270 0b0c 87B9      		out 0x7,r24
 172:timings.c     ****   }
 3272               	.LM503:
 3273 0b0e 8AB1      		in r24,0xa
 3274 0b10 8F73      		andi r24,lo8(63)
 3275 0b12 8AB9      		out 0xa,r24
 3276               	.LBE730:
 3277               	.LBE729:
 185:timings.c     ****   set_databus_is_output(true);
 3279               	.LM504:
 3280 0b14 86B1      		in r24,0x6
 3281 0b16 99B1      		in r25,0x9
 3282               	.LBB731:
 3283               	.LBB732:
 168:timings.c     ****     DDRD |= 0xC0;
 3285               	.LM505:
 3286 0b18 A7B1      		in r26,0x7
 3287 0b1a AF63      		ori r26,lo8(63)
 3288 0b1c A7B9      		out 0x7,r26
 169:timings.c     ****   } else {
 3290               	.LM506:
 3291 0b1e AAB1      		in r26,0xa
 3292 0b20 A06C      		ori r26,lo8(-64)
 3293 0b22 AAB9      		out 0xa,r26
 3294               	.LBE732:
 3295               	.LBE731:
 3296               	.LBE728:
 3297               	.LBE727:
 223:timings.c     **** 
 3299               	.LM507:
 3300 0b24 5C9A      		sbi 0xb,4
 3301               	.LBE724:
 3302               	.LBE723:
 3303               	.LBE710:
 3304               	.LBE709:
 3305               	.LBB733:
 3306               	.LBB734:
 3307               	.LBB735:
 3308               	.LBB736:
 3309               	.LBB737:
 194:timings.c     ****   }
 3311               	.LM508:
 3312 0b26 2898      		cbi 0x5,0
 200:timings.c     ****   }
 3314               	.LM509:
 3315 0b28 2998      		cbi 0x5,1
 3316               	.LBE737:
 3317               	.LBE736:
 3318               	.LBB738:
 3319               	.LBB739:
 177:timings.c     ****   PORTC |= data & 0x3F;
 3321               	.LM510:
 3322 0b2a A8B1      		in r26,0x8
 3323 0b2c A07C      		andi r26,lo8(-64)
 3324 0b2e A8B9      		out 0x8,r26
 178:timings.c     ****   PORTD &= ~0xC0;
 3326               	.LM511:
 3327 0b30 A8B1      		in r26,0x8
 3328 0b32 7A2B      		or r23,r26
 3329 0b34 78B9      		out 0x8,r23
 179:timings.c     ****   PORTD |= data & 0xC0;
 3331               	.LM512:
 3332 0b36 7BB1      		in r23,0xb
 3333 0b38 7F73      		andi r23,lo8(63)
 3334 0b3a 7BB9      		out 0xb,r23
 180:timings.c     **** }
 3336               	.LM513:
 3337 0b3c 7BB1      		in r23,0xb
 3338 0b3e 672B      		or r22,r23
 3339 0b40 6BB9      		out 0xb,r22
 3340               	.LBE739:
 3341               	.LBE738:
 209:timings.c     ****   reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
 3343               	.LM514:
 3344 0b42 5A98      		cbi 0xb,2
 210:timings.c     ****   // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
 3346               	.LM515:
 3347 0b44 5C98      		cbi 0xb,4
 212:timings.c     ****   set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
 3349               	.LM516:
 3350 0b46 5C9A      		sbi 0xb,4
 213:timings.c     **** }
 3352               	.LM517:
 3353 0b48 5A9A      		sbi 0xb,2
 3354               	.LBE735:
 3355               	.LBE734:
 3356               	.LBB740:
 3357               	.LBB741:
 3358               	.LBB742:
 3359               	.LBB743:
 192:timings.c     ****   } else {
 3361               	.LM518:
 3362 0b4a 289A      		sbi 0x5,0
 200:timings.c     ****   }
 3364               	.LM519:
 3365 0b4c 2998      		cbi 0x5,1
 3366               	.LBE743:
 3367               	.LBE742:
 3368               	.LBB744:
 3369               	.LBB745:
 177:timings.c     ****   PORTC |= data & 0x3F;
 3371               	.LM520:
 3372 0b4e 68B1      		in r22,0x8
 3373 0b50 607C      		andi r22,lo8(-64)
 3374 0b52 68B9      		out 0x8,r22
 178:timings.c     ****   PORTD &= ~0xC0;
 3376               	.LM521:
 3377 0b54 68B1      		in r22,0x8
 3378 0b56 562B      		or r21,r22
 3379 0b58 58B9      		out 0x8,r21
 179:timings.c     ****   PORTD |= data & 0xC0;
 3381               	.LM522:
 3382 0b5a 5BB1      		in r21,0xb
 3383 0b5c 5F73      		andi r21,lo8(63)
 3384 0b5e 5BB9      		out 0xb,r21
 180:timings.c     **** }
 3386               	.LM523:
 3387 0b60 5BB1      		in r21,0xb
 3388 0b62 452B      		or r20,r21
 3389 0b64 4BB9      		out 0xb,r20
 3390               	.LBE745:
 3391               	.LBE744:
 209:timings.c     ****   reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
 3393               	.LM524:
 3394 0b66 5A98      		cbi 0xb,2
 210:timings.c     ****   // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
 3396               	.LM525:
 3397 0b68 5C98      		cbi 0xb,4
 212:timings.c     ****   set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
 3399               	.LM526:
 3400 0b6a 5C9A      		sbi 0xb,4
 213:timings.c     **** }
 3402               	.LM527:
 3403 0b6c 5A9A      		sbi 0xb,2
 3404               	.LBE741:
 3405               	.LBE740:
 3406               	.LBB746:
 3407               	.LBB747:
 3408               	.LBB748:
 3409               	.LBB749:
 194:timings.c     ****   }
 3411               	.LM528:
 3412 0b6e 2898      		cbi 0x5,0
 198:timings.c     ****   } else {
 3414               	.LM529:
 3415 0b70 299A      		sbi 0x5,1
 3416               	.LBE749:
 3417               	.LBE748:
 3418               	.LBB750:
 3419               	.LBB751:
 177:timings.c     ****   PORTC |= data & 0x3F;
 3421               	.LM530:
 3422 0b72 48B1      		in r20,0x8
 3423 0b74 407C      		andi r20,lo8(-64)
 3424 0b76 48B9      		out 0x8,r20
 178:timings.c     ****   PORTD &= ~0xC0;
 3426               	.LM531:
 3427 0b78 48B1      		in r20,0x8
 3428 0b7a 582F      		mov r21,r24
 3429 0b7c 5F73      		andi r21,lo8(63)
 3430 0b7e 892F      		mov r24,r25
 3431 0b80 807C      		andi r24,lo8(-64)
 3432 0b82 852B      		or r24,r21
 3433 0b84 8095      		com r24
 3434 0b86 982F      		mov r25,r24
 3435 0b88 9F73      		andi r25,lo8(63)
 3436 0b8a 942B      		or r25,r20
 3437 0b8c 98B9      		out 0x8,r25
 179:timings.c     ****   PORTD |= data & 0xC0;
 3439               	.LM532:
 3440 0b8e 9BB1      		in r25,0xb
 3441 0b90 9F73      		andi r25,lo8(63)
 3442 0b92 9BB9      		out 0xb,r25
 180:timings.c     **** }
 3444               	.LM533:
 3445 0b94 9BB1      		in r25,0xb
 3446 0b96 807C      		andi r24,lo8(-64)
 3447 0b98 892B      		or r24,r25
 3448 0b9a 8BB9      		out 0xb,r24
 3449               	.LBE751:
 3450               	.LBE750:
 209:timings.c     ****   reset_pin(DSB_PORT_NAME, DSB_PORT_BIT);
 3452               	.LM534:
 3453 0b9c 5A98      		cbi 0xb,2
 210:timings.c     ****   // while(!read_pin(WAITB_PORT_NAME, WAITB_PORT_BIT)) { };
 3455               	.LM535:
 3456 0b9e 5C98      		cbi 0xb,4
 212:timings.c     ****   set_pin(WRB_PORT_NAME, WRB_PORT_BIT);
 3458               	.LM536:
 3459 0ba0 5C9A      		sbi 0xb,4
 213:timings.c     **** }
 3461               	.LM537:
 3462 0ba2 5A9A      		sbi 0xb,2
 3463               	.LBE747:
 3464               	.LBE746:
 3465               	.LBE733:
 479:timings.c     ****         }
 480:timings.c     ****       }
 481:timings.c     ****       write_vram(addr, b);
 482:timings.c     ****     }
 483:timings.c     ****   }
 484:timings.c     **** 
 485:timings.c     ****   for(uint8_t i=0; i<20; ++i) {
 486:timings.c     ****     for(addr=0, y=0; y<384; y++) {
 487:timings.c     ****       for(x=0; x<512; x+=8, addr++) {
 3467               	.LM538:
 3468 0ba4 2F5F      		subi r18,-1
 3469 0ba6 3F4F      		sbci r19,-1
 3470 0ba8 2E17      		cp r18,r30
 3471 0baa 3F07      		cpc r19,r31
 3472 0bac 01F0      		breq .+2
 3473 0bae 00C0      		rjmp .L49
 486:timings.c     ****       for(x=0; x<512; x+=8, addr++) {
 3475               	.LM539:
 3476 0bb0 2115      		cp r18,__zero_reg__
 3477 0bb2 80E6      		ldi r24,96
 3478 0bb4 3807      		cpc r19,r24
 3479 0bb6 01F0      		breq .+2
 3480 0bb8 00C0      		rjmp .L50
 3481 0bba B150      		subi r27,lo8(-(-1))
 485:timings.c     ****     for(addr=0, y=0; y<384; y++) {
 3483               	.LM540:
 3484 0bbc 01F0      		breq .+2
 3485 0bbe 00C0      		rjmp .L51
 3486               	.LBE708:
 488:timings.c     ****         write_vram(addr, ~read_vram(addr));
 489:timings.c     ****       }
 490:timings.c     ****     }
 491:timings.c     ****   }
 492:timings.c     **** 
 493:timings.c     ****   reset_pin(HEARTBEAT_PORT_NAME, HEARTBEAT_PORT_BIT);
 3488               	.LM541:
 3489 0bc0 5898      		cbi 0xb,0
 3490               	/* epilogue start */
 494:timings.c     **** #else
 495:timings.c     ****   set_pin(HEARTBEAT_PORT_NAME, HEARTBEAT_PORT_BIT);
 496:timings.c     ****   _delay_ms(500);
 497:timings.c     ****   reset_pin(HEARTBEAT_PORT_NAME, HEARTBEAT_PORT_BIT);
 498:timings.c     ****   _delay_ms(500);
 499:timings.c     **** #endif
 500:timings.c     **** }
 3492               	.LM542:
 3493 0bc2 2896      		adiw r28,8
 3494 0bc4 0FB6      		in __tmp_reg__,__SREG__
 3495 0bc6 F894      		cli
 3496 0bc8 DEBF      		out __SP_H__,r29
 3497 0bca 0FBE      		out __SREG__,__tmp_reg__
 3498 0bcc CDBF      		out __SP_L__,r28
 3499 0bce DF91      		pop r29
 3500 0bd0 CF91      		pop r28
 3501 0bd2 1F91      		pop r17
 3502 0bd4 0F91      		pop r16
 3503 0bd6 FF90      		pop r15
 3504 0bd8 EF90      		pop r14
 3505 0bda DF90      		pop r13
 3506 0bdc CF90      		pop r12
 3507 0bde BF90      		pop r11
 3508 0be0 AF90      		pop r10
 3509 0be2 9F90      		pop r9
 3510 0be4 8F90      		pop r8
 3511 0be6 7F90      		pop r7
 3512 0be8 6F90      		pop r6
 3513 0bea 5F90      		pop r5
 3514 0bec 4F90      		pop r4
 3515 0bee 3F90      		pop r3
 3516 0bf0 2F90      		pop r2
 3517 0bf2 0895      		ret
 3560               	.Lscope3:
 3562               		.stabd	78,0,0
 3563               		.section	.text.startup,"ax",@progbits
 3565               	.global	main
 3567               	main:
 3568               		.stabd	46,0,0
 501:timings.c     **** 
 502:timings.c     **** int main() {
 3570               	.LM543:
 3571               	.LFBB4:
 3572               	/* prologue: function */
 3573               	/* frame size = 0 */
 3574               	/* stack size = 0 */
 3575               	.L__stack_usage = 0
 503:timings.c     ****   setup();
 3577               	.LM544:
 3578 0000 0E94 0000 		call _Z5setupv
 3579               	.L87:
 504:timings.c     **** 
 505:timings.c     ****   while(1) { loop(); };
 3581               	.LM545:
 3582 0004 0E94 0000 		call _Z4loopv
 3583 0008 00C0      		rjmp .L87
 3585               	.Lscope4:
 3587               		.stabd	78,0,0
 3588               		.data
 3591               	_ZL14scroll_enabled:
 3592 0000 01        		.byte	1
 3593               		.local	_ZL12inverse_text
 3594               		.comm	_ZL12inverse_text,1,1
 3595               		.local	_ZL8cursor_y
 3596               		.comm	_ZL8cursor_y,1,1
 3597               		.local	_ZL8cursor_x
 3598               		.comm	_ZL8cursor_x,1,1
 3599               		.section	.progmem.data,"a",@progbits
 3602               	_ZL4font:
 3603 0000 00        		.byte	0
 3604 0001 00        		.byte	0
 3605 0002 00        		.byte	0
 3606 0003 00        		.byte	0
 3607 0004 00        		.byte	0
 3608 0005 00        		.byte	0
 3609 0006 00        		.byte	0
 3610 0007 00        		.byte	0
 3611 0008 7E        		.byte	126
 3612 0009 81        		.byte	-127
 3613 000a A5        		.byte	-91
 3614 000b 81        		.byte	-127
 3615 000c BD        		.byte	-67
 3616 000d 99        		.byte	-103
 3617 000e 42        		.byte	66
 3618 000f 3C        		.byte	60
 3619 0010 7E        		.byte	126
 3620 0011 FF        		.byte	-1
 3621 0012 DB        		.byte	-37
 3622 0013 FF        		.byte	-1
 3623 0014 C3        		.byte	-61
 3624 0015 E7        		.byte	-25
 3625 0016 7E        		.byte	126
 3626 0017 3C        		.byte	60
 3627 0018 36        		.byte	54
 3628 0019 7F        		.byte	127
 3629 001a 7F        		.byte	127
 3630 001b 7F        		.byte	127
 3631 001c 3E        		.byte	62
 3632 001d 1C        		.byte	28
 3633 001e 08        		.byte	8
 3634 001f 00        		.byte	0
 3635 0020 08        		.byte	8
 3636 0021 1C        		.byte	28
 3637 0022 3E        		.byte	62
 3638 0023 7F        		.byte	127
 3639 0024 3E        		.byte	62
 3640 0025 1C        		.byte	28
 3641 0026 08        		.byte	8
 3642 0027 00        		.byte	0
 3643 0028 1C        		.byte	28
 3644 0029 3E        		.byte	62
 3645 002a 1C        		.byte	28
 3646 002b 7F        		.byte	127
 3647 002c 7F        		.byte	127
 3648 002d 6B        		.byte	107
 3649 002e 08        		.byte	8
 3650 002f 1C        		.byte	28
 3651 0030 08        		.byte	8
 3652 0031 08        		.byte	8
 3653 0032 1C        		.byte	28
 3654 0033 3E        		.byte	62
 3655 0034 7F        		.byte	127
 3656 0035 3E        		.byte	62
 3657 0036 08        		.byte	8
 3658 0037 1C        		.byte	28
 3659 0038 00        		.byte	0
 3660 0039 00        		.byte	0
 3661 003a 18        		.byte	24
 3662 003b 3C        		.byte	60
 3663 003c 3C        		.byte	60
 3664 003d 18        		.byte	24
 3665 003e 00        		.byte	0
 3666 003f 00        		.byte	0
 3667 0040 FF        		.byte	-1
 3668 0041 FF        		.byte	-1
 3669 0042 E7        		.byte	-25
 3670 0043 C3        		.byte	-61
 3671 0044 C3        		.byte	-61
 3672 0045 E7        		.byte	-25
 3673 0046 FF        		.byte	-1
 3674 0047 FF        		.byte	-1
 3675 0048 00        		.byte	0
 3676 0049 3C        		.byte	60
 3677 004a 66        		.byte	102
 3678 004b 42        		.byte	66
 3679 004c 42        		.byte	66
 3680 004d 66        		.byte	102
 3681 004e 3C        		.byte	60
 3682 004f 00        		.byte	0
 3683 0050 FF        		.byte	-1
 3684 0051 C3        		.byte	-61
 3685 0052 99        		.byte	-103
 3686 0053 BD        		.byte	-67
 3687 0054 BD        		.byte	-67
 3688 0055 99        		.byte	-103
 3689 0056 C3        		.byte	-61
 3690 0057 FF        		.byte	-1
 3691 0058 0F        		.byte	15
 3692 0059 07        		.byte	7
 3693 005a 0F        		.byte	15
 3694 005b 7D        		.byte	125
 3695 005c CC        		.byte	-52
 3696 005d CC        		.byte	-52
 3697 005e CC        		.byte	-52
 3698 005f 78        		.byte	120
 3699 0060 3C        		.byte	60
 3700 0061 66        		.byte	102
 3701 0062 66        		.byte	102
 3702 0063 66        		.byte	102
 3703 0064 3C        		.byte	60
 3704 0065 18        		.byte	24
 3705 0066 7E        		.byte	126
 3706 0067 18        		.byte	24
 3707 0068 08        		.byte	8
 3708 0069 0C        		.byte	12
 3709 006a 0E        		.byte	14
 3710 006b 0A        		.byte	10
 3711 006c 0A        		.byte	10
 3712 006d 38        		.byte	56
 3713 006e 78        		.byte	120
 3714 006f 30        		.byte	48
 3715 0070 00        		.byte	0
 3716 0071 3E        		.byte	62
 3717 0072 22        		.byte	34
 3718 0073 22        		.byte	34
 3719 0074 26        		.byte	38
 3720 0075 6E        		.byte	110
 3721 0076 E4        		.byte	-28
 3722 0077 40        		.byte	64
 3723 0078 18        		.byte	24
 3724 0079 DB        		.byte	-37
 3725 007a 3C        		.byte	60
 3726 007b E7        		.byte	-25
 3727 007c E7        		.byte	-25
 3728 007d 3C        		.byte	60
 3729 007e DB        		.byte	-37
 3730 007f 18        		.byte	24
 3731 0080 20        		.byte	32
 3732 0081 30        		.byte	48
 3733 0082 38        		.byte	56
 3734 0083 3C        		.byte	60
 3735 0084 38        		.byte	56
 3736 0085 30        		.byte	48
 3737 0086 20        		.byte	32
 3738 0087 00        		.byte	0
 3739 0088 04        		.byte	4
 3740 0089 0C        		.byte	12
 3741 008a 1C        		.byte	28
 3742 008b 3C        		.byte	60
 3743 008c 1C        		.byte	28
 3744 008d 0C        		.byte	12
 3745 008e 04        		.byte	4
 3746 008f 00        		.byte	0
 3747 0090 18        		.byte	24
 3748 0091 3C        		.byte	60
 3749 0092 7E        		.byte	126
 3750 0093 18        		.byte	24
 3751 0094 18        		.byte	24
 3752 0095 7E        		.byte	126
 3753 0096 3C        		.byte	60
 3754 0097 18        		.byte	24
 3755 0098 66        		.byte	102
 3756 0099 66        		.byte	102
 3757 009a 66        		.byte	102
 3758 009b 66        		.byte	102
 3759 009c 66        		.byte	102
 3760 009d 00        		.byte	0
 3761 009e 66        		.byte	102
 3762 009f 00        		.byte	0
 3763 00a0 7F        		.byte	127
 3764 00a1 DB        		.byte	-37
 3765 00a2 DB        		.byte	-37
 3766 00a3 7B        		.byte	123
 3767 00a4 1B        		.byte	27
 3768 00a5 1B        		.byte	27
 3769 00a6 1B        		.byte	27
 3770 00a7 00        		.byte	0
 3771 00a8 3C        		.byte	60
 3772 00a9 60        		.byte	96
 3773 00aa 3C        		.byte	60
 3774 00ab 66        		.byte	102
 3775 00ac 3C        		.byte	60
 3776 00ad 06        		.byte	6
 3777 00ae 3C        		.byte	60
 3778 00af 00        		.byte	0
 3779 00b0 00        		.byte	0
 3780 00b1 00        		.byte	0
 3781 00b2 00        		.byte	0
 3782 00b3 00        		.byte	0
 3783 00b4 7E        		.byte	126
 3784 00b5 7E        		.byte	126
 3785 00b6 00        		.byte	0
 3786 00b7 00        		.byte	0
 3787 00b8 18        		.byte	24
 3788 00b9 3C        		.byte	60
 3789 00ba 7E        		.byte	126
 3790 00bb 18        		.byte	24
 3791 00bc 7E        		.byte	126
 3792 00bd 3C        		.byte	60
 3793 00be 18        		.byte	24
 3794 00bf FF        		.byte	-1
 3795 00c0 18        		.byte	24
 3796 00c1 3C        		.byte	60
 3797 00c2 7E        		.byte	126
 3798 00c3 18        		.byte	24
 3799 00c4 18        		.byte	24
 3800 00c5 18        		.byte	24
 3801 00c6 18        		.byte	24
 3802 00c7 00        		.byte	0
 3803 00c8 18        		.byte	24
 3804 00c9 18        		.byte	24
 3805 00ca 18        		.byte	24
 3806 00cb 18        		.byte	24
 3807 00cc 7E        		.byte	126
 3808 00cd 3C        		.byte	60
 3809 00ce 18        		.byte	24
 3810 00cf 00        		.byte	0
 3811 00d0 00        		.byte	0
 3812 00d1 0C        		.byte	12
 3813 00d2 06        		.byte	6
 3814 00d3 7F        		.byte	127
 3815 00d4 06        		.byte	6
 3816 00d5 0C        		.byte	12
 3817 00d6 00        		.byte	0
 3818 00d7 00        		.byte	0
 3819 00d8 00        		.byte	0
 3820 00d9 18        		.byte	24
 3821 00da 30        		.byte	48
 3822 00db 7F        		.byte	127
 3823 00dc 30        		.byte	48
 3824 00dd 18        		.byte	24
 3825 00de 00        		.byte	0
 3826 00df 00        		.byte	0
 3827 00e0 00        		.byte	0
 3828 00e1 00        		.byte	0
 3829 00e2 60        		.byte	96
 3830 00e3 60        		.byte	96
 3831 00e4 60        		.byte	96
 3832 00e5 7E        		.byte	126
 3833 00e6 00        		.byte	0
 3834 00e7 00        		.byte	0
 3835 00e8 00        		.byte	0
 3836 00e9 24        		.byte	36
 3837 00ea 66        		.byte	102
 3838 00eb FF        		.byte	-1
 3839 00ec 66        		.byte	102
 3840 00ed 24        		.byte	36
 3841 00ee 00        		.byte	0
 3842 00ef 00        		.byte	0
 3843 00f0 00        		.byte	0
 3844 00f1 08        		.byte	8
 3845 00f2 1C        		.byte	28
 3846 00f3 3E        		.byte	62
 3847 00f4 7F        		.byte	127
 3848 00f5 00        		.byte	0
 3849 00f6 00        		.byte	0
 3850 00f7 00        		.byte	0
 3851 00f8 00        		.byte	0
 3852 00f9 00        		.byte	0
 3853 00fa 7F        		.byte	127
 3854 00fb 3E        		.byte	62
 3855 00fc 1C        		.byte	28
 3856 00fd 08        		.byte	8
 3857 00fe 00        		.byte	0
 3858 00ff 00        		.byte	0
 3859 0100 00        		.byte	0
 3860 0101 00        		.byte	0
 3861 0102 00        		.byte	0
 3862 0103 00        		.byte	0
 3863 0104 00        		.byte	0
 3864 0105 00        		.byte	0
 3865 0106 00        		.byte	0
 3866 0107 00        		.byte	0
 3867 0108 18        		.byte	24
 3868 0109 3C        		.byte	60
 3869 010a 3C        		.byte	60
 3870 010b 18        		.byte	24
 3871 010c 18        		.byte	24
 3872 010d 00        		.byte	0
 3873 010e 18        		.byte	24
 3874 010f 00        		.byte	0
 3875 0110 36        		.byte	54
 3876 0111 36        		.byte	54
 3877 0112 36        		.byte	54
 3878 0113 00        		.byte	0
 3879 0114 00        		.byte	0
 3880 0115 00        		.byte	0
 3881 0116 00        		.byte	0
 3882 0117 00        		.byte	0
 3883 0118 36        		.byte	54
 3884 0119 36        		.byte	54
 3885 011a 7F        		.byte	127
 3886 011b 36        		.byte	54
 3887 011c 7F        		.byte	127
 3888 011d 36        		.byte	54
 3889 011e 36        		.byte	54
 3890 011f 00        		.byte	0
 3891 0120 18        		.byte	24
 3892 0121 3E        		.byte	62
 3893 0122 60        		.byte	96
 3894 0123 3C        		.byte	60
 3895 0124 06        		.byte	6
 3896 0125 7C        		.byte	124
 3897 0126 18        		.byte	24
 3898 0127 00        		.byte	0
 3899 0128 60        		.byte	96
 3900 0129 66        		.byte	102
 3901 012a 0C        		.byte	12
 3902 012b 18        		.byte	24
 3903 012c 30        		.byte	48
 3904 012d 66        		.byte	102
 3905 012e 06        		.byte	6
 3906 012f 00        		.byte	0
 3907 0130 38        		.byte	56
 3908 0131 66        		.byte	102
 3909 0132 66        		.byte	102
 3910 0133 3F        		.byte	63
 3911 0134 66        		.byte	102
 3912 0135 66        		.byte	102
 3913 0136 3B        		.byte	59
 3914 0137 00        		.byte	0
 3915 0138 1C        		.byte	28
 3916 0139 18        		.byte	24
 3917 013a 30        		.byte	48
 3918 013b 00        		.byte	0
 3919 013c 00        		.byte	0
 3920 013d 00        		.byte	0
 3921 013e 00        		.byte	0
 3922 013f 00        		.byte	0
 3923 0140 0C        		.byte	12
 3924 0141 18        		.byte	24
 3925 0142 30        		.byte	48
 3926 0143 30        		.byte	48
 3927 0144 30        		.byte	48
 3928 0145 18        		.byte	24
 3929 0146 0C        		.byte	12
 3930 0147 00        		.byte	0
 3931 0148 30        		.byte	48
 3932 0149 18        		.byte	24
 3933 014a 0C        		.byte	12
 3934 014b 0C        		.byte	12
 3935 014c 0C        		.byte	12
 3936 014d 18        		.byte	24
 3937 014e 30        		.byte	48
 3938 014f 00        		.byte	0
 3939 0150 00        		.byte	0
 3940 0151 66        		.byte	102
 3941 0152 3C        		.byte	60
 3942 0153 FF        		.byte	-1
 3943 0154 3C        		.byte	60
 3944 0155 66        		.byte	102
 3945 0156 00        		.byte	0
 3946 0157 00        		.byte	0
 3947 0158 00        		.byte	0
 3948 0159 18        		.byte	24
 3949 015a 18        		.byte	24
 3950 015b 7E        		.byte	126
 3951 015c 18        		.byte	24
 3952 015d 18        		.byte	24
 3953 015e 00        		.byte	0
 3954 015f 00        		.byte	0
 3955 0160 00        		.byte	0
 3956 0161 00        		.byte	0
 3957 0162 00        		.byte	0
 3958 0163 00        		.byte	0
 3959 0164 00        		.byte	0
 3960 0165 18        		.byte	24
 3961 0166 18        		.byte	24
 3962 0167 30        		.byte	48
 3963 0168 00        		.byte	0
 3964 0169 00        		.byte	0
 3965 016a 00        		.byte	0
 3966 016b 7E        		.byte	126
 3967 016c 00        		.byte	0
 3968 016d 00        		.byte	0
 3969 016e 00        		.byte	0
 3970 016f 00        		.byte	0
 3971 0170 00        		.byte	0
 3972 0171 00        		.byte	0
 3973 0172 00        		.byte	0
 3974 0173 00        		.byte	0
 3975 0174 00        		.byte	0
 3976 0175 18        		.byte	24
 3977 0176 18        		.byte	24
 3978 0177 00        		.byte	0
 3979 0178 00        		.byte	0
 3980 0179 06        		.byte	6
 3981 017a 0C        		.byte	12
 3982 017b 18        		.byte	24
 3983 017c 30        		.byte	48
 3984 017d 60        		.byte	96
 3985 017e 00        		.byte	0
 3986 017f 00        		.byte	0
 3987 0180 3C        		.byte	60
 3988 0181 66        		.byte	102
 3989 0182 6E        		.byte	110
 3990 0183 7E        		.byte	126
 3991 0184 76        		.byte	118
 3992 0185 66        		.byte	102
 3993 0186 3C        		.byte	60
 3994 0187 00        		.byte	0
 3995 0188 18        		.byte	24
 3996 0189 38        		.byte	56
 3997 018a 18        		.byte	24
 3998 018b 18        		.byte	24
 3999 018c 18        		.byte	24
 4000 018d 18        		.byte	24
 4001 018e 7E        		.byte	126
 4002 018f 00        		.byte	0
 4003 0190 3C        		.byte	60
 4004 0191 66        		.byte	102
 4005 0192 06        		.byte	6
 4006 0193 1C        		.byte	28
 4007 0194 30        		.byte	48
 4008 0195 66        		.byte	102
 4009 0196 7E        		.byte	126
 4010 0197 00        		.byte	0
 4011 0198 3C        		.byte	60
 4012 0199 66        		.byte	102
 4013 019a 06        		.byte	6
 4014 019b 1C        		.byte	28
 4015 019c 06        		.byte	6
 4016 019d 66        		.byte	102
 4017 019e 3C        		.byte	60
 4018 019f 00        		.byte	0
 4019 01a0 0E        		.byte	14
 4020 01a1 1E        		.byte	30
 4021 01a2 36        		.byte	54
 4022 01a3 66        		.byte	102
 4023 01a4 7F        		.byte	127
 4024 01a5 06        		.byte	6
 4025 01a6 0F        		.byte	15
 4026 01a7 00        		.byte	0
 4027 01a8 7E        		.byte	126
 4028 01a9 60        		.byte	96
 4029 01aa 60        		.byte	96
 4030 01ab 7C        		.byte	124
 4031 01ac 06        		.byte	6
 4032 01ad 66        		.byte	102
 4033 01ae 3C        		.byte	60
 4034 01af 00        		.byte	0
 4035 01b0 1C        		.byte	28
 4036 01b1 30        		.byte	48
 4037 01b2 60        		.byte	96
 4038 01b3 7C        		.byte	124
 4039 01b4 66        		.byte	102
 4040 01b5 66        		.byte	102
 4041 01b6 3C        		.byte	60
 4042 01b7 00        		.byte	0
 4043 01b8 7E        		.byte	126
 4044 01b9 66        		.byte	102
 4045 01ba 06        		.byte	6
 4046 01bb 0C        		.byte	12
 4047 01bc 18        		.byte	24
 4048 01bd 18        		.byte	24
 4049 01be 18        		.byte	24
 4050 01bf 00        		.byte	0
 4051 01c0 3C        		.byte	60
 4052 01c1 66        		.byte	102
 4053 01c2 66        		.byte	102
 4054 01c3 3C        		.byte	60
 4055 01c4 66        		.byte	102
 4056 01c5 66        		.byte	102
 4057 01c6 3C        		.byte	60
 4058 01c7 00        		.byte	0
 4059 01c8 3C        		.byte	60
 4060 01c9 66        		.byte	102
 4061 01ca 66        		.byte	102
 4062 01cb 3E        		.byte	62
 4063 01cc 06        		.byte	6
 4064 01cd 0C        		.byte	12
 4065 01ce 38        		.byte	56
 4066 01cf 00        		.byte	0
 4067 01d0 00        		.byte	0
 4068 01d1 00        		.byte	0
 4069 01d2 18        		.byte	24
 4070 01d3 18        		.byte	24
 4071 01d4 00        		.byte	0
 4072 01d5 18        		.byte	24
 4073 01d6 18        		.byte	24
 4074 01d7 00        		.byte	0
 4075 01d8 00        		.byte	0
 4076 01d9 00        		.byte	0
 4077 01da 18        		.byte	24
 4078 01db 18        		.byte	24
 4079 01dc 00        		.byte	0
 4080 01dd 18        		.byte	24
 4081 01de 18        		.byte	24
 4082 01df 30        		.byte	48
 4083 01e0 0C        		.byte	12
 4084 01e1 18        		.byte	24
 4085 01e2 30        		.byte	48
 4086 01e3 60        		.byte	96
 4087 01e4 30        		.byte	48
 4088 01e5 18        		.byte	24
 4089 01e6 0C        		.byte	12
 4090 01e7 00        		.byte	0
 4091 01e8 00        		.byte	0
 4092 01e9 00        		.byte	0
 4093 01ea 7E        		.byte	126
 4094 01eb 00        		.byte	0
 4095 01ec 7E        		.byte	126
 4096 01ed 00        		.byte	0
 4097 01ee 00        		.byte	0
 4098 01ef 00        		.byte	0
 4099 01f0 30        		.byte	48
 4100 01f1 18        		.byte	24
 4101 01f2 0C        		.byte	12
 4102 01f3 06        		.byte	6
 4103 01f4 0C        		.byte	12
 4104 01f5 18        		.byte	24
 4105 01f6 30        		.byte	48
 4106 01f7 00        		.byte	0
 4107 01f8 3C        		.byte	60
 4108 01f9 66        		.byte	102
 4109 01fa 06        		.byte	6
 4110 01fb 0C        		.byte	12
 4111 01fc 18        		.byte	24
 4112 01fd 00        		.byte	0
 4113 01fe 18        		.byte	24
 4114 01ff 00        		.byte	0
 4115 0200 3C        		.byte	60
 4116 0201 66        		.byte	102
 4117 0202 6E        		.byte	110
 4118 0203 6A        		.byte	106
 4119 0204 6E        		.byte	110
 4120 0205 60        		.byte	96
 4121 0206 3C        		.byte	60
 4122 0207 00        		.byte	0
 4123 0208 3C        		.byte	60
 4124 0209 66        		.byte	102
 4125 020a 66        		.byte	102
 4126 020b 7E        		.byte	126
 4127 020c 66        		.byte	102
 4128 020d 66        		.byte	102
 4129 020e 66        		.byte	102
 4130 020f 00        		.byte	0
 4131 0210 7C        		.byte	124
 4132 0211 66        		.byte	102
 4133 0212 66        		.byte	102
 4134 0213 7C        		.byte	124
 4135 0214 66        		.byte	102
 4136 0215 66        		.byte	102
 4137 0216 7C        		.byte	124
 4138 0217 00        		.byte	0
 4139 0218 3C        		.byte	60
 4140 0219 66        		.byte	102
 4141 021a 60        		.byte	96
 4142 021b 60        		.byte	96
 4143 021c 60        		.byte	96
 4144 021d 66        		.byte	102
 4145 021e 3C        		.byte	60
 4146 021f 00        		.byte	0
 4147 0220 78        		.byte	120
 4148 0221 6C        		.byte	108
 4149 0222 66        		.byte	102
 4150 0223 66        		.byte	102
 4151 0224 66        		.byte	102
 4152 0225 6C        		.byte	108
 4153 0226 78        		.byte	120
 4154 0227 00        		.byte	0
 4155 0228 7E        		.byte	126
 4156 0229 60        		.byte	96
 4157 022a 60        		.byte	96
 4158 022b 7C        		.byte	124
 4159 022c 60        		.byte	96
 4160 022d 60        		.byte	96
 4161 022e 7E        		.byte	126
 4162 022f 00        		.byte	0
 4163 0230 7E        		.byte	126
 4164 0231 60        		.byte	96
 4165 0232 60        		.byte	96
 4166 0233 7C        		.byte	124
 4167 0234 60        		.byte	96
 4168 0235 60        		.byte	96
 4169 0236 60        		.byte	96
 4170 0237 00        		.byte	0
 4171 0238 3C        		.byte	60
 4172 0239 66        		.byte	102
 4173 023a 60        		.byte	96
 4174 023b 6E        		.byte	110
 4175 023c 66        		.byte	102
 4176 023d 66        		.byte	102
 4177 023e 3C        		.byte	60
 4178 023f 00        		.byte	0
 4179 0240 66        		.byte	102
 4180 0241 66        		.byte	102
 4181 0242 66        		.byte	102
 4182 0243 7E        		.byte	126
 4183 0244 66        		.byte	102
 4184 0245 66        		.byte	102
 4185 0246 66        		.byte	102
 4186 0247 00        		.byte	0
 4187 0248 3C        		.byte	60
 4188 0249 18        		.byte	24
 4189 024a 18        		.byte	24
 4190 024b 18        		.byte	24
 4191 024c 18        		.byte	24
 4192 024d 18        		.byte	24
 4193 024e 3C        		.byte	60
 4194 024f 00        		.byte	0
 4195 0250 0E        		.byte	14
 4196 0251 06        		.byte	6
 4197 0252 06        		.byte	6
 4198 0253 06        		.byte	6
 4199 0254 66        		.byte	102
 4200 0255 66        		.byte	102
 4201 0256 3C        		.byte	60
 4202 0257 00        		.byte	0
 4203 0258 66        		.byte	102
 4204 0259 66        		.byte	102
 4205 025a 6C        		.byte	108
 4206 025b 78        		.byte	120
 4207 025c 6C        		.byte	108
 4208 025d 66        		.byte	102
 4209 025e 66        		.byte	102
 4210 025f 00        		.byte	0
 4211 0260 60        		.byte	96
 4212 0261 60        		.byte	96
 4213 0262 60        		.byte	96
 4214 0263 60        		.byte	96
 4215 0264 60        		.byte	96
 4216 0265 60        		.byte	96
 4217 0266 7E        		.byte	126
 4218 0267 00        		.byte	0
 4219 0268 63        		.byte	99
 4220 0269 77        		.byte	119
 4221 026a 7F        		.byte	127
 4222 026b 7F        		.byte	127
 4223 026c 6B        		.byte	107
 4224 026d 63        		.byte	99
 4225 026e 63        		.byte	99
 4226 026f 00        		.byte	0
 4227 0270 66        		.byte	102
 4228 0271 76        		.byte	118
 4229 0272 7E        		.byte	126
 4230 0273 7E        		.byte	126
 4231 0274 6E        		.byte	110
 4232 0275 66        		.byte	102
 4233 0276 66        		.byte	102
 4234 0277 00        		.byte	0
 4235 0278 3C        		.byte	60
 4236 0279 66        		.byte	102
 4237 027a 66        		.byte	102
 4238 027b 66        		.byte	102
 4239 027c 66        		.byte	102
 4240 027d 66        		.byte	102
 4241 027e 3C        		.byte	60
 4242 027f 00        		.byte	0
 4243 0280 7C        		.byte	124
 4244 0281 66        		.byte	102
 4245 0282 66        		.byte	102
 4246 0283 7C        		.byte	124
 4247 0284 60        		.byte	96
 4248 0285 60        		.byte	96
 4249 0286 60        		.byte	96
 4250 0287 00        		.byte	0
 4251 0288 3C        		.byte	60
 4252 0289 66        		.byte	102
 4253 028a 66        		.byte	102
 4254 028b 66        		.byte	102
 4255 028c 6E        		.byte	110
 4256 028d 3C        		.byte	60
 4257 028e 0E        		.byte	14
 4258 028f 00        		.byte	0
 4259 0290 7C        		.byte	124
 4260 0291 66        		.byte	102
 4261 0292 66        		.byte	102
 4262 0293 7C        		.byte	124
 4263 0294 6C        		.byte	108
 4264 0295 66        		.byte	102
 4265 0296 66        		.byte	102
 4266 0297 00        		.byte	0
 4267 0298 3C        		.byte	60
 4268 0299 66        		.byte	102
 4269 029a 60        		.byte	96
 4270 029b 3C        		.byte	60
 4271 029c 06        		.byte	6
 4272 029d 66        		.byte	102
 4273 029e 3C        		.byte	60
 4274 029f 00        		.byte	0
 4275 02a0 7E        		.byte	126
 4276 02a1 18        		.byte	24
 4277 02a2 18        		.byte	24
 4278 02a3 18        		.byte	24
 4279 02a4 18        		.byte	24
 4280 02a5 18        		.byte	24
 4281 02a6 18        		.byte	24
 4282 02a7 00        		.byte	0
 4283 02a8 66        		.byte	102
 4284 02a9 66        		.byte	102
 4285 02aa 66        		.byte	102
 4286 02ab 66        		.byte	102
 4287 02ac 66        		.byte	102
 4288 02ad 66        		.byte	102
 4289 02ae 3C        		.byte	60
 4290 02af 00        		.byte	0
 4291 02b0 66        		.byte	102
 4292 02b1 66        		.byte	102
 4293 02b2 66        		.byte	102
 4294 02b3 66        		.byte	102
 4295 02b4 66        		.byte	102
 4296 02b5 3C        		.byte	60
 4297 02b6 18        		.byte	24
 4298 02b7 00        		.byte	0
 4299 02b8 63        		.byte	99
 4300 02b9 63        		.byte	99
 4301 02ba 63        		.byte	99
 4302 02bb 6B        		.byte	107
 4303 02bc 7F        		.byte	127
 4304 02bd 77        		.byte	119
 4305 02be 63        		.byte	99
 4306 02bf 00        		.byte	0
 4307 02c0 66        		.byte	102
 4308 02c1 66        		.byte	102
 4309 02c2 3C        		.byte	60
 4310 02c3 18        		.byte	24
 4311 02c4 3C        		.byte	60
 4312 02c5 66        		.byte	102
 4313 02c6 66        		.byte	102
 4314 02c7 00        		.byte	0
 4315 02c8 66        		.byte	102
 4316 02c9 66        		.byte	102
 4317 02ca 66        		.byte	102
 4318 02cb 3C        		.byte	60
 4319 02cc 18        		.byte	24
 4320 02cd 18        		.byte	24
 4321 02ce 18        		.byte	24
 4322 02cf 00        		.byte	0
 4323 02d0 7E        		.byte	126
 4324 02d1 06        		.byte	6
 4325 02d2 0C        		.byte	12
 4326 02d3 18        		.byte	24
 4327 02d4 30        		.byte	48
 4328 02d5 60        		.byte	96
 4329 02d6 7E        		.byte	126
 4330 02d7 00        		.byte	0
 4331 02d8 3E        		.byte	62
 4332 02d9 30        		.byte	48
 4333 02da 30        		.byte	48
 4334 02db 30        		.byte	48
 4335 02dc 30        		.byte	48
 4336 02dd 30        		.byte	48
 4337 02de 3E        		.byte	62
 4338 02df 00        		.byte	0
 4339 02e0 00        		.byte	0
 4340 02e1 60        		.byte	96
 4341 02e2 30        		.byte	48
 4342 02e3 18        		.byte	24
 4343 02e4 0C        		.byte	12
 4344 02e5 06        		.byte	6
 4345 02e6 00        		.byte	0
 4346 02e7 00        		.byte	0
 4347 02e8 3E        		.byte	62
 4348 02e9 06        		.byte	6
 4349 02ea 06        		.byte	6
 4350 02eb 06        		.byte	6
 4351 02ec 06        		.byte	6
 4352 02ed 06        		.byte	6
 4353 02ee 3E        		.byte	62
 4354 02ef 00        		.byte	0
 4355 02f0 08        		.byte	8
 4356 02f1 1C        		.byte	28
 4357 02f2 36        		.byte	54
 4358 02f3 63        		.byte	99
 4359 02f4 00        		.byte	0
 4360 02f5 00        		.byte	0
 4361 02f6 00        		.byte	0
 4362 02f7 00        		.byte	0
 4363 02f8 00        		.byte	0
 4364 02f9 00        		.byte	0
 4365 02fa 00        		.byte	0
 4366 02fb 00        		.byte	0
 4367 02fc 00        		.byte	0
 4368 02fd 00        		.byte	0
 4369 02fe FF        		.byte	-1
 4370 02ff 00        		.byte	0
 4371 0300 38        		.byte	56
 4372 0301 18        		.byte	24
 4373 0302 0C        		.byte	12
 4374 0303 00        		.byte	0
 4375 0304 00        		.byte	0
 4376 0305 00        		.byte	0
 4377 0306 00        		.byte	0
 4378 0307 00        		.byte	0
 4379 0308 00        		.byte	0
 4380 0309 00        		.byte	0
 4381 030a 3C        		.byte	60
 4382 030b 06        		.byte	6
 4383 030c 3E        		.byte	62
 4384 030d 66        		.byte	102
 4385 030e 3E        		.byte	62
 4386 030f 00        		.byte	0
 4387 0310 60        		.byte	96
 4388 0311 60        		.byte	96
 4389 0312 7C        		.byte	124
 4390 0313 66        		.byte	102
 4391 0314 66        		.byte	102
 4392 0315 66        		.byte	102
 4393 0316 7C        		.byte	124
 4394 0317 00        		.byte	0
 4395 0318 00        		.byte	0
 4396 0319 00        		.byte	0
 4397 031a 3C        		.byte	60
 4398 031b 66        		.byte	102
 4399 031c 60        		.byte	96
 4400 031d 66        		.byte	102
 4401 031e 3C        		.byte	60
 4402 031f 00        		.byte	0
 4403 0320 06        		.byte	6
 4404 0321 06        		.byte	6
 4405 0322 3E        		.byte	62
 4406 0323 66        		.byte	102
 4407 0324 66        		.byte	102
 4408 0325 66        		.byte	102
 4409 0326 3E        		.byte	62
 4410 0327 00        		.byte	0
 4411 0328 00        		.byte	0
 4412 0329 00        		.byte	0
 4413 032a 3C        		.byte	60
 4414 032b 66        		.byte	102
 4415 032c 7E        		.byte	126
 4416 032d 60        		.byte	96
 4417 032e 3C        		.byte	60
 4418 032f 00        		.byte	0
 4419 0330 1E        		.byte	30
 4420 0331 30        		.byte	48
 4421 0332 30        		.byte	48
 4422 0333 7C        		.byte	124
 4423 0334 30        		.byte	48
 4424 0335 30        		.byte	48
 4425 0336 30        		.byte	48
 4426 0337 00        		.byte	0
 4427 0338 00        		.byte	0
 4428 0339 00        		.byte	0
 4429 033a 3E        		.byte	62
 4430 033b 66        		.byte	102
 4431 033c 66        		.byte	102
 4432 033d 3E        		.byte	62
 4433 033e 06        		.byte	6
 4434 033f 3C        		.byte	60
 4435 0340 60        		.byte	96
 4436 0341 60        		.byte	96
 4437 0342 7C        		.byte	124
 4438 0343 66        		.byte	102
 4439 0344 66        		.byte	102
 4440 0345 66        		.byte	102
 4441 0346 66        		.byte	102
 4442 0347 00        		.byte	0
 4443 0348 18        		.byte	24
 4444 0349 00        		.byte	0
 4445 034a 38        		.byte	56
 4446 034b 18        		.byte	24
 4447 034c 18        		.byte	24
 4448 034d 18        		.byte	24
 4449 034e 3C        		.byte	60
 4450 034f 00        		.byte	0
 4451 0350 18        		.byte	24
 4452 0351 00        		.byte	0
 4453 0352 38        		.byte	56
 4454 0353 18        		.byte	24
 4455 0354 18        		.byte	24
 4456 0355 18        		.byte	24
 4457 0356 18        		.byte	24
 4458 0357 30        		.byte	48
 4459 0358 60        		.byte	96
 4460 0359 60        		.byte	96
 4461 035a 66        		.byte	102
 4462 035b 6C        		.byte	108
 4463 035c 78        		.byte	120
 4464 035d 6C        		.byte	108
 4465 035e 66        		.byte	102
 4466 035f 00        		.byte	0
 4467 0360 38        		.byte	56
 4468 0361 18        		.byte	24
 4469 0362 18        		.byte	24
 4470 0363 18        		.byte	24
 4471 0364 18        		.byte	24
 4472 0365 18        		.byte	24
 4473 0366 0C        		.byte	12
 4474 0367 00        		.byte	0
 4475 0368 00        		.byte	0
 4476 0369 00        		.byte	0
 4477 036a 36        		.byte	54
 4478 036b 7F        		.byte	127
 4479 036c 6B        		.byte	107
 4480 036d 6B        		.byte	107
 4481 036e 63        		.byte	99
 4482 036f 00        		.byte	0
 4483 0370 00        		.byte	0
 4484 0371 00        		.byte	0
 4485 0372 7C        		.byte	124
 4486 0373 66        		.byte	102
 4487 0374 66        		.byte	102
 4488 0375 66        		.byte	102
 4489 0376 66        		.byte	102
 4490 0377 00        		.byte	0
 4491 0378 00        		.byte	0
 4492 0379 00        		.byte	0
 4493 037a 3C        		.byte	60
 4494 037b 66        		.byte	102
 4495 037c 66        		.byte	102
 4496 037d 66        		.byte	102
 4497 037e 3C        		.byte	60
 4498 037f 00        		.byte	0
 4499 0380 00        		.byte	0
 4500 0381 00        		.byte	0
 4501 0382 7C        		.byte	124
 4502 0383 66        		.byte	102
 4503 0384 66        		.byte	102
 4504 0385 7C        		.byte	124
 4505 0386 60        		.byte	96
 4506 0387 60        		.byte	96
 4507 0388 00        		.byte	0
 4508 0389 00        		.byte	0
 4509 038a 3E        		.byte	62
 4510 038b 66        		.byte	102
 4511 038c 66        		.byte	102
 4512 038d 3E        		.byte	62
 4513 038e 06        		.byte	6
 4514 038f 07        		.byte	7
 4515 0390 00        		.byte	0
 4516 0391 00        		.byte	0
 4517 0392 7C        		.byte	124
 4518 0393 66        		.byte	102
 4519 0394 60        		.byte	96
 4520 0395 60        		.byte	96
 4521 0396 60        		.byte	96
 4522 0397 00        		.byte	0
 4523 0398 00        		.byte	0
 4524 0399 00        		.byte	0
 4525 039a 3E        		.byte	62
 4526 039b 60        		.byte	96
 4527 039c 3C        		.byte	60
 4528 039d 06        		.byte	6
 4529 039e 7C        		.byte	124
 4530 039f 00        		.byte	0
 4531 03a0 30        		.byte	48
 4532 03a1 30        		.byte	48
 4533 03a2 7C        		.byte	124
 4534 03a3 30        		.byte	48
 4535 03a4 30        		.byte	48
 4536 03a5 30        		.byte	48
 4537 03a6 1C        		.byte	28
 4538 03a7 00        		.byte	0
 4539 03a8 00        		.byte	0
 4540 03a9 00        		.byte	0
 4541 03aa 66        		.byte	102
 4542 03ab 66        		.byte	102
 4543 03ac 66        		.byte	102
 4544 03ad 66        		.byte	102
 4545 03ae 3E        		.byte	62
 4546 03af 00        		.byte	0
 4547 03b0 00        		.byte	0
 4548 03b1 00        		.byte	0
 4549 03b2 66        		.byte	102
 4550 03b3 66        		.byte	102
 4551 03b4 66        		.byte	102
 4552 03b5 3C        		.byte	60
 4553 03b6 18        		.byte	24
 4554 03b7 00        		.byte	0
 4555 03b8 00        		.byte	0
 4556 03b9 00        		.byte	0
 4557 03ba 63        		.byte	99
 4558 03bb 6B        		.byte	107
 4559 03bc 6B        		.byte	107
 4560 03bd 7F        		.byte	127
 4561 03be 36        		.byte	54
 4562 03bf 00        		.byte	0
 4563 03c0 00        		.byte	0
 4564 03c1 00        		.byte	0
 4565 03c2 66        		.byte	102
 4566 03c3 3C        		.byte	60
 4567 03c4 18        		.byte	24
 4568 03c5 3C        		.byte	60
 4569 03c6 66        		.byte	102
 4570 03c7 00        		.byte	0
 4571 03c8 00        		.byte	0
 4572 03c9 00        		.byte	0
 4573 03ca 66        		.byte	102
 4574 03cb 66        		.byte	102
 4575 03cc 66        		.byte	102
 4576 03cd 3E        		.byte	62
 4577 03ce 06        		.byte	6
 4578 03cf 3C        		.byte	60
 4579 03d0 00        		.byte	0
 4580 03d1 00        		.byte	0
 4581 03d2 7E        		.byte	126
 4582 03d3 0C        		.byte	12
 4583 03d4 18        		.byte	24
 4584 03d5 30        		.byte	48
 4585 03d6 7E        		.byte	126
 4586 03d7 00        		.byte	0
 4587 03d8 1C        		.byte	28
 4588 03d9 30        		.byte	48
 4589 03da 30        		.byte	48
 4590 03db 60        		.byte	96
 4591 03dc 30        		.byte	48
 4592 03dd 30        		.byte	48
 4593 03de 1C        		.byte	28
 4594 03df 00        		.byte	0
 4595 03e0 18        		.byte	24
 4596 03e1 18        		.byte	24
 4597 03e2 18        		.byte	24
 4598 03e3 00        		.byte	0
 4599 03e4 18        		.byte	24
 4600 03e5 18        		.byte	24
 4601 03e6 18        		.byte	24
 4602 03e7 00        		.byte	0
 4603 03e8 38        		.byte	56
 4604 03e9 0C        		.byte	12
 4605 03ea 0C        		.byte	12
 4606 03eb 06        		.byte	6
 4607 03ec 0C        		.byte	12
 4608 03ed 0C        		.byte	12
 4609 03ee 38        		.byte	56
 4610 03ef 00        		.byte	0
 4611 03f0 00        		.byte	0
 4612 03f1 00        		.byte	0
 4613 03f2 3B        		.byte	59
 4614 03f3 6E        		.byte	110
 4615 03f4 00        		.byte	0
 4616 03f5 00        		.byte	0
 4617 03f6 00        		.byte	0
 4618 03f7 00        		.byte	0
 4619 03f8 00        		.byte	0
 4620 03f9 08        		.byte	8
 4621 03fa 1C        		.byte	28
 4622 03fb 36        		.byte	54
 4623 03fc 63        		.byte	99
 4624 03fd 63        		.byte	99
 4625 03fe 7F        		.byte	127
 4626 03ff 00        		.byte	0
 4627 0400 3C        		.byte	60
 4628 0401 66        		.byte	102
 4629 0402 60        		.byte	96
 4630 0403 60        		.byte	96
 4631 0404 60        		.byte	96
 4632 0405 66        		.byte	102
 4633 0406 3C        		.byte	60
 4634 0407 60        		.byte	96
 4635 0408 66        		.byte	102
 4636 0409 00        		.byte	0
 4637 040a 66        		.byte	102
 4638 040b 66        		.byte	102
 4639 040c 66        		.byte	102
 4640 040d 66        		.byte	102
 4641 040e 3E        		.byte	62
 4642 040f 00        		.byte	0
 4643 0410 0C        		.byte	12
 4644 0411 18        		.byte	24
 4645 0412 3C        		.byte	60
 4646 0413 66        		.byte	102
 4647 0414 7E        		.byte	126
 4648 0415 60        		.byte	96
 4649 0416 3C        		.byte	60
 4650 0417 00        		.byte	0
 4651 0418 7E        		.byte	126
 4652 0419 C3        		.byte	-61
 4653 041a 3C        		.byte	60
 4654 041b 06        		.byte	6
 4655 041c 3E        		.byte	62
 4656 041d 66        		.byte	102
 4657 041e 3E        		.byte	62
 4658 041f 00        		.byte	0
 4659 0420 66        		.byte	102
 4660 0421 00        		.byte	0
 4661 0422 3C        		.byte	60
 4662 0423 06        		.byte	6
 4663 0424 3E        		.byte	62
 4664 0425 66        		.byte	102
 4665 0426 3E        		.byte	62
 4666 0427 00        		.byte	0
 4667 0428 30        		.byte	48
 4668 0429 18        		.byte	24
 4669 042a 3C        		.byte	60
 4670 042b 06        		.byte	6
 4671 042c 3E        		.byte	62
 4672 042d 66        		.byte	102
 4673 042e 3E        		.byte	62
 4674 042f 00        		.byte	0
 4675 0430 18        		.byte	24
 4676 0431 24        		.byte	36
 4677 0432 3C        		.byte	60
 4678 0433 06        		.byte	6
 4679 0434 3E        		.byte	62
 4680 0435 66        		.byte	102
 4681 0436 3E        		.byte	62
 4682 0437 00        		.byte	0
 4683 0438 00        		.byte	0
 4684 0439 00        		.byte	0
 4685 043a 3C        		.byte	60
 4686 043b 66        		.byte	102
 4687 043c 60        		.byte	96
 4688 043d 66        		.byte	102
 4689 043e 3C        		.byte	60
 4690 043f 60        		.byte	96
 4691 0440 7E        		.byte	126
 4692 0441 C3        		.byte	-61
 4693 0442 3C        		.byte	60
 4694 0443 66        		.byte	102
 4695 0444 7E        		.byte	126
 4696 0445 60        		.byte	96
 4697 0446 3C        		.byte	60
 4698 0447 00        		.byte	0
 4699 0448 66        		.byte	102
 4700 0449 00        		.byte	0
 4701 044a 3C        		.byte	60
 4702 044b 66        		.byte	102
 4703 044c 7E        		.byte	126
 4704 044d 60        		.byte	96
 4705 044e 3C        		.byte	60
 4706 044f 00        		.byte	0
 4707 0450 30        		.byte	48
 4708 0451 18        		.byte	24
 4709 0452 3C        		.byte	60
 4710 0453 66        		.byte	102
 4711 0454 7E        		.byte	126
 4712 0455 60        		.byte	96
 4713 0456 3C        		.byte	60
 4714 0457 00        		.byte	0
 4715 0458 66        		.byte	102
 4716 0459 00        		.byte	0
 4717 045a 38        		.byte	56
 4718 045b 18        		.byte	24
 4719 045c 18        		.byte	24
 4720 045d 18        		.byte	24
 4721 045e 3C        		.byte	60
 4722 045f 00        		.byte	0
 4723 0460 3C        		.byte	60
 4724 0461 66        		.byte	102
 4725 0462 00        		.byte	0
 4726 0463 38        		.byte	56
 4727 0464 18        		.byte	24
 4728 0465 18        		.byte	24
 4729 0466 3C        		.byte	60
 4730 0467 00        		.byte	0
 4731 0468 30        		.byte	48
 4732 0469 18        		.byte	24
 4733 046a 00        		.byte	0
 4734 046b 38        		.byte	56
 4735 046c 18        		.byte	24
 4736 046d 18        		.byte	24
 4737 046e 3C        		.byte	60
 4738 046f 00        		.byte	0
 4739 0470 66        		.byte	102
 4740 0471 00        		.byte	0
 4741 0472 3C        		.byte	60
 4742 0473 66        		.byte	102
 4743 0474 7E        		.byte	126
 4744 0475 66        		.byte	102
 4745 0476 66        		.byte	102
 4746 0477 00        		.byte	0
 4747 0478 18        		.byte	24
 4748 0479 24        		.byte	36
 4749 047a 3C        		.byte	60
 4750 047b 66        		.byte	102
 4751 047c 7E        		.byte	126
 4752 047d 66        		.byte	102
 4753 047e 66        		.byte	102
 4754 047f 00        		.byte	0
 4755 0480 0C        		.byte	12
 4756 0481 18        		.byte	24
 4757 0482 7E        		.byte	126
 4758 0483 60        		.byte	96
 4759 0484 7C        		.byte	124
 4760 0485 60        		.byte	96
 4761 0486 7E        		.byte	126
 4762 0487 00        		.byte	0
 4763 0488 00        		.byte	0
 4764 0489 00        		.byte	0
 4765 048a 7E        		.byte	126
 4766 048b 1B        		.byte	27
 4767 048c 7F        		.byte	127
 4768 048d D8        		.byte	-40
 4769 048e 7E        		.byte	126
 4770 048f 00        		.byte	0
 4771 0490 1F        		.byte	31
 4772 0491 3C        		.byte	60
 4773 0492 6C        		.byte	108
 4774 0493 7F        		.byte	127
 4775 0494 6C        		.byte	108
 4776 0495 6C        		.byte	108
 4777 0496 6F        		.byte	111
 4778 0497 00        		.byte	0
 4779 0498 3C        		.byte	60
 4780 0499 66        		.byte	102
 4781 049a 00        		.byte	0
 4782 049b 3C        		.byte	60
 4783 049c 66        		.byte	102
 4784 049d 66        		.byte	102
 4785 049e 3C        		.byte	60
 4786 049f 00        		.byte	0
 4787 04a0 00        		.byte	0
 4788 04a1 66        		.byte	102
 4789 04a2 00        		.byte	0
 4790 04a3 3C        		.byte	60
 4791 04a4 66        		.byte	102
 4792 04a5 66        		.byte	102
 4793 04a6 3C        		.byte	60
 4794 04a7 00        		.byte	0
 4795 04a8 30        		.byte	48
 4796 04a9 18        		.byte	24
 4797 04aa 00        		.byte	0
 4798 04ab 3C        		.byte	60
 4799 04ac 66        		.byte	102
 4800 04ad 66        		.byte	102
 4801 04ae 3C        		.byte	60
 4802 04af 00        		.byte	0
 4803 04b0 3C        		.byte	60
 4804 04b1 66        		.byte	102
 4805 04b2 00        		.byte	0
 4806 04b3 66        		.byte	102
 4807 04b4 66        		.byte	102
 4808 04b5 66        		.byte	102
 4809 04b6 3E        		.byte	62
 4810 04b7 00        		.byte	0
 4811 04b8 30        		.byte	48
 4812 04b9 18        		.byte	24
 4813 04ba 00        		.byte	0
 4814 04bb 66        		.byte	102
 4815 04bc 66        		.byte	102
 4816 04bd 66        		.byte	102
 4817 04be 3E        		.byte	62
 4818 04bf 00        		.byte	0
 4819 04c0 66        		.byte	102
 4820 04c1 00        		.byte	0
 4821 04c2 66        		.byte	102
 4822 04c3 66        		.byte	102
 4823 04c4 66        		.byte	102
 4824 04c5 3E        		.byte	62
 4825 04c6 06        		.byte	6
 4826 04c7 3C        		.byte	60
 4827 04c8 66        		.byte	102
 4828 04c9 3C        		.byte	60
 4829 04ca 66        		.byte	102
 4830 04cb 66        		.byte	102
 4831 04cc 66        		.byte	102
 4832 04cd 66        		.byte	102
 4833 04ce 3C        		.byte	60
 4834 04cf 00        		.byte	0
 4835 04d0 66        		.byte	102
 4836 04d1 00        		.byte	0
 4837 04d2 66        		.byte	102
 4838 04d3 66        		.byte	102
 4839 04d4 66        		.byte	102
 4840 04d5 66        		.byte	102
 4841 04d6 3C        		.byte	60
 4842 04d7 00        		.byte	0
 4843 04d8 00        		.byte	0
 4844 04d9 0C        		.byte	12
 4845 04da 1E        		.byte	30
 4846 04db 30        		.byte	48
 4847 04dc 30        		.byte	48
 4848 04dd 1E        		.byte	30
 4849 04de 0C        		.byte	12
 4850 04df 00        		.byte	0
 4851 04e0 1C        		.byte	28
 4852 04e1 36        		.byte	54
 4853 04e2 30        		.byte	48
 4854 04e3 7C        		.byte	124
 4855 04e4 30        		.byte	48
 4856 04e5 60        		.byte	96
 4857 04e6 7E        		.byte	126
 4858 04e7 00        		.byte	0
 4859 04e8 66        		.byte	102
 4860 04e9 66        		.byte	102
 4861 04ea 3C        		.byte	60
 4862 04eb 7E        		.byte	126
 4863 04ec 18        		.byte	24
 4864 04ed 7E        		.byte	126
 4865 04ee 18        		.byte	24
 4866 04ef 00        		.byte	0
 4867 04f0 7C        		.byte	124
 4868 04f1 66        		.byte	102
 4869 04f2 6E        		.byte	110
 4870 04f3 7C        		.byte	124
 4871 04f4 6E        		.byte	110
 4872 04f5 6C        		.byte	108
 4873 04f6 66        		.byte	102
 4874 04f7 00        		.byte	0
 4875 04f8 0E        		.byte	14
 4876 04f9 18        		.byte	24
 4877 04fa 18        		.byte	24
 4878 04fb 3C        		.byte	60
 4879 04fc 18        		.byte	24
 4880 04fd 18        		.byte	24
 4881 04fe 70        		.byte	112
 4882 04ff 00        		.byte	0
 4883 0500 0C        		.byte	12
 4884 0501 18        		.byte	24
 4885 0502 3C        		.byte	60
 4886 0503 06        		.byte	6
 4887 0504 3E        		.byte	62
 4888 0505 66        		.byte	102
 4889 0506 3E        		.byte	62
 4890 0507 00        		.byte	0
 4891 0508 0C        		.byte	12
 4892 0509 18        		.byte	24
 4893 050a 00        		.byte	0
 4894 050b 38        		.byte	56
 4895 050c 18        		.byte	24
 4896 050d 18        		.byte	24
 4897 050e 3C        		.byte	60
 4898 050f 00        		.byte	0
 4899 0510 0C        		.byte	12
 4900 0511 18        		.byte	24
 4901 0512 00        		.byte	0
 4902 0513 3C        		.byte	60
 4903 0514 66        		.byte	102
 4904 0515 66        		.byte	102
 4905 0516 3C        		.byte	60
 4906 0517 00        		.byte	0
 4907 0518 0C        		.byte	12
 4908 0519 18        		.byte	24
 4909 051a 00        		.byte	0
 4910 051b 66        		.byte	102
 4911 051c 66        		.byte	102
 4912 051d 66        		.byte	102
 4913 051e 3E        		.byte	62
 4914 051f 00        		.byte	0
 4915 0520 36        		.byte	54
 4916 0521 6C        		.byte	108
 4917 0522 00        		.byte	0
 4918 0523 7C        		.byte	124
 4919 0524 66        		.byte	102
 4920 0525 66        		.byte	102
 4921 0526 66        		.byte	102
 4922 0527 00        		.byte	0
 4923 0528 36        		.byte	54
 4924 0529 6C        		.byte	108
 4925 052a 00        		.byte	0
 4926 052b 66        		.byte	102
 4927 052c 76        		.byte	118
 4928 052d 6E        		.byte	110
 4929 052e 66        		.byte	102
 4930 052f 00        		.byte	0
 4931 0530 38        		.byte	56
 4932 0531 0C        		.byte	12
 4933 0532 3C        		.byte	60
 4934 0533 6C        		.byte	108
 4935 0534 3C        		.byte	60
 4936 0535 00        		.byte	0
 4937 0536 00        		.byte	0
 4938 0537 00        		.byte	0
 4939 0538 38        		.byte	56
 4940 0539 6C        		.byte	108
 4941 053a 6C        		.byte	108
 4942 053b 6C        		.byte	108
 4943 053c 38        		.byte	56
 4944 053d 00        		.byte	0
 4945 053e 00        		.byte	0
 4946 053f 00        		.byte	0
 4947 0540 18        		.byte	24
 4948 0541 00        		.byte	0
 4949 0542 18        		.byte	24
 4950 0543 30        		.byte	48
 4951 0544 60        		.byte	96
 4952 0545 66        		.byte	102
 4953 0546 3C        		.byte	60
 4954 0547 00        		.byte	0
 4955 0548 00        		.byte	0
 4956 0549 00        		.byte	0
 4957 054a 00        		.byte	0
 4958 054b 7E        		.byte	126
 4959 054c 60        		.byte	96
 4960 054d 60        		.byte	96
 4961 054e 00        		.byte	0
 4962 054f 00        		.byte	0
 4963 0550 00        		.byte	0
 4964 0551 00        		.byte	0
 4965 0552 00        		.byte	0
 4966 0553 7E        		.byte	126
 4967 0554 06        		.byte	6
 4968 0555 06        		.byte	6
 4969 0556 00        		.byte	0
 4970 0557 00        		.byte	0
 4971 0558 40        		.byte	64
 4972 0559 42        		.byte	66
 4973 055a 44        		.byte	68
 4974 055b 48        		.byte	72
 4975 055c 16        		.byte	22
 4976 055d 23        		.byte	35
 4977 055e 46        		.byte	70
 4978 055f 07        		.byte	7
 4979 0560 40        		.byte	64
 4980 0561 42        		.byte	66
 4981 0562 44        		.byte	68
 4982 0563 48        		.byte	72
 4983 0564 15        		.byte	21
 4984 0565 25        		.byte	37
 4985 0566 47        		.byte	71
 4986 0567 01        		.byte	1
 4987 0568 18        		.byte	24
 4988 0569 00        		.byte	0
 4989 056a 18        		.byte	24
 4990 056b 18        		.byte	24
 4991 056c 3C        		.byte	60
 4992 056d 3C        		.byte	60
 4993 056e 18        		.byte	24
 4994 056f 00        		.byte	0
 4995 0570 00        		.byte	0
 4996 0571 36        		.byte	54
 4997 0572 6C        		.byte	108
 4998 0573 D8        		.byte	-40
 4999 0574 6C        		.byte	108
 5000 0575 36        		.byte	54
 5001 0576 00        		.byte	0
 5002 0577 00        		.byte	0
 5003 0578 00        		.byte	0
 5004 0579 6C        		.byte	108
 5005 057a 36        		.byte	54
 5006 057b 1B        		.byte	27
 5007 057c 36        		.byte	54
 5008 057d 6C        		.byte	108
 5009 057e 00        		.byte	0
 5010 057f 00        		.byte	0
 5011 0580 22        		.byte	34
 5012 0581 88        		.byte	-120
 5013 0582 22        		.byte	34
 5014 0583 88        		.byte	-120
 5015 0584 22        		.byte	34
 5016 0585 88        		.byte	-120
 5017 0586 22        		.byte	34
 5018 0587 88        		.byte	-120
 5019 0588 55        		.byte	85
 5020 0589 AA        		.byte	-86
 5021 058a 55        		.byte	85
 5022 058b AA        		.byte	-86
 5023 058c 55        		.byte	85
 5024 058d AA        		.byte	-86
 5025 058e 55        		.byte	85
 5026 058f AA        		.byte	-86
 5027 0590 BB        		.byte	-69
 5028 0591 EE        		.byte	-18
 5029 0592 BB        		.byte	-69
 5030 0593 EE        		.byte	-18
 5031 0594 BB        		.byte	-69
 5032 0595 EE        		.byte	-18
 5033 0596 BB        		.byte	-69
 5034 0597 EE        		.byte	-18
 5035 0598 18        		.byte	24
 5036 0599 18        		.byte	24
 5037 059a 18        		.byte	24
 5038 059b 18        		.byte	24
 5039 059c 18        		.byte	24
 5040 059d 18        		.byte	24
 5041 059e 18        		.byte	24
 5042 059f 18        		.byte	24
 5043 05a0 18        		.byte	24
 5044 05a1 18        		.byte	24
 5045 05a2 18        		.byte	24
 5046 05a3 F8        		.byte	-8
 5047 05a4 F8        		.byte	-8
 5048 05a5 18        		.byte	24
 5049 05a6 18        		.byte	24
 5050 05a7 18        		.byte	24
 5051 05a8 18        		.byte	24
 5052 05a9 F8        		.byte	-8
 5053 05aa F8        		.byte	-8
 5054 05ab 18        		.byte	24
 5055 05ac 18        		.byte	24
 5056 05ad F8        		.byte	-8
 5057 05ae F8        		.byte	-8
 5058 05af 18        		.byte	24
 5059 05b0 66        		.byte	102
 5060 05b1 66        		.byte	102
 5061 05b2 66        		.byte	102
 5062 05b3 E6        		.byte	-26
 5063 05b4 E6        		.byte	-26
 5064 05b5 66        		.byte	102
 5065 05b6 66        		.byte	102
 5066 05b7 66        		.byte	102
 5067 05b8 00        		.byte	0
 5068 05b9 00        		.byte	0
 5069 05ba 00        		.byte	0
 5070 05bb FE        		.byte	-2
 5071 05bc FE        		.byte	-2
 5072 05bd 66        		.byte	102
 5073 05be 66        		.byte	102
 5074 05bf 66        		.byte	102
 5075 05c0 00        		.byte	0
 5076 05c1 F8        		.byte	-8
 5077 05c2 F8        		.byte	-8
 5078 05c3 18        		.byte	24
 5079 05c4 18        		.byte	24
 5080 05c5 F8        		.byte	-8
 5081 05c6 F8        		.byte	-8
 5082 05c7 18        		.byte	24
 5083 05c8 66        		.byte	102
 5084 05c9 E6        		.byte	-26
 5085 05ca E6        		.byte	-26
 5086 05cb 06        		.byte	6
 5087 05cc 06        		.byte	6
 5088 05cd E6        		.byte	-26
 5089 05ce E6        		.byte	-26
 5090 05cf 66        		.byte	102
 5091 05d0 66        		.byte	102
 5092 05d1 66        		.byte	102
 5093 05d2 66        		.byte	102
 5094 05d3 66        		.byte	102
 5095 05d4 66        		.byte	102
 5096 05d5 66        		.byte	102
 5097 05d6 66        		.byte	102
 5098 05d7 66        		.byte	102
 5099 05d8 00        		.byte	0
 5100 05d9 FE        		.byte	-2
 5101 05da FE        		.byte	-2
 5102 05db 06        		.byte	6
 5103 05dc 06        		.byte	6
 5104 05dd E6        		.byte	-26
 5105 05de E6        		.byte	-26
 5106 05df 66        		.byte	102
 5107 05e0 66        		.byte	102
 5108 05e1 E6        		.byte	-26
 5109 05e2 E6        		.byte	-26
 5110 05e3 06        		.byte	6
 5111 05e4 06        		.byte	6
 5112 05e5 FE        		.byte	-2
 5113 05e6 FE        		.byte	-2
 5114 05e7 00        		.byte	0
 5115 05e8 66        		.byte	102
 5116 05e9 66        		.byte	102
 5117 05ea 66        		.byte	102
 5118 05eb FE        		.byte	-2
 5119 05ec FE        		.byte	-2
 5120 05ed 00        		.byte	0
 5121 05ee 00        		.byte	0
 5122 05ef 00        		.byte	0
 5123 05f0 10        		.byte	16
 5124 05f1 F8        		.byte	-8
 5125 05f2 F8        		.byte	-8
 5126 05f3 18        		.byte	24
 5127 05f4 18        		.byte	24
 5128 05f5 F8        		.byte	-8
 5129 05f6 F8        		.byte	-8
 5130 05f7 00        		.byte	0
 5131 05f8 00        		.byte	0
 5132 05f9 00        		.byte	0
 5133 05fa 00        		.byte	0
 5134 05fb F8        		.byte	-8
 5135 05fc F8        		.byte	-8
 5136 05fd 18        		.byte	24
 5137 05fe 18        		.byte	24
 5138 05ff 18        		.byte	24
 5139 0600 18        		.byte	24
 5140 0601 18        		.byte	24
 5141 0602 18        		.byte	24
 5142 0603 1F        		.byte	31
 5143 0604 1F        		.byte	31
 5144 0605 00        		.byte	0
 5145 0606 00        		.byte	0
 5146 0607 00        		.byte	0
 5147 0608 18        		.byte	24
 5148 0609 18        		.byte	24
 5149 060a 18        		.byte	24
 5150 060b FF        		.byte	-1
 5151 060c FF        		.byte	-1
 5152 060d 00        		.byte	0
 5153 060e 00        		.byte	0
 5154 060f 00        		.byte	0
 5155 0610 00        		.byte	0
 5156 0611 00        		.byte	0
 5157 0612 00        		.byte	0
 5158 0613 FF        		.byte	-1
 5159 0614 FF        		.byte	-1
 5160 0615 18        		.byte	24
 5161 0616 18        		.byte	24
 5162 0617 18        		.byte	24
 5163 0618 18        		.byte	24
 5164 0619 18        		.byte	24
 5165 061a 18        		.byte	24
 5166 061b 1F        		.byte	31
 5167 061c 1F        		.byte	31
 5168 061d 18        		.byte	24
 5169 061e 18        		.byte	24
 5170 061f 18        		.byte	24
 5171 0620 00        		.byte	0
 5172 0621 00        		.byte	0
 5173 0622 00        		.byte	0
 5174 0623 FF        		.byte	-1
 5175 0624 FF        		.byte	-1
 5176 0625 00        		.byte	0
 5177 0626 00        		.byte	0
 5178 0627 00        		.byte	0
 5179 0628 18        		.byte	24
 5180 0629 18        		.byte	24
 5181 062a 18        		.byte	24
 5182 062b FF        		.byte	-1
 5183 062c FF        		.byte	-1
 5184 062d 18        		.byte	24
 5185 062e 18        		.byte	24
 5186 062f 18        		.byte	24
 5187 0630 18        		.byte	24
 5188 0631 1F        		.byte	31
 5189 0632 1F        		.byte	31
 5190 0633 18        		.byte	24
 5191 0634 18        		.byte	24
 5192 0635 1F        		.byte	31
 5193 0636 1F        		.byte	31
 5194 0637 18        		.byte	24
 5195 0638 66        		.byte	102
 5196 0639 66        		.byte	102
 5197 063a 66        		.byte	102
 5198 063b 67        		.byte	103
 5199 063c 67        		.byte	103
 5200 063d 66        		.byte	102
 5201 063e 66        		.byte	102
 5202 063f 66        		.byte	102
 5203 0640 66        		.byte	102
 5204 0641 67        		.byte	103
 5205 0642 67        		.byte	103
 5206 0643 60        		.byte	96
 5207 0644 60        		.byte	96
 5208 0645 7F        		.byte	127
 5209 0646 7F        		.byte	127
 5210 0647 00        		.byte	0
 5211 0648 00        		.byte	0
 5212 0649 7F        		.byte	127
 5213 064a 7F        		.byte	127
 5214 064b 60        		.byte	96
 5215 064c 60        		.byte	96
 5216 064d 67        		.byte	103
 5217 064e 67        		.byte	103
 5218 064f 66        		.byte	102
 5219 0650 66        		.byte	102
 5220 0651 E7        		.byte	-25
 5221 0652 E7        		.byte	-25
 5222 0653 00        		.byte	0
 5223 0654 00        		.byte	0
 5224 0655 FF        		.byte	-1
 5225 0656 FF        		.byte	-1
 5226 0657 00        		.byte	0
 5227 0658 00        		.byte	0
 5228 0659 FF        		.byte	-1
 5229 065a FF        		.byte	-1
 5230 065b 00        		.byte	0
 5231 065c 00        		.byte	0
 5232 065d E7        		.byte	-25
 5233 065e E7        		.byte	-25
 5234 065f 66        		.byte	102
 5235 0660 66        		.byte	102
 5236 0661 67        		.byte	103
 5237 0662 67        		.byte	103
 5238 0663 60        		.byte	96
 5239 0664 60        		.byte	96
 5240 0665 67        		.byte	103
 5241 0666 67        		.byte	103
 5242 0667 66        		.byte	102
 5243 0668 00        		.byte	0
 5244 0669 FF        		.byte	-1
 5245 066a FF        		.byte	-1
 5246 066b 00        		.byte	0
 5247 066c 00        		.byte	0
 5248 066d FF        		.byte	-1
 5249 066e FF        		.byte	-1
 5250 066f 00        		.byte	0
 5251 0670 66        		.byte	102
 5252 0671 E7        		.byte	-25
 5253 0672 E7        		.byte	-25
 5254 0673 00        		.byte	0
 5255 0674 00        		.byte	0
 5256 0675 E7        		.byte	-25
 5257 0676 E7        		.byte	-25
 5258 0677 66        		.byte	102
 5259 0678 18        		.byte	24
 5260 0679 FF        		.byte	-1
 5261 067a FF        		.byte	-1
 5262 067b 00        		.byte	0
 5263 067c 00        		.byte	0
 5264 067d FF        		.byte	-1
 5265 067e FF        		.byte	-1
 5266 067f 00        		.byte	0
 5267 0680 66        		.byte	102
 5268 0681 66        		.byte	102
 5269 0682 66        		.byte	102
 5270 0683 FF        		.byte	-1
 5271 0684 FF        		.byte	-1
 5272 0685 00        		.byte	0
 5273 0686 00        		.byte	0
 5274 0687 00        		.byte	0
 5275 0688 00        		.byte	0
 5276 0689 FF        		.byte	-1
 5277 068a FF        		.byte	-1
 5278 068b 00        		.byte	0
 5279 068c 00        		.byte	0
 5280 068d FF        		.byte	-1
 5281 068e FF        		.byte	-1
 5282 068f 18        		.byte	24
 5283 0690 00        		.byte	0
 5284 0691 00        		.byte	0
 5285 0692 00        		.byte	0
 5286 0693 FF        		.byte	-1
 5287 0694 FF        		.byte	-1
 5288 0695 66        		.byte	102
 5289 0696 66        		.byte	102
 5290 0697 66        		.byte	102
 5291 0698 66        		.byte	102
 5292 0699 66        		.byte	102
 5293 069a 66        		.byte	102
 5294 069b 7F        		.byte	127
 5295 069c 7F        		.byte	127
 5296 069d 00        		.byte	0
 5297 069e 00        		.byte	0
 5298 069f 00        		.byte	0
 5299 06a0 18        		.byte	24
 5300 06a1 1F        		.byte	31
 5301 06a2 1F        		.byte	31
 5302 06a3 18        		.byte	24
 5303 06a4 18        		.byte	24
 5304 06a5 1F        		.byte	31
 5305 06a6 1F        		.byte	31
 5306 06a7 00        		.byte	0
 5307 06a8 00        		.byte	0
 5308 06a9 1F        		.byte	31
 5309 06aa 1F        		.byte	31
 5310 06ab 18        		.byte	24
 5311 06ac 18        		.byte	24
 5312 06ad 1F        		.byte	31
 5313 06ae 1F        		.byte	31
 5314 06af 18        		.byte	24
 5315 06b0 00        		.byte	0
 5316 06b1 00        		.byte	0
 5317 06b2 00        		.byte	0
 5318 06b3 7F        		.byte	127
 5319 06b4 7F        		.byte	127
 5320 06b5 66        		.byte	102
 5321 06b6 66        		.byte	102
 5322 06b7 66        		.byte	102
 5323 06b8 66        		.byte	102
 5324 06b9 66        		.byte	102
 5325 06ba 66        		.byte	102
 5326 06bb E7        		.byte	-25
 5327 06bc E7        		.byte	-25
 5328 06bd 66        		.byte	102
 5329 06be 66        		.byte	102
 5330 06bf 66        		.byte	102
 5331 06c0 18        		.byte	24
 5332 06c1 FF        		.byte	-1
 5333 06c2 FF        		.byte	-1
 5334 06c3 00        		.byte	0
 5335 06c4 00        		.byte	0
 5336 06c5 FF        		.byte	-1
 5337 06c6 FF        		.byte	-1
 5338 06c7 18        		.byte	24
 5339 06c8 18        		.byte	24
 5340 06c9 18        		.byte	24
 5341 06ca 18        		.byte	24
 5342 06cb F8        		.byte	-8
 5343 06cc F8        		.byte	-8
 5344 06cd 00        		.byte	0
 5345 06ce 00        		.byte	0
 5346 06cf 00        		.byte	0
 5347 06d0 00        		.byte	0
 5348 06d1 00        		.byte	0
 5349 06d2 00        		.byte	0
 5350 06d3 1F        		.byte	31
 5351 06d4 1F        		.byte	31
 5352 06d5 18        		.byte	24
 5353 06d6 18        		.byte	24
 5354 06d7 18        		.byte	24
 5355 06d8 FF        		.byte	-1
 5356 06d9 FF        		.byte	-1
 5357 06da FF        		.byte	-1
 5358 06db FF        		.byte	-1
 5359 06dc FF        		.byte	-1
 5360 06dd FF        		.byte	-1
 5361 06de FF        		.byte	-1
 5362 06df FF        		.byte	-1
 5363 06e0 00        		.byte	0
 5364 06e1 00        		.byte	0
 5365 06e2 00        		.byte	0
 5366 06e3 00        		.byte	0
 5367 06e4 FF        		.byte	-1
 5368 06e5 FF        		.byte	-1
 5369 06e6 FF        		.byte	-1
 5370 06e7 FF        		.byte	-1
 5371 06e8 F0        		.byte	-16
 5372 06e9 F0        		.byte	-16
 5373 06ea F0        		.byte	-16
 5374 06eb F0        		.byte	-16
 5375 06ec F0        		.byte	-16
 5376 06ed F0        		.byte	-16
 5377 06ee F0        		.byte	-16
 5378 06ef F0        		.byte	-16
 5379 06f0 0F        		.byte	15
 5380 06f1 0F        		.byte	15
 5381 06f2 0F        		.byte	15
 5382 06f3 0F        		.byte	15
 5383 06f4 0F        		.byte	15
 5384 06f5 0F        		.byte	15
 5385 06f6 0F        		.byte	15
 5386 06f7 0F        		.byte	15
 5387 06f8 FF        		.byte	-1
 5388 06f9 FF        		.byte	-1
 5389 06fa FF        		.byte	-1
 5390 06fb FF        		.byte	-1
 5391 06fc 00        		.byte	0
 5392 06fd 00        		.byte	0
 5393 06fe 00        		.byte	0
 5394 06ff 00        		.byte	0
 5395 0700 00        		.byte	0
 5396 0701 00        		.byte	0
 5397 0702 3B        		.byte	59
 5398 0703 6E        		.byte	110
 5399 0704 64        		.byte	100
 5400 0705 6E        		.byte	110
 5401 0706 3B        		.byte	59
 5402 0707 00        		.byte	0
 5403 0708 3C        		.byte	60
 5404 0709 66        		.byte	102
 5405 070a 66        		.byte	102
 5406 070b 6C        		.byte	108
 5407 070c 66        		.byte	102
 5408 070d 63        		.byte	99
 5409 070e 6E        		.byte	110
 5410 070f 60        		.byte	96
 5411 0710 7E        		.byte	126
 5412 0711 66        		.byte	102
 5413 0712 60        		.byte	96
 5414 0713 60        		.byte	96
 5415 0714 60        		.byte	96
 5416 0715 60        		.byte	96
 5417 0716 60        		.byte	96
 5418 0717 00        		.byte	0
 5419 0718 00        		.byte	0
 5420 0719 7F        		.byte	127
 5421 071a 36        		.byte	54
 5422 071b 36        		.byte	54
 5423 071c 36        		.byte	54
 5424 071d 36        		.byte	54
 5425 071e 36        		.byte	54
 5426 071f 00        		.byte	0
 5427 0720 7E        		.byte	126
 5428 0721 60        		.byte	96
 5429 0722 30        		.byte	48
 5430 0723 18        		.byte	24
 5431 0724 30        		.byte	48
 5432 0725 60        		.byte	96
 5433 0726 7E        		.byte	126
 5434 0727 00        		.byte	0
 5435 0728 00        		.byte	0
 5436 0729 00        		.byte	0
 5437 072a 3E        		.byte	62
 5438 072b 78        		.byte	120
 5439 072c 6C        		.byte	108
 5440 072d 6C        		.byte	108
 5441 072e 38        		.byte	56
 5442 072f 00        		.byte	0
 5443 0730 00        		.byte	0
 5444 0731 00        		.byte	0
 5445 0732 66        		.byte	102
 5446 0733 66        		.byte	102
 5447 0734 6E        		.byte	110
 5448 0735 7B        		.byte	123
 5449 0736 60        		.byte	96
 5450 0737 60        		.byte	96
 5451 0738 00        		.byte	0
 5452 0739 00        		.byte	0
 5453 073a 7E        		.byte	126
 5454 073b 18        		.byte	24
 5455 073c 18        		.byte	24
 5456 073d 18        		.byte	24
 5457 073e 0C        		.byte	12
 5458 073f 00        		.byte	0
 5459 0740 3C        		.byte	60
 5460 0741 18        		.byte	24
 5461 0742 3C        		.byte	60
 5462 0743 66        		.byte	102
 5463 0744 66        		.byte	102
 5464 0745 3C        		.byte	60
 5465 0746 18        		.byte	24
 5466 0747 3C        		.byte	60
 5467 0748 3C        		.byte	60
 5468 0749 66        		.byte	102
 5469 074a 66        		.byte	102
 5470 074b 7E        		.byte	126
 5471 074c 66        		.byte	102
 5472 074d 66        		.byte	102
 5473 074e 3C        		.byte	60
 5474 074f 00        		.byte	0
 5475 0750 3E        		.byte	62
 5476 0751 63        		.byte	99
 5477 0752 63        		.byte	99
 5478 0753 63        		.byte	99
 5479 0754 63        		.byte	99
 5480 0755 36        		.byte	54
 5481 0756 77        		.byte	119
 5482 0757 00        		.byte	0
 5483 0758 3C        		.byte	60
 5484 0759 30        		.byte	48
 5485 075a 18        		.byte	24
 5486 075b 3C        		.byte	60
 5487 075c 66        		.byte	102
 5488 075d 66        		.byte	102
 5489 075e 3C        		.byte	60
 5490 075f 00        		.byte	0
 5491 0760 00        		.byte	0
 5492 0761 00        		.byte	0
 5493 0762 36        		.byte	54
 5494 0763 6F        		.byte	111
 5495 0764 6B        		.byte	107
 5496 0765 7B        		.byte	123
 5497 0766 36        		.byte	54
 5498 0767 00        		.byte	0
 5499 0768 00        		.byte	0
 5500 0769 03        		.byte	3
 5501 076a 3E        		.byte	62
 5502 076b 66        		.byte	102
 5503 076c 7E        		.byte	126
 5504 076d 66        		.byte	102
 5505 076e 7C        		.byte	124
 5506 076f C0        		.byte	-64
 5507 0770 00        		.byte	0
 5508 0771 00        		.byte	0
 5509 0772 3E        		.byte	62
 5510 0773 60        		.byte	96
 5511 0774 3C        		.byte	60
 5512 0775 60        		.byte	96
 5513 0776 3E        		.byte	62
 5514 0777 00        		.byte	0
 5515 0778 3C        		.byte	60
 5516 0779 66        		.byte	102
 5517 077a 66        		.byte	102
 5518 077b 66        		.byte	102
 5519 077c 66        		.byte	102
 5520 077d 66        		.byte	102
 5521 077e 66        		.byte	102
 5522 077f 00        		.byte	0
 5523 0780 00        		.byte	0
 5524 0781 7E        		.byte	126
 5525 0782 00        		.byte	0
 5526 0783 7E        		.byte	126
 5527 0784 00        		.byte	0
 5528 0785 7E        		.byte	126
 5529 0786 00        		.byte	0
 5530 0787 00        		.byte	0
 5531 0788 18        		.byte	24
 5532 0789 18        		.byte	24
 5533 078a 7E        		.byte	126
 5534 078b 18        		.byte	24
 5535 078c 18        		.byte	24
 5536 078d 00        		.byte	0
 5537 078e 7E        		.byte	126
 5538 078f 00        		.byte	0
 5539 0790 30        		.byte	48
 5540 0791 18        		.byte	24
 5541 0792 0C        		.byte	12
 5542 0793 18        		.byte	24
 5543 0794 30        		.byte	48
 5544 0795 00        		.byte	0
 5545 0796 7E        		.byte	126
 5546 0797 00        		.byte	0
 5547 0798 0C        		.byte	12
 5548 0799 18        		.byte	24
 5549 079a 30        		.byte	48
 5550 079b 18        		.byte	24
 5551 079c 0C        		.byte	12
 5552 079d 00        		.byte	0
 5553 079e 7E        		.byte	126
 5554 079f 00        		.byte	0
 5555 07a0 0E        		.byte	14
 5556 07a1 1B        		.byte	27
 5557 07a2 1B        		.byte	27
 5558 07a3 18        		.byte	24
 5559 07a4 18        		.byte	24
 5560 07a5 18        		.byte	24
 5561 07a6 18        		.byte	24
 5562 07a7 18        		.byte	24
 5563 07a8 18        		.byte	24
 5564 07a9 18        		.byte	24
 5565 07aa 18        		.byte	24
 5566 07ab 18        		.byte	24
 5567 07ac 18        		.byte	24
 5568 07ad D8        		.byte	-40
 5569 07ae D8        		.byte	-40
 5570 07af 70        		.byte	112
 5571 07b0 00        		.byte	0
 5572 07b1 18        		.byte	24
 5573 07b2 00        		.byte	0
 5574 07b3 7E        		.byte	126
 5575 07b4 00        		.byte	0
 5576 07b5 18        		.byte	24
 5577 07b6 00        		.byte	0
 5578 07b7 00        		.byte	0
 5579 07b8 00        		.byte	0
 5580 07b9 3B        		.byte	59
 5581 07ba 6E        		.byte	110
 5582 07bb 00        		.byte	0
 5583 07bc 3B        		.byte	59
 5584 07bd 6E        		.byte	110
 5585 07be 00        		.byte	0
 5586 07bf 00        		.byte	0
 5587 07c0 1C        		.byte	28
 5588 07c1 36        		.byte	54
 5589 07c2 36        		.byte	54
 5590 07c3 1C        		.byte	28
 5591 07c4 00        		.byte	0
 5592 07c5 00        		.byte	0
 5593 07c6 00        		.byte	0
 5594 07c7 00        		.byte	0
 5595 07c8 00        		.byte	0
 5596 07c9 00        		.byte	0
 5597 07ca 00        		.byte	0
 5598 07cb 18        		.byte	24
 5599 07cc 18        		.byte	24
 5600 07cd 00        		.byte	0
 5601 07ce 00        		.byte	0
 5602 07cf 00        		.byte	0
 5603 07d0 00        		.byte	0
 5604 07d1 00        		.byte	0
 5605 07d2 00        		.byte	0
 5606 07d3 00        		.byte	0
 5607 07d4 18        		.byte	24
 5608 07d5 00        		.byte	0
 5609 07d6 00        		.byte	0
 5610 07d7 00        		.byte	0
 5611 07d8 0F        		.byte	15
 5612 07d9 0C        		.byte	12
 5613 07da 0C        		.byte	12
 5614 07db CC        		.byte	-52
 5615 07dc 6C        		.byte	108
 5616 07dd 3C        		.byte	60
 5617 07de 1C        		.byte	28
 5618 07df 0C        		.byte	12
 5619 07e0 3C        		.byte	60
 5620 07e1 36        		.byte	54
 5621 07e2 36        		.byte	54
 5622 07e3 36        		.byte	54
 5623 07e4 36        		.byte	54
 5624 07e5 00        		.byte	0
 5625 07e6 00        		.byte	0
 5626 07e7 00        		.byte	0
 5627 07e8 38        		.byte	56
 5628 07e9 0C        		.byte	12
 5629 07ea 18        		.byte	24
 5630 07eb 30        		.byte	48
 5631 07ec 3C        		.byte	60
 5632 07ed 00        		.byte	0
 5633 07ee 00        		.byte	0
 5634 07ef 00        		.byte	0
 5635 07f0 00        		.byte	0
 5636 07f1 00        		.byte	0
 5637 07f2 3C        		.byte	60
 5638 07f3 3C        		.byte	60
 5639 07f4 3C        		.byte	60
 5640 07f5 3C        		.byte	60
 5641 07f6 00        		.byte	0
 5642 07f7 00        		.byte	0
 5643 07f8 00        		.byte	0
 5644 07f9 00        		.byte	0
 5645 07fa 00        		.byte	0
 5646 07fb 00        		.byte	0
 5647 07fc 00        		.byte	0
 5648 07fd 00        		.byte	0
 5649 07fe 00        		.byte	0
 5650 07ff 00        		.byte	0
 5667               		.text
 5669               	.Letext0:
 5670               		.ident	"GCC: (GNU) 5.4.0"
 5671               	.global __do_copy_data
 5672               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 timings.c
     /tmp/cc9YLgIm.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc9YLgIm.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc9YLgIm.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc9YLgIm.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc9YLgIm.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc9YLgIm.s:117    .text:0000000000000000 __vector_16
     /tmp/cc9YLgIm.s:185    .text:0000000000000058 _Z5setupv
     /tmp/cc9YLgIm.s:360    .text:00000000000000fa _Z4loopv
     /tmp/cc9YLgIm.s:3591   .data:0000000000000000 _ZL14scroll_enabled
     /tmp/cc9YLgIm.s:3596   .bss:0000000000000002 _ZL8cursor_x
     /tmp/cc9YLgIm.s:3594   .bss:0000000000000001 _ZL8cursor_y
                             .bss:0000000000000000 _ZL12inverse_text
     /tmp/cc9YLgIm.s:3602   .progmem.data:0000000000000000 _ZL4font
     /tmp/cc9YLgIm.s:3567   .text.startup:0000000000000000 main
     /tmp/cc9YLgIm.s:349    .rodata.str1.1:0000000000000000 .LC0

UNDEFINED SYMBOLS
__floatunsisf
__subsf3
__mulsf3
__addsf3
__ltsf2
__do_copy_data
__do_clear_bss
